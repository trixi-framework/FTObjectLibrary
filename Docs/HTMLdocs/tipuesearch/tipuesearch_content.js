var tipuesearch = {"pages":[{"text":"FTObjectLibrary FTObjectLibrary provides a collection of reference counted Fortran 2003 classes to \n facilitate writing generic object oriented Fortran programs. Reference counting\n is implemented to assist with memory management so that the lifespans of objects\n are properly maintained and are so that objects are deleted only when no other references are made to them. FTObjectLibrary tries, as much as the maturity of Fortran compilers allow, to\n use the new F2003/2008 features to make generic programming possible. The LCD\n for the library is gfortran, and as modern features get implemented in the\n compiler, FTObjectLibrary will be updated to include those features. In the meantime, there\n are a few workarounds that exist in the code. The library includes three categories of classes: Value classes Container classes Error reporting and testing classes Value classes include the base class, FTObject and at the current time, a subclass, FTValue. FTObject is the base class that implements the reference counting mechanism and other functions that should be overridden in subclasses. It the base class for all classes in the FTObjectLibrary library. You will usually not allocate objects of this class. Instead you will create your own subclasses of it that have data and procedures as needed. FTValue is a wrapper class that allows storage of real, integer, character and logical values, which can then be stored in containers. Container classes let you store any subclass of the base class FTObject in them. This makes it easy to store, for instance, a linked list of linked lists, or an array of dictionaries. Included in the library are the following standard container classes: FTLinkedList implements a doubly and optionally circular linked list container class. FTStack is a subclass of FTLinkedList that adds the usual push, pop, and peek routines. FTSparseMatrix associates a double index (i,j) to an FTObject. Basically this is a two dimensional sparse matrix of pointers to FTObjects. FTMultiIndexTable associates an integer array keys(:) to an FTObject. Basically this is an m--dimensional sparse matrix of pointers to FTObjects. FTDictionary is an ``associative container'', that associates a string to another FTObject. FTValueDictionary is a subclass of FTDictionary that has additional methods to store and retrieve\nvalues. FTMutableObjectArray is a mutable one-dimensional array class that can store any FTObject The library also contains classes for testing (FTAssertions, TestSuiteManagerClass) and for reporting errors through the FTException class. Developer Info David A. Kopriva Department of Mathematics\nThe Florida State University","tags":"","loc":"index.html","title":" FTObjectLibrary "},{"text":"This File Depends On sourcefile~~calculator.f90~~EfferentGraph sourcefile~calculator.f90 Calculator.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~calculator.f90 sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftvalueclass.f90 sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 sourcefile~ftstackclass.f90 FTStackClass.f90 sourcefile~ftstackclass.f90->sourcefile~calculator.f90 sourcefile~ftvalueclass.f90->sourcefile~calculator.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftstackclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~ftvalueclass.f90 var pansourcefilecalculatorf90EfferentGraph = svgPanZoom('#sourcefilecalculatorf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules CalculatorClass Source Code Calculator.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      Calculator.f90 !      Created: July 31, 2014 at 9:23 AM !      By: David Kopriva ! !      A simple toy reverse polish calculator. ! !        --------------------------------- !        Example: compute 3*(4+2*3)-5 = 25 !        --------------------------------- ! !         CALL calc % init() !         CALL calc % enter(2.0d0) !         CALL calc % enter(3.0d0) !         CALL calc % enter(\"*\") !         CALL calc % enter(4.0d0) !         CALL calc % enter(\"+\") !         CALL calc % enter(3.0d0) !         CALL calc % enter(\"*\") !         CALL calc % enter(5.0d0) !         CALL calc % enter(\"-\") !         PRINT *, \"3*(4+2*3)-5 = \",calc % readDisplay() !         CALL calc % destruct() ! ! !//////////////////////////////////////////////////////////////////////// ! Module CalculatorClass USE FTObjectClass USE FTStackClass USE FTValueClass IMPLICIT NONE PRIVATE TYPE , EXTENDS ( FTObject ) :: Calculator CLASS ( FTStack ), POINTER , PRIVATE :: stack ! !           ======== CONTAINS !           ======== ! PROCEDURE , PUBLIC :: init => initCalculator PROCEDURE , PUBLIC :: destruct => destructCalculator PROCEDURE , PUBLIC :: clear => clearCalculator PROCEDURE , PUBLIC :: enterOperation PROCEDURE , PUBLIC :: enterValue GENERIC :: enter => enterOperation , enterValue PROCEDURE , PUBLIC :: readDisplay END TYPE Calculator PUBLIC :: Calculator ! !        ======== CONTAINS !        ======== ! ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initCalculator ( self ) IMPLICIT NONE CLASS ( Calculator ) :: self CALL self % FTObject % init () ALLOCATE ( self % stack ) CALL self % stack % init () END SUBROUTINE initCalculator ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE destructCalculator ( self ) IMPLICIT NONE CLASS ( Calculator ) :: self CALL release ( self % stack ) CALL self % FTObject % destruct () END SUBROUTINE destructCalculator ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE releaseCalculator ( self ) IMPLICIT NONE CLASS ( Calculator ) , POINTER :: self CLASS ( FTObject ) , POINTER :: obj obj => self CALL releaseFTObject ( self = obj ) IF ( . NOT . ASSOCIATED ( obj ) ) THEN self => NULL () END IF END SUBROUTINE releaseCalculator ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE clearCalculator ( self ) IMPLICIT NONE CLASS ( Calculator ) :: self CALL self % stack % removeAllObjects () END SUBROUTINE clearCalculator ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE enterOperation ( self , op ) IMPLICIT NONE CLASS ( Calculator ) :: self CHARACTER ( LEN =* ) :: op CLASS ( FTObject ) , POINTER :: obj CLASS ( FTValue ) , POINTER :: v REAL ( KIND = FT_DOUBLE_PRECISION_KIND ) :: x , y , r SELECT CASE ( op ) CASE ( \"+\" ) x = popValue ( self % stack ) y = popValue ( self % stack ) r = x + y CALL self % enterValue ( r ) CASE ( \"-\" ) x = popValue ( self % stack ) y = popValue ( self % stack ) r = y - x CALL self % enterValue ( r ) CASE ( \"*\" ) x = popValue ( self % stack ) y = popValue ( self % stack ) r = x * y CALL self % enterValue ( r ) CASE ( \"/\" ) x = popValue ( self % stack ) y = popValue ( self % stack ) r = x / y CALL self % enterValue ( r ) CASE DEFAULT END SELECT END SUBROUTINE enterOperation ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION popValue ( stack ) RESULT ( r ) IMPLICIT NONE TYPE ( FTStack ) :: stack CLASS ( FTObject ) , POINTER :: obj CLASS ( FTValue ) , POINTER :: v REAL ( KIND = FT_DOUBLE_PRECISION_KIND ) :: r CALL stack % pop ( obj ) v => valueFromObject ( obj ) r = v % doublePrecisionValue () CALL release ( v ) END FUNCTION popValue ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE enterValue ( self , v ) IMPLICIT NONE CLASS ( Calculator ) :: self REAL ( KIND = FT_DOUBLE_PRECISION_KIND ) :: v CLASS ( FTValue ) , POINTER :: vValue CLASS ( FTObject ), POINTER :: obj ALLOCATE ( vValue ) CALL vValue % initWithValue ( v ) obj => vValue CALL self % stack % push ( obj ) CALL release ( vValue ) END SUBROUTINE enterValue ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION readDisplay ( self ) RESULT ( r ) IMPLICIT NONE CLASS ( Calculator ) :: self REAL ( KIND = FT_DOUBLE_PRECISION_KIND ) :: r CLASS ( FTObject ), POINTER :: obj obj => self % stack % peek () SELECT TYPE ( obj ) TYPE is ( FTValue ) r = obj % doublePrecisionValue () CLASS DEFAULT PRINT * , \"Can't read display\" r = 0.0 END SELECT END FUNCTION readDisplay END MODULE CalculatorClass","tags":"","loc":"sourcefile/calculator.f90.html","title":"Calculator.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~linkedlistexample.f90~~EfferentGraph sourcefile~linkedlistexample.f90 LinkedListExample.f90 sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~linkedlistexample.f90 sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~ftvalueclass.f90->sourcefile~linkedlistexample.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftvalueclass.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~ftvalueclass.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules linkedListDemonstrationModule Source Code LinkedListExample.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      demonstrateLinkedList.f90 !      Created: July 29, 2014 at 12:50 PM !      By: David Kopriva ! !//////////////////////////////////////////////////////////////////////// ! MODULE linkedListDemonstrationModule CONTAINS SUBROUTINE demonstrateLinkedList USE FTLinkedListClass USE FTLinkedListIteratorClass USE FTValueClass IMPLICIT NONE CLASS ( FTLinkedList ) , POINTER :: list CLASS ( FTLinkedListIterator ), POINTER :: iterator CLASS ( FTValue ) , POINTER :: v CLASS ( FTObject ) , POINTER :: obj , objToDelete INTEGER , DIMENSION ( 6 ) :: values = [ 1 , 3 , 5 , 7 , 9 , 11 ] INTEGER :: j ! !        -------------------------------- !        Allocate and initialize the list !        -------------------------------- ! ALLOCATE ( list ) CALL list % init () ! !        ------------------------------------------ !        Add some values to the list. Any subclass !        of FTObject can be added to the list, !        including other lists. !        Let the list take ownership of the objects. !        ------------------------------------------- ! DO j = 1 , 6 ALLOCATE ( v ); CALL v % initWithValue ( values ( j )) obj => v CALL list % add ( obj ) CALL release ( v ) END DO PRINT * , \"There are \" , list % COUNT (), \" records in the list\" ! !        -------------------------------------------------- !        Iterate through the list and print the values. !        Tag (point) the entry with value = 5 to use later. !        -------------------------------------------------- ! ALLOCATE ( iterator ) CALL iterator % initWithFTLinkedList ( list ) PRINT * , \"Values in the list are:\" DO WHILE ( . NOT . iterator % isAtEnd () ) v => valueFromObject ( iterator % object ()) PRINT * , v % integerValue () IF ( v % integerValue () == 5 ) objToDelete => iterator % object () CALL iterator % moveToNext () ! DON'T FORGET THIS CALL ! END DO ! !        --------------------------------------- !        Insert a value after the tagged object. !        --------------------------------------- ! ALLOCATE ( v ); CALL v % initWithValue ( 99 ); obj => v CALL list % insertObjectAfterObject ( obj , objToDelete ) PRINT * , \"After adding 99 after value 5, the values in the list are:\" CALL list % printDescription ( iUnit = 6 ) ! !        ------------------------ !        Delete the tagged object !        ------------------------ ! CALL list % remove ( objToDelete ) PRINT * , \"After Deleting the value 5, the values in the list are:\" CALL list % printDescription ( iUnit = 6 ) ! !        ---------------- !        Reverse the list !        ---------------- ! CALL list % reverse () PRINT * , \"After reversing the list:\" CALL list % printDescription ( iUnit = 6 ) ! !        -------- !        Clean up !        -------- ! CALL release ( iterator ) CALL release ( list ) END SUBROUTINE demonstrateLinkedList END MODULE linkedListDemonstrationModule","tags":"","loc":"sourcefile/linkedlistexample.f90.html","title":"LinkedListExample.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~ftobjectlibrary.f90~~EfferentGraph sourcefile~ftobjectlibrary.f90 FTObjectLibrary.f90 sourcefile~assert.f90 Assert.f90 sourcefile~assert.f90->sourcefile~ftobjectlibrary.f90 sourcefile~testsuitemanagerclass.f90 TestSuiteManagerClass.f90 sourcefile~assert.f90->sourcefile~testsuitemanagerclass.f90 sourcefile~ftsparsematrixclass.f90 FTSparseMatrixClass.f90 sourcefile~ftsparsematrixclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftdictionaryclass.f90 FTDictionaryClass.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftvaluedictionaryclass.f90 FTValueDictionaryClass.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftvaluedictionaryclass.f90 sourcefile~ftexceptionclass.f90 FTExceptionClass.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftexceptionclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftobjectclass.f90->sourcefile~ftsparsematrixclass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftvalueclass.f90 sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftstackclass.f90 FTStackClass.f90 sourcefile~ftstackclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftstackclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~comparisons.f90 Comparisons.f90 sourcefile~comparisons.f90->sourcefile~ftobjectlibrary.f90 sourcefile~comparisons.f90->sourcefile~assert.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~testsuitemanagerclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftvalueclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftvalueclass.f90->sourcefile~ftvaluedictionaryclass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftsparsematrixclass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftstackclass.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90->sourcefile~comparisons.f90 sourcefile~ftolconstants.f90->sourcefile~ftvalueclass.f90 var pansourcefileftobjectlibraryf90EfferentGraph = svgPanZoom('#sourcefileftobjectlibraryf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules FTObjectLibrary Source Code FTObjectLibrary.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      FTObjectLibrary.f90 !      Created: May 8, 2014 at 2:49 PM !      By: David Kopriva ! !//////////////////////////////////////////////////////////////////////// ! !>A module that simply USEs the entire library modules. !> Module FTObjectLibrary USE FTAssertions USE ComparisonsModule USE FTValueDictionaryClass USE TestSuiteManagerClass USE FTObjectClass USE FTDictionaryClass USE FTSparseMatrixClass USE FTMutableObjectArrayClass USE FTStackClass USE FTLinkedListClass USE FTLinkedListIteratorClass USE FTValueClass USE FTExceptionClass IMPLICIT NONE END MODULE FTObjectLibrary","tags":"","loc":"sourcefile/ftobjectlibrary.f90.html","title":"FTObjectLibrary.f90 – FTObjectLibrary"},{"text":"Files Dependent On This One sourcefile~~ftolconstants.f90~~AfferentGraph sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~comparisons.f90 Comparisons.f90 sourcefile~ftolconstants.f90->sourcefile~comparisons.f90 sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~ftolconstants.f90->sourcefile~ftvalueclass.f90 sourcefile~assert.f90 Assert.f90 sourcefile~ftolconstants.f90->sourcefile~assert.f90 sourcefile~comparisons.f90->sourcefile~assert.f90 sourcefile~ftobjectlibrary.f90 FTObjectLibrary.f90 sourcefile~comparisons.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftvalueclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~sparsematrixtests.f90 SparseMatrixTests.f90 sourcefile~ftvalueclass.f90->sourcefile~sparsematrixtests.f90 sourcefile~dictionarytests.f90 DictionaryTests.f90 sourcefile~ftvalueclass.f90->sourcefile~dictionarytests.f90 sourcefile~ftvaluedictionaryclass.f90 FTValueDictionaryClass.f90 sourcefile~ftvalueclass.f90->sourcefile~ftvaluedictionaryclass.f90 sourcefile~hashtabletests.f90 HashTableTests.f90 sourcefile~ftvalueclass.f90->sourcefile~hashtabletests.f90 sourcefile~linkedlisttests.f90 LinkedListTests.f90 sourcefile~ftvalueclass.f90->sourcefile~linkedlisttests.f90 sourcefile~stackstests.f90 StacksTests.f90 sourcefile~ftvalueclass.f90->sourcefile~stackstests.f90 sourcefile~calculator.f90 Calculator.f90 sourcefile~ftvalueclass.f90->sourcefile~calculator.f90 sourcefile~linkedlistexample.f90 LinkedListExample.f90 sourcefile~ftvalueclass.f90->sourcefile~linkedlistexample.f90 sourcefile~valueclasstests.f90 ValueClassTests.f90 sourcefile~ftvalueclass.f90->sourcefile~valueclasstests.f90 sourcefile~mutablearraytests.f90 MutableArrayTests.f90 sourcefile~ftvalueclass.f90->sourcefile~mutablearraytests.f90 sourcefile~multiindextabletests.f90 MultiIndexTableTests.f90 sourcefile~ftvalueclass.f90->sourcefile~multiindextabletests.f90 sourcefile~assert.f90->sourcefile~ftobjectlibrary.f90 sourcefile~assert.f90->sourcefile~sparsematrixtests.f90 sourcefile~assert.f90->sourcefile~dictionarytests.f90 sourcefile~assert.f90->sourcefile~hashtabletests.f90 sourcefile~assert.f90->sourcefile~linkedlisttests.f90 sourcefile~assert.f90->sourcefile~stackstests.f90 sourcefile~assert.f90->sourcefile~valueclasstests.f90 sourcefile~assert.f90->sourcefile~mutablearraytests.f90 sourcefile~assert.f90->sourcefile~multiindextabletests.f90 sourcefile~valuedictionarytests.f90 ValueDictionaryTests.f90 sourcefile~assert.f90->sourcefile~valuedictionarytests.f90 sourcefile~exceptiontests.f90 ExceptionTests.f90 sourcefile~assert.f90->sourcefile~exceptiontests.f90 sourcefile~testsuitemanagerclass.f90 TestSuiteManagerClass.f90 sourcefile~assert.f90->sourcefile~testsuitemanagerclass.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~valuedictionarytests.f90 sourcefile~ftexceptionclass.f90 FTExceptionClass.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~exceptiontests.f90 sourcefile~ftexceptionclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftexceptionclass.f90->sourcefile~exceptiontests.f90 sourcefile~testsuitemanagerclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~testmain.f90 TestMain.f90 sourcefile~testsuitemanagerclass.f90->sourcefile~testmain.f90 var pansourcefileftolconstantsf90AfferentGraph = svgPanZoom('#sourcefileftolconstantsf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules FTOLConstants Source Code FTOLConstants.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      Constants.f90 !      Created: June 12, 2013 2:54 PM !      By: David Kopriva ! !//////////////////////////////////////////////////////////////////////// ! !> Defines constants to be used by the library ! Module FTOLConstants IMPLICIT NONE INTEGER , PARAMETER :: FT_ORDERED_ASCENDING = 1 , FT_ORDERED_DESCENDING = - 1 , FT_ORDERED_SAME = 0 INTEGER , PARAMETER :: QUAD_DIGITS = 30 END Module FTOLConstants","tags":"","loc":"sourcefile/ftolconstants.f90.html","title":"FTOLConstants.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~ftdataclass.f90~~EfferentGraph sourcefile~ftdataclass.f90 FTDataClass.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftdataclass.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules FTDataClass Source Code FTDataClass.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      FTDataClass.f90 !      Created: July 11, 2013 2:00 PM !      By: David Kopriva ! !>FTData defines a subclass of FTObject to contain immutable !>generic data, including derived types. !> !>The initializer !>copies the data and takes ownership of that copy. FTData !>gives a way to use derived types without having to subclass !>FTObject. ! !//////////////////////////////////////////////////////////////////////// ! Module FTDataClass USE FTObjectClass IMPLICIT NONE ! !     --------- !     Constants !     --------- ! INTEGER , PARAMETER :: DATA_CLASS_TYPE_LENGTH = 32 ! !     --------------------- !     Class type definition !     --------------------- ! TYPE , EXTENDS ( FTObject ) :: FTData PRIVATE CHARACTER ( LEN = DATA_CLASS_TYPE_LENGTH ) :: dataType CHARACTER ( LEN = 1 ), ALLOCATABLE :: dataStorage (:) ! !        ======== CONTAINS !        ======== ! PROCEDURE , PUBLIC :: initWithDataOfType PROCEDURE , PUBLIC :: storedData PROCEDURE , PUBLIC :: className => dataClassName END TYPE FTData INTERFACE release MODULE PROCEDURE releaseFTData END INTERFACE CONTAINS ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initWithDataOfType ( self , genericData , dataType ) IMPLICIT NONE CLASS ( FTData ) :: self CHARACTER ( LEN =* ) :: dataType CHARACTER ( LEN = 1 ) :: genericData (:) INTEGER :: dataSize CALL self % FTObject % init () dataSize = SIZE ( genericData ) ALLOCATE ( self % dataStorage ( dataSize )) self % dataStorage = genericData self % dataType = dataType END SUBROUTINE initWithDataOfType ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE releaseFTData ( self ) IMPLICIT NONE CLASS ( FTData ) , POINTER :: self CLASS ( FTObject ), POINTER :: obj IF (. NOT . ASSOCIATED ( self )) RETURN obj => self CALL releaseFTObject ( self = obj ) IF ( . NOT . ASSOCIATED ( obj ) ) THEN self => NULL () END IF END SUBROUTINE releaseFTData !@mark - ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION storedData ( self ) RESULT ( d ) IMPLICIT NONE CLASS ( FTData ) :: self CHARACTER ( LEN = 1 ) :: d ( SIZE ( self % dataStorage )) d = self % dataStorage END FUNCTION storedData ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION dataType ( self ) RESULT ( t ) IMPLICIT NONE CLASS ( FTData ) :: self CHARACTER ( LEN = DATA_CLASS_TYPE_LENGTH ) :: t t = self % dataType END FUNCTION dataType ! !//////////////////////////////////////////////////////////////////////// ! !      ----------------------------------------------------------------- !> Class name returns a string with the name of the type of the object !> !>  ### Usage: !> !>        PRINT *,  obj % className() !>        if( obj % className = \"FTData\") !> FUNCTION dataClassName ( self ) RESULT ( s ) IMPLICIT NONE CLASS ( FTData ) :: self CHARACTER ( LEN = CLASS_NAME_CHARACTER_LENGTH ) :: s s = \"FTData\" END FUNCTION dataClassName ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION dataIsOfType ( self , dataType ) RESULT ( t ) IMPLICIT NONE CLASS ( FTData ) :: self CHARACTER ( LEN = DATA_CLASS_TYPE_LENGTH ) :: dataType LOGICAL :: t IF ( dataType == self % dataType ) THEN t = . TRUE . ELSE t = . FALSE . END IF END FUNCTION dataIsOfType END Module FTDataClass","tags":"","loc":"sourcefile/ftdataclass.f90.html","title":"FTDataClass.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~ftdictionaryclass.f90~~EfferentGraph sourcefile~ftdictionaryclass.f90 FTDictionaryClass.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~ftdictionaryclass.f90~~AfferentGraph sourcefile~ftdictionaryclass.f90 FTDictionaryClass.f90 sourcefile~ftvaluedictionaryclass.f90 FTValueDictionaryClass.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftvaluedictionaryclass.f90 sourcefile~dictionarytests.f90 DictionaryTests.f90 sourcefile~ftdictionaryclass.f90->sourcefile~dictionarytests.f90 sourcefile~ftexceptionclass.f90 FTExceptionClass.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftobjectlibrary.f90 FTObjectLibrary.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~valuedictionarytests.f90 ValueDictionaryTests.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~valuedictionarytests.f90 sourcefile~exceptiontests.f90 ExceptionTests.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~exceptiontests.f90 sourcefile~ftexceptionclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftexceptionclass.f90->sourcefile~exceptiontests.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules FTKeyObjectPairClass FTDictionaryClass Source Code FTDictionaryClass.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      FTDictionary.f90 !      Created: January 28, 2013 2:00 PM !      By: David Kopriva ! !//////////////////////////////////////////////////////////////////////// ! !>The FTKeyObjectPairClass is for use by the FTDictionary Class and will !>generally not be interacted with by the user. !> Module FTKeyObjectPairClass USE FTObjectClass IMPLICIT NONE ! !    ----------------- !    Module constants: !    ----------------- ! INTEGER , PARAMETER , PUBLIC :: FTDICT_KWD_STRING_LENGTH = 64 ! !        ---------- !        Class type !        ---------- ! TYPE , EXTENDS ( FTObject ) :: FTKeyObjectPair CHARACTER ( LEN = FTDICT_KWD_STRING_LENGTH ) :: keyString CLASS ( FTObject ) , POINTER :: valueObject => NULL () ! !           -------- CONTAINS !           -------- ! PROCEDURE :: initWithObjectAndKey PROCEDURE :: destruct => destructFTKeyObjectPair PROCEDURE :: description => FTKeyObjectPairDescription PROCEDURE :: printDescription => printFTKeyObjectPairDescription PROCEDURE :: key PROCEDURE :: object END TYPE FTKeyObjectPair INTERFACE release MODULE PROCEDURE releaseFTKeyObjectPair END INTERFACE ! !        ======== CONTAINS !        ======== ! !@mark - ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initWithObjectAndKey ( self , v , key ) IMPLICIT NONE CLASS ( FTKeyObjectPair ) :: self CHARACTER ( LEN =* ) :: key CLASS ( FTObject ) , POINTER :: v CALL self % FTObject % init self % keyString = key self % valueObject => v CALL self % valueObject % retain END SUBROUTINE initWithObjectAndKey ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE destructFTKeyObjectPair ( self ) IMPLICIT NONE CLASS ( FTKeyObjectPair ) :: self self % keyString = \"\" CALL releaseFTObject ( self % valueObject ) ! !           ---------------------------------------------------- !           Call superclass destructor after processing subclass !           specific items !           ---------------------------------------------------- ! CALL self % FTObject % destruct () END SUBROUTINE destructFTKeyObjectPair ! !------------------------------------------------ !> Public, generic name: release(self) !> !> Call release(self) on an object to release control !> of an object. If its reference count is zero, then !> it is deallocated. !------------------------------------------------ ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE releaseFTKeyObjectPair ( self ) IMPLICIT NONE CLASS ( FTKeyObjectPair ) , POINTER :: self CLASS ( FTObject ) , POINTER :: obj obj => self CALL releaseFTObject ( self = obj ) IF ( . NOT . ASSOCIATED ( obj ) ) THEN self => NULL () END IF END SUBROUTINE releaseFTKeyObjectPair ! !//////////////////////////////////////////////////////////////////////// ! CHARACTER ( LEN = DESCRIPTION_CHARACTER_LENGTH ) FUNCTION FTKeyObjectPairDescription ( self ) IMPLICIT NONE CLASS ( FTKeyObjectPair ) :: self WRITE ( FTKeyObjectPairDescription , * ) \"(\" , TRIM ( self % keyString ) , \",\" & , TRIM ( self % valueObject % description ()) , \")\" END FUNCTION FTKeyObjectPairDescription ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE printFTKeyObjectPairDescription ( self , iUnit ) IMPLICIT NONE CLASS ( FTKeyObjectPair ) :: self INTEGER :: iUnit WRITE ( iUnit , * ) \"{\" WRITE ( iUnit , '(6x,A,A3)' , ADVANCE = \"NO\" ) TRIM ( self % keyString ) , \" = \" CALL self % valueObject % printDescription ( iUnit ) WRITE ( iUnit , * ) \"}\" END SUBROUTINE printFTKeyObjectPairDescription ! !//////////////////////////////////////////////////////////////////////// ! CHARACTER ( LEN = FTDICT_KWD_STRING_LENGTH ) FUNCTION key ( self ) IMPLICIT NONE CLASS ( FTKeyObjectPair ) :: self key = self % keyString END FUNCTION key ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION object ( self ) IMPLICIT NONE CLASS ( FTKeyObjectPair ) :: self CLASS ( FTObject ), POINTER :: object object => self % valueObject END FUNCTION object END Module FTKeyObjectPairClass ! !//////////////////////////////////////////////////////////////////////// ! !@mark - !> !>A dictionary is a special case of a hash table that stores key-value pairs. !> !>It is an !>example of what is called an ``associative container''. In the implementation of FTObjectLibrary, !>the value can be any subclass of FTObject and the key is a character variable. The library !>includes the base dictionary that can store and retrieve any subclass of FTObject. It also includes a !>subclass that is designed to store and retrieve FTValue objects. !> !>FTDictionary (Inherits from FTObject) !> !>###Initialization !> !>         CLASS(FTDictionary), POINTER :: dict !>         ALLOCATE(dict) !>         CALL dict % initWithSize(N) ! N = size of dictionary. Should be power of two !> !>###Adding entries !> !>         CLASS(FTDictionary), POINTER :: dict !>         CLASS(FTObject)    , POINTER :: obj !>         CHARACTER(LEN=N)             :: key !>         obj => r                            ! r is subclass of FTObject !>         CALL dict % addObjectForKey(obj,key) !> !>###Accessing entries !> !>         obj => dict % objectForKey(key) !>         CALL cast(obj,v) ! v is the type of object to be extracted !> !>###Destruction !> !>         CALL release(dict) ! Pointer !>         call dict % destruct() ! Stack variable !>###Accessing an object !> !>           TYPE(FTObject) :: obj !>           obj => dict % objectForKey(key) !> !>###Converting a base class pointer to a dictionary !>           dict =>  dictionaryFromObject(obj) !> !>###Getting all of the keys !>           CHARACTER(LEN=FTDICT_KWD_STRING_LENGTH), POINTER :: keys(:) !>           keys =>  dict % allKeys() !>(The target of the pointer must be deallocated by the caller) !>###Getting all of the objects !>           CLASS(FTMutableObjectArray), POINTER :: objectArray !>           objectArray =>  dict % allObjects() ! The array is owned by the caller. !>(The target of the pointer must be released by the caller) !> Module FTDictionaryClass USE FTKeyObjectPairClass USE FTLinkedListClass USE FTLinkedListIteratorClass USE FTMutableObjectArrayClass IMPLICIT NONE TYPE , EXTENDS ( FTObject ) :: FTDictionary INTEGER :: numberOfEntries LOGICAL :: isCaseSensitive TYPE ( FTLinkedList ), DIMENSION (:), POINTER :: entries => NULL () ! !           -------- CONTAINS !           -------- ! PROCEDURE :: initWithSize PROCEDURE :: init PROCEDURE :: setCaseSensitive PROCEDURE :: caseSensitive PROCEDURE :: allKeys PROCEDURE :: allObjects PROCEDURE :: destruct => destructFTDictionary PROCEDURE :: addObjectForKey PROCEDURE :: description => FTDictionaryDescription PROCEDURE :: printDescription => printFTDictionaryDescription PROCEDURE :: objectForKey PROCEDURE :: containsKey PROCEDURE :: className => dictionaryClassName PROCEDURE :: COUNT END TYPE FTDictionary INTERFACE cast MODULE PROCEDURE castToDictionary END INTERFACE cast INTERFACE release MODULE PROCEDURE releaseFTDictionary END INTERFACE ! !        ======== CONTAINS !        ======== ! ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE init ( self ) IMPLICIT NONE CLASS ( FTDictionary ) :: self CALL initWithSize ( self , 16 ) END SUBROUTINE init ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initWithSize ( self , sze ) ! !           ---------------------- !           Designated initializer !           ---------------------- ! IMPLICIT NONE CLASS ( FTDictionary ) :: self INTEGER , INTENT ( in ) :: sze INTEGER :: i CALL self % FTObject % init () self % isCaseSensitive = . true . self % numberOfEntries = 0 ! !           -------------------------------- !           Create the array of linked lists !           -------------------------------- ! ALLOCATE ( self % entries ( sze )) DO i = 1 , sze CALL self % entries ( i ) % init () END DO END SUBROUTINE initWithSize ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE destructFTDictionary ( self ) IMPLICIT NONE CLASS ( FTDictionary ) :: self INTEGER :: i DO i = 1 , SIZE ( self % entries ) CALL self % entries ( i ) % destruct () END DO DEALLOCATE ( self % entries ) self % entries => NULL () ! !           ---------------------------------------------------- !           Call superclass destructor after processing subclass !           specific items !           ---------------------------------------------------- ! CALL self % FTObject % destruct () END SUBROUTINE destructFTDictionary ! !------------------------------------------------ !> Public, generic name: release(self) !> !> Call release(self) on an object to release control !> of an object. If its reference count is zero, then !> it is deallocated. !------------------------------------------------ ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE releaseFTDictionary ( self ) IMPLICIT NONE TYPE ( FTDictionary ) , POINTER :: self CLASS ( FTObject ) , POINTER :: obj IF (. NOT . ASSOCIATED ( self )) RETURN obj => self CALL releaseFTObject ( self = obj ) IF ( . NOT . ASSOCIATED ( obj ) ) THEN self => NULL () END IF END SUBROUTINE releaseFTDictionary ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE setCaseSensitive ( self , bool ) IMPLICIT NONE CLASS ( FTDictionary ) :: self LOGICAL :: bool self % isCaseSensitive = bool END SUBROUTINE setCaseSensitive ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION caseSensitive ( self ) IMPLICIT NONE CLASS ( FTDictionary ) :: self caseSensitive = self % isCaseSensitive END FUNCTION caseSensitive ! !//////////////////////////////////////////////////////////////////////// ! INTEGER FUNCTION COUNT ( self ) IMPLICIT NONE CLASS ( FTDictionary ) :: self COUNT = self % numberOfEntries END FUNCTION COUNT ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE addObjectForKey ( self , object , key ) IMPLICIT NONE CLASS ( FTDictionary ) :: self CLASS ( FTObject ) , POINTER :: object CHARACTER ( LEN =* ) :: key CLASS ( FTKeyObjectPair ), POINTER :: pair => NULL () CLASS ( FTObject ) , POINTER :: ptr => NULL () INTEGER :: h INTEGER , EXTERNAL :: b3hs_hash_key_jenkins h = b3hs_hash_key_jenkins ( key , SIZE ( self % entries )) ALLOCATE ( pair ) CALL pair % initWithObjectAndKey ( object , key ) ptr => pair CALL self % entries ( h ) % add ( ptr ) self % numberOfEntries = self % numberOfEntries + 1 END SUBROUTINE addObjectForKey ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION objectForKey ( self , key ) IMPLICIT NONE CLASS ( FTDictionary ) :: self CHARACTER ( LEN =* ) :: key CLASS ( FTObject ) , POINTER :: objectForKey INTEGER :: h INTEGER , EXTERNAL :: b3hs_hash_key_jenkins objectForKey => NULL () IF ( self % COUNT () == 0 ) RETURN h = b3hs_hash_key_jenkins ( key , SIZE ( self % entries )) IF ( self % entries ( h ) % COUNT () > 0 ) THEN objectForKey => objectForKeyInList ( key , self % entries ( h )) END IF END FUNCTION ObjectForKey ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION containsKey ( self , key ) RESULT ( r ) IMPLICIT NONE CLASS ( FTDictionary ) :: self CHARACTER ( LEN =* ) :: key CLASS ( FTObject ), POINTER :: obj LOGICAL :: r IF ( ASSOCIATED ( self % objectForKey ( key )) ) THEN r = . TRUE . ELSE r = . FALSE . END IF END FUNCTION containsKey ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION objectForKeyInList ( key , list ) IMPLICIT NONE CHARACTER ( LEN =* ) :: key CLASS ( FTLinkedList ) :: list CLASS ( FTObject ), POINTER :: objectForKeyInList CLASS ( FTLinkedListRecord ) , POINTER :: listRecordPtr => NULL () CHARACTER ( LEN = FTDICT_KWD_STRING_LENGTH ) :: keyString objectForKeyInList => NULL () listRecordPtr => list % head DO WHILE ( ASSOCIATED ( listRecordPtr )) ! !              -------------------------------------------- !              The list's recordObject is a FTKeyObjectPair !              -------------------------------------------- ! SELECT TYPE ( pair => listRecordPtr % recordObject ) TYPE is ( FTKeyObjectPair ) keyString = pair % key () IF ( TRIM ( keyString ) == TRIM ( key ) ) THEN objectForKeyInList => pair % object () EXIT END IF CLASS DEFAULT END SELECT listRecordPtr => listRecordPtr % next END DO END FUNCTION objectForKeyInList ! !//////////////////////////////////////////////////////////////////////// ! CHARACTER ( LEN = DESCRIPTION_CHARACTER_LENGTH ) FUNCTION FTDictionaryDescription ( self ) IMPLICIT NONE CLASS ( FTDictionary ) :: self CHARACTER ( LEN = DESCRIPTION_CHARACTER_LENGTH ) :: s INTEGER :: i FTDictionaryDescription = \"\" IF ( SELF % COUNT () == 0 ) RETURN DO i = 1 , SIZE ( self % entries ) s = self % entries ( i ) % description () IF ( LEN_TRIM ( s ) > 0 ) THEN FTDictionaryDescription = TRIM ( FTDictionaryDescription ) // & TRIM ( self % entries ( i ) % description ()) // & CHAR ( 13 ) END IF END DO END FUNCTION FTDictionaryDescription ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE printFTDictionaryDescription ( self , iUnit ) IMPLICIT NONE CLASS ( FTDictionary ) :: self INTEGER :: iUnit INTEGER :: i IF ( SELF % COUNT () == 0 ) THEN WRITE ( iUnit , * ) \"Empty Dictionary\" END IF DO i = 1 , SIZE ( self % entries ) CALL self % entries ( i ) % printDescription ( iUnit ) END DO END SUBROUTINE printFTDictionaryDescription ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION AllObjects ( self ) RESULT ( objectArray ) IMPLICIT NONE ! !           --------- !           Arguments !           --------- ! CLASS ( FTDictionary ) :: self CLASS ( FTMutableObjectArray ), POINTER :: objectArray ! !           --------------- !           Local Variables !           --------------- ! INTEGER :: i CLASS ( FTLinkedListRecord ) , POINTER :: listRecordPtr => NULL () CLASS ( FTObject ) , POINTER :: obj => NULL () CHARACTER ( LEN = FTDICT_KWD_STRING_LENGTH ) :: keyString ! !           -------------------------------------------- !           Allocate a pointer to the object array to be !           returned with refCount = 1 !           -------------------------------------------- ! ALLOCATE ( objectArray ) CALL objectArray % initWithSize ( arraySize = self % COUNT ()) DO i = 1 , SIZE ( self % entries ) listRecordPtr => self % entries ( i ) % head DO WHILE ( ASSOCIATED ( listRecordPtr )) ! !                 -------------------------------------------- !                 The list's recordObject is a FTKeyObjectPair !                 -------------------------------------------- ! SELECT TYPE ( pair => listRecordPtr % recordObject ) TYPE is ( FTKeyObjectPair ) keyString = pair % key () obj => pair % object () CALL objectArray % addObject ( obj ) CLASS DEFAULT END SELECT listRecordPtr => listRecordPtr % next END DO END DO END FUNCTION AllObjects ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION AllKeys ( self ) RESULT ( keys ) IMPLICIT NONE ! !           --------- !           Arguments !           --------- ! CLASS ( FTDictionary ) :: self CHARACTER ( LEN = FTDICT_KWD_STRING_LENGTH ), POINTER :: keys (:) ! !           --------------- !           Local Variables !           --------------- ! INTEGER :: i , c CLASS ( FTLinkedListRecord ) , POINTER :: listRecordPtr => NULL () CHARACTER ( LEN = FTDICT_KWD_STRING_LENGTH ) :: keyString ! !           -------------------------------------------- !           Allocate a pointer to the object array to be !           returned with refCount = 1 !           -------------------------------------------- ! ALLOCATE ( keys ( self % COUNT ())) c = 1 DO i = 1 , SIZE ( self % entries ) listRecordPtr => self % entries ( i ) % head DO WHILE ( ASSOCIATED ( listRecordPtr )) ! !                 -------------------------------------------- !                 The list's recordObject is a FTKeyObjectPair !                 -------------------------------------------- ! SELECT TYPE ( pair => listRecordPtr % recordObject ) TYPE is ( FTKeyObjectPair ) keyString = pair % key () keys ( c ) = keyString CLASS DEFAULT END SELECT c = c + 1 listRecordPtr => listRecordPtr % next END DO END DO END FUNCTION AllKeys ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE castToDictionary ( obj , cast ) ! !     ----------------------------------------------------- !     Cast the base class FTObject to the FTException class !     ----------------------------------------------------- ! IMPLICIT NONE CLASS ( FTObject ) , POINTER :: obj CLASS ( FTDictionary ), POINTER :: cast cast => NULL () SELECT TYPE ( e => obj ) TYPE is ( FTDictionary ) cast => e CLASS DEFAULT END SELECT END SUBROUTINE castToDictionary ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION dictionaryFromObject ( obj ) RESULT ( cast ) ! !     ----------------------------------------------------- !     Cast the base class FTObject to the FTException class !     ----------------------------------------------------- ! IMPLICIT NONE CLASS ( FTObject ) , POINTER :: obj CLASS ( FTDictionary ), POINTER :: cast cast => NULL () SELECT TYPE ( e => obj ) TYPE is ( FTDictionary ) cast => e CLASS DEFAULT END SELECT END FUNCTION dictionaryFromObject ! !//////////////////////////////////////////////////////////////////////// ! !      ----------------------------------------------------------------- !> Class name returns a string with the name of the type of the object !> !>  ### Usage: !> !>        PRINT *,  obj % className() !>        if( obj % className = \"FTDictionary\") !> FUNCTION dictionaryClassName ( self ) RESULT ( s ) IMPLICIT NONE CLASS ( FTDictionary ) :: self CHARACTER ( LEN = CLASS_NAME_CHARACTER_LENGTH ) :: s s = \"FTDictionary\" END FUNCTION dictionaryClassName END Module FTDictionaryClass","tags":"","loc":"sourcefile/ftdictionaryclass.f90.html","title":"FTDictionaryClass.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~ftexceptionclass.f90~~EfferentGraph sourcefile~ftexceptionclass.f90 FTExceptionClass.f90 sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftdictionaryclass.f90 FTDictionaryClass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftstackclass.f90 FTStackClass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftstackclass.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftvaluedictionaryclass.f90 FTValueDictionaryClass.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftvaluedictionaryclass.f90 sourcefile~ftstackclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftvalueclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftvalueclass.f90->sourcefile~ftvaluedictionaryclass.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~ftvalueclass.f90 var pansourcefileftexceptionclassf90EfferentGraph = svgPanZoom('#sourcefileftexceptionclassf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~ftexceptionclass.f90~~AfferentGraph sourcefile~ftexceptionclass.f90 FTExceptionClass.f90 sourcefile~ftobjectlibrary.f90 FTObjectLibrary.f90 sourcefile~ftexceptionclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~exceptiontests.f90 ExceptionTests.f90 sourcefile~ftexceptionclass.f90->sourcefile~exceptiontests.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules FTExceptionClass SharedExceptionManagerModule Source Code FTExceptionClass.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      FTExceptionClass.f90 !      Created: January 29, 2013 5:06 PM !      By: David Kopriva ! ! !>An FTException object gives a way to pass generic !>information about an exceptional situation. !> !>An FTException object gives a way to pass generic !>information about an exceptional situation. Methods for !>dealing with exceptions are defined in the SharedExceptionManagerModule !>module. !> !>An FTException object wraps: !> !>- A severity indicator !>- A name for the exception !>- An optional dictionary that contains whatever information is deemed necessary. !> !>It is expected that classes will define exceptions that use instances !>of the FTException Class. !> !>### Defined constants: !> !>-   FT_ERROR_NONE    = 0 !>-   FT_ERROR_WARNING = 1 !>-   FT_ERROR_FATAL   = 2 !> !>### Initialization !> !>            CALL e  %  initFTException(severity,exceptionName,infoDictionary) !> !>Plus the convenience initializers, which automatically create a FTValueDictionary with a single key called \"message\": !> !>        CALL e % initWarningException(msg = \"message\") !>        CALL e % initFatalException(msg = \"message\") !> !>Plus an assertion exception !> !>        CALL e % initAssertionFailureException(msg,expectedValueObject,observedValueObject,level) !> !>### Destruction !> !>        CALL e  %  release() !> !>###Setting the infoDictionary !> !>        CALL e  %  setInfoDictionary(infoDictionary) !>###Getting the infoDictionary !> !>        dict => e % infoDictionary !>###Getting the name of the exception !> !>        name = e % exceptionName() !>###Getting the severity level of the exception !> !>        level = e % severity() !> Severity levels are FT_ERROR_WARNING or FT_ERROR_FATAL !>###Printing the exception !> !>        CALL e % printDescription() !> ! !//////////////////////////////////////////////////////////////////////// ! Module FTExceptionClass USE FTStackClass USE FTDictionaryClass USE FTValueDictionaryClass USE FTLinkedListIteratorClass IMPLICIT NONE ! !     ---------------- !     Global constants !     ---------------- ! INTEGER , PARAMETER :: FT_ERROR_NONE = 0 , FT_ERROR_WARNING = 1 , FT_ERROR_FATAL = 2 INTEGER , PARAMETER :: ERROR_MSG_STRING_LENGTH = 132 CHARACTER ( LEN = 21 ), PARAMETER :: FTFatalErrorException = \"FTFatalErrorException\" CHARACTER ( LEN = 23 ), PARAMETER :: FTWarningErrorException = \"FTWarningErrorException\" CHARACTER ( LEN = 27 ), PARAMETER :: FTAssertionFailureException = \"FTAssertionFailureException\" ! !     --------------- !     Error base type !     --------------- ! TYPE , EXTENDS ( FTObject ) :: FTException INTEGER , PRIVATE :: severity_ CHARACTER ( LEN = ERROR_MSG_STRING_LENGTH ), PRIVATE :: exceptionName_ CLASS ( FTDictionary ), POINTER , PRIVATE :: infoDictionary_ => NULL () ! !        -------- CONTAINS !        -------- ! PROCEDURE :: initFTException PROCEDURE :: initWarningException PROCEDURE :: initFatalException PROCEDURE :: initAssertionFailureException PROCEDURE :: destruct => destructException PROCEDURE :: setInfoDictionary PROCEDURE :: infoDictionary PROCEDURE :: exceptionName PROCEDURE :: severity PROCEDURE :: printDescription => printFTExceptionDescription PROCEDURE :: className => exceptionClassName END TYPE FTException INTERFACE cast MODULE PROCEDURE castToException END INTERFACE cast INTERFACE release MODULE PROCEDURE releaseFTException END INTERFACE ! !     ======== CONTAINS !     ======== ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initWarningException ( self , msg ) ! ! --------------------------------------------- !>A convenience initializer for a warning error !>that includes the key \"message\" in the !>infoDictionary. Use this initializer as an !>example of how to write one's own exception. ! -------------------------------------------- ! IMPLICIT NONE CLASS ( FTException ) :: self CHARACTER ( LEN =* ) :: msg CLASS ( FTValueDictionary ), POINTER :: userDictionary => NULL () CLASS ( FTDictionary ) , POINTER :: dictPtr => NULL () ALLOCATE ( userDictionary ) CALL userDictionary % initWithSize ( 64 ) CALL userDictionary % addValueForKey ( msg , \"message\" ) dictPtr => userDictionary CALL self % initFTException ( severity = FT_ERROR_WARNING ,& exceptionName = FTWarningErrorException ,& infoDictionary = dictPtr ) CALL releaseMemberDictionary ( self ) END SUBROUTINE initWarningException ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initFatalException ( self , msg ) ! ! --------------------------------------------- !>A convenience initializer for a fatal error !>that includes the key \"message\" in the !>infoDictionary.Use this initializer as an !>example of how to write one's own exception. ! -------------------------------------------- ! IMPLICIT NONE CLASS ( FTException ) :: self CHARACTER ( LEN =* ) :: msg CLASS ( FTValueDictionary ), POINTER :: userDictionary => NULL () CLASS ( FTDictionary ) , POINTER :: dictPtr => NULL () ALLOCATE ( userDictionary ) CALL userDictionary % initWithSize ( 8 ) CALL userDictionary % addValueForKey ( msg , \"message\" ) dictPtr => userDictionary CALL self % initFTException ( severity = FT_ERROR_FATAL ,& exceptionName = FTFatalErrorException ,& infoDictionary = dictPtr ) CALL releaseMemberDictionary ( self ) END SUBROUTINE initFatalException ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initFTException ( self , severity , exceptionName , infoDictionary ) ! ! ----------------------------------- !>The main initializer for the class ! ----------------------------------- ! IMPLICIT NONE CLASS ( FTException ) :: self INTEGER :: severity CHARACTER ( LEN =* ) :: exceptionName CLASS ( FTDictionary ), POINTER , OPTIONAL :: infoDictionary CALL self % FTObject % init () self % severity_ = severity self % exceptionName_ = exceptionName self % infoDictionary_ => NULL () IF ( PRESENT ( infoDictionary ) . AND . ASSOCIATED ( infoDictionary )) THEN CALL self % setInfoDictionary ( infoDictionary ) END IF END SUBROUTINE initFTException ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initAssertionFailureException ( self , msg , expectedValueObject , observedValueObject , level ) ! ! ------------------------------------------------ !>A convenience initializer for an assertion error !>that includes the keys: !> !>-\"message\" !>-\"expectedValue\" !>-\"observedValue\" !> !>in the infoDictionary ! ! ------------------------------------------------ ! IMPLICIT NONE CLASS ( FTException ) :: self CLASS ( FTValue ), POINTER :: expectedValueObject , ObservedValueObject INTEGER :: level CHARACTER ( LEN =* ) :: msg CLASS ( FTValueDictionary ), POINTER :: userDictionary => NULL () CLASS ( FTDictionary ) , POINTER :: dictPtr => NULL () CLASS ( FTObject ) , POINTER :: objectPtr => NULL () ALLOCATE ( userDictionary ) CALL userDictionary % initWithSize ( 8 ) CALL userDictionary % addValueForKey ( msg , \"message\" ) objectPtr => expectedValueObject CALL userDictionary % addObjectForKey ( object = objectPtr , key = \"expectedValue\" ) objectPtr => ObservedValueObject CALL userDictionary % addObjectForKey ( object = objectPtr , key = \"observedValue\" ) dictPtr => userDictionary CALL self % initFTException ( severity = level ,& exceptionName = FTAssertionFailureException ,& infoDictionary = dictPtr ) CALL releaseMemberDictionary ( self ) END SUBROUTINE initAssertionFailureException ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE destructException ( self ) ! ! -------------------------------------------------------------- !>The destructor for the class. Do not call this direectly. Call !>the release() procedure instead ! -------------------------------------------------------------- ! IMPLICIT NONE CLASS ( FTException ) :: self CALL releaseMemberDictionary ( self ) CALL self % FTObject % destruct () END SUBROUTINE destructException !------------------------------------------------ !> Public, generic name: release(self) !> !> Call release(self) on an object to release control !> of an object. If its reference count is zero, then !> it is deallocated. !------------------------------------------------ ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE releaseFTException ( self ) IMPLICIT NONE CLASS ( FTException ) , POINTER :: self CLASS ( FTObject ) , POINTER :: obj IF (. NOT . ASSOCIATED ( self )) RETURN obj => self CALL releaseFTObject ( self = obj ) IF ( . NOT . ASSOCIATED ( obj ) ) THEN self => NULL () END IF END SUBROUTINE releaseFTException ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE setInfoDictionary ( self , dict ) ! ! --------------------------------------------- !>Sets and retains the exception infoDictionary ! --------------------------------------------- ! IMPLICIT NONE CLASS ( FTException ) :: self CLASS ( FTDictionary ), POINTER :: dict IF ( ASSOCIATED ( self % infoDictionary_ )) CALL releaseMemberDictionary ( self ) self % infoDictionary_ => dict CALL self % infoDictionary_ % retain () END SUBROUTINE setInfoDictionary ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE releaseMemberDictionary ( self ) IMPLICIT NONE CLASS ( FTException ) :: self CLASS ( FTObject ), POINTER :: obj IF ( ASSOCIATED ( self % infoDictionary_ )) THEN obj => self % infoDictionary_ CALL releaseFTObject ( self = obj ) IF (. NOT . ASSOCIATED ( obj )) self % infoDictionary_ => NULL () END IF END SUBROUTINE releaseMemberDictionary ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION infoDictionary ( self ) ! ! --------------------------------------------- !>Returns the exception's infoDictionary. Does !>not transfer ownership/reference count is !>unchanged. ! --------------------------------------------- ! IMPLICIT NONE CLASS ( FTException ) :: self CLASS ( FTDictionary ), POINTER :: infoDictionary infoDictionary => self % infoDictionary_ END FUNCTION infoDictionary ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION exceptionName ( self ) ! ! --------------------------------------------- !>Returns the string representing the name set !>for the exception. ! --------------------------------------------- ! IMPLICIT NONE CLASS ( FTException ) :: self CHARACTER ( LEN = ERROR_MSG_STRING_LENGTH ) :: exceptionName exceptionName = self % exceptionName_ END FUNCTION exceptionName ! !//////////////////////////////////////////////////////////////////////// ! INTEGER FUNCTION severity ( self ) ! ! --------------------------------------------- !>Returns the severity level of the exception. ! --------------------------------------------- ! IMPLICIT NONE CLASS ( FTException ) :: self severity = self % severity_ END FUNCTION severity ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE printFTExceptionDescription ( self , iUnit ) ! ! ---------------------------------------------- !>A basic printing of the exception and the info !>held in the infoDicitonary. ! ---------------------------------------------- ! IMPLICIT NONE CLASS ( FTException ) :: self INTEGER :: iUnit CLASS ( FTDictionary ), POINTER :: dict => NULL () !        WRITE(iUnit,*) \"-------------\" WRITE ( iUnit , * ) \" \" WRITE ( iUnit , * ) \"Exception Named: \" , TRIM ( self % exceptionName ()) dict => self % infoDictionary () IF ( ASSOCIATED ( dict )) CALL dict % printDescription ( iUnit ) END SUBROUTINE printFTExceptionDescription ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE castToException ( obj , cast ) ! ! ----------------------------------------------------- !>Cast the base class FTObject to the FTException class ! ----------------------------------------------------- ! IMPLICIT NONE CLASS ( FTObject ) , POINTER :: obj CLASS ( FTException ), POINTER :: cast cast => NULL () SELECT TYPE ( e => obj ) TYPE is ( FTException ) cast => e CLASS DEFAULT END SELECT END SUBROUTINE castToException ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION exceptionFromObject ( obj ) RESULT ( cast ) ! !     ----------------------------------------------------- !     Cast the base class FTObject to the FTException class !     ----------------------------------------------------- ! IMPLICIT NONE CLASS ( FTObject ) , POINTER :: obj CLASS ( FTException ), POINTER :: cast cast => NULL () SELECT TYPE ( e => obj ) TYPE is ( FTException ) cast => e CLASS DEFAULT END SELECT END FUNCTION exceptionFromObject ! !//////////////////////////////////////////////////////////////////////// ! !      ----------------------------------------------------------------- !> Class name returns a string with the name of the type of the object !> !>  ### Usage: !> !>        PRINT *,  obj % className() !>        if( obj % className = \"FTException\") !> FUNCTION exceptionClassName ( self ) RESULT ( s ) IMPLICIT NONE CLASS ( FTException ) :: self CHARACTER ( LEN = CLASS_NAME_CHARACTER_LENGTH ) :: s s = \"FTException\" END FUNCTION exceptionClassName END Module FTExceptionClass ! !//////////////////////////////////////////////////////////////////////// ! !@mark - Module SharedExceptionManagerModule !> !>All exceptions are posted to the SharedExceptionManagerModule. !> !>To use exceptions,first initialize it !>        CALL initializeFTExceptions !>From that point on, all exceptions will be posted there. Note that the !>FTTestSuiteManager class will initialize the SharedExceptionManagerModule, !>so there is no need to do the initialization separately if the FTTestSuiteManager !>class has been initialized. !> !>The exceptions are posted to a stack. To access the exceptions they will be !>peeked or popped from that stack. !> !>###Initialization !>        CALL initializeFTExceptions !>###Finalization !>        CALL destructFTExceptions !>###Throwing an exception !>         CALL throw(exception) !>###Getting the number of exceptions !>         n = errorCount() !>###Catching all exceptions !>         IF(catch())     THEN !>            Do something with the exceptions !>         END IF !>###Getting the named exception caught !>         CLASS(FTException), POINTER :: e !>         e => errorObject() !>###Popping the top exception !>         e => popLastException() !>###Peeking the top exception !>         e => peekLastException() !>###Catching an exception with a given name !>         IF(catch(name))   THEN !>            !Do something with the exception, e.g. !>            e              => errorObject() !>            d              => e % infoDictionary() !>            userDictionary => valueDictionaryFromDictionary(dict = d) !>            msg = userDictionary % stringValueForKey(\"message\",FTDICT_KWD_STRING_LENGTH) !>         END IF !>###Printing all exceptions !>      call printAllExceptions !> USE FTExceptionClass IMPLICIT NONE ! !     -------------------- !     Global error stack !     -------------------- ! CLASS ( FTStack ) , POINTER , PRIVATE :: errorStack => NULL () CLASS ( FTException ), POINTER , PRIVATE :: currentError_ => NULL () INTERFACE catch MODULE PROCEDURE catchAll MODULE PROCEDURE catchErrorWithName END INTERFACE catch PRIVATE :: catchAll , catchErrorWithName ! !     ======== CONTAINS !     ======== ! ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initializeFTExceptions ! !>Called at start of execution. Will be called automatically if an !>exception is thrown. ! IMPLICIT NONE IF ( . NOT . ASSOCIATED ( errorStack ) ) THEN ALLOCATE ( errorStack ) CALL errorStack % init () currentError_ => NULL () END IF END SUBROUTINE initializeFTExceptions ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE destructFTExceptions ! !>Called at the end of execution. This procedure will announce if there !>are uncaught exceptions raised and print them. ! IMPLICIT NONE ! !        -------------------------------------------------- !        First see if there are any uncaught exceptions and !        report them if there are. !        -------------------------------------------------- ! IF ( catch () ) THEN PRINT * PRINT * , \"   ***********************************\" IF ( errorStack % COUNT () == 1 ) THEN PRINT * , \"   An uncaught exception was raised:\" ELSE PRINT * , \"   Uncaught exceptions were raised:\" END IF PRINT * , \"   ***********************************\" PRINT * !DEBUG CALL printAllExceptions CALL errorStack % printDescription ( iUnit = 6 ) !DEBUG END IF ! !        ----------------------- !        Destruct the exceptions !        ----------------------- ! CALL release ( errorStack ) IF ( ASSOCIATED ( currentError_ ) ) THEN CALL release ( currentError_ ) END IF END SUBROUTINE destructFTExceptions ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE throw ( exceptionToThrow ) ! !>Throws the exception: exceptionToThrow ! IMPLICIT NONE CLASS ( FTException ), POINTER :: exceptionToThrow CLASS ( FTObject ) , POINTER :: ptr => NULL () IF ( . NOT . ASSOCIATED ( errorStack ) ) THEN CALL initializeFTExceptions END IF ptr => exceptionToThrow CALL errorStack % push ( ptr ) END SUBROUTINE throw ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION catchAll () ! ! ------------------------------------------- !>Returns .TRUE. if there are any exceptions. ! ------------------------------------------- ! IMPLICIT NONE IF ( . NOT . ASSOCIATED ( errorStack ) ) THEN catchAll = . FALSE . RETURN END IF catchAll = . false . IF ( errorStack % count () > 0 ) THEN catchAll = . true . END IF IF ( ASSOCIATED ( currentError_ ) ) THEN CALL release ( currentError_ ) END IF END FUNCTION catchAll ! !//////////////////////////////////////////////////////////////////////// ! INTEGER FUNCTION errorCount () ! ! ------------------------------------------ !>Returns the number of exceptions that have !>been thrown. ! ------------------------------------------ ! IMPLICIT NONE IF ( . NOT . ASSOCIATED ( errorStack ) ) THEN CALL initializeFTExceptions END IF errorCount = errorStack % count () END FUNCTION ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION catchErrorWithName ( exceptionName ) ! ! -------------------------------------------- !>Returns .TRUE. if there is an exception with !>the requested name. If so, it pops the !>exception and saves the pointer to it so that !>it can be accessed with the currentError() !>function. ! -------------------------------------------- ! IMPLICIT NONE CHARACTER ( LEN =* ) :: exceptionName TYPE ( FTLinkedListIterator ) :: iterator CLASS ( FTLinkedList ), POINTER :: ptr => NULL () CLASS ( FTObject ) , POINTER :: obj => NULL () CLASS ( FTException ) , POINTER :: e => NULL () catchErrorWithName = . false . IF ( . NOT . ASSOCIATED ( errorStack ) ) THEN CALL initializeFTExceptions RETURN END IF IF ( errorStack % COUNT () == 0 ) THEN RETURN END IF ptr => errorStack CALL iterator % initWithFTLinkedList ( ptr ) CALL iterator % setToStart () DO WHILE (. NOT . iterator % isAtEnd ()) obj => iterator % object () CALL cast ( obj , e ) IF ( e % exceptionName () == exceptionName ) THEN CALL setCurrentError ( e ) catchErrorWithName = . true . CALL errorStack % remove ( obj ) EXIT END IF CALL iterator % moveToNext () END DO CALL iterator % destruct () END FUNCTION catchErrorWithName ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION errorObject () ! ! ------------------------------------------- !>Returns a pointer to the current exception. ! ------------------------------------------- ! IMPLICIT NONE CLASS ( FTException ), POINTER :: errorObject IF ( . NOT . ASSOCIATED ( errorStack ) ) THEN CALL initializeFTExceptions END IF errorObject => currentError_ END FUNCTION errorObject ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE setCurrentError ( e ) IMPLICIT NONE CLASS ( FTException ) , POINTER :: e ! !        -------------------------------------------------------------- !        Check first to see if there is a current error. Since it !        is retained, the current one must be released before resetting !        the pointer. !        -------------------------------------------------------------- ! IF ( ASSOCIATED ( POINTER = currentError_ ) ) THEN CALL release ( currentError_ ) END IF ! !        ------------------------------------ !        Set the pointer and retain ownership !        ------------------------------------ ! currentError_ => e CALL currentError_ % retain () END SUBROUTINE setCurrentError ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION popLastException () ! ! ---------------------------------------------------------------- !>Get the last exception posted. This is popped from the stack. !>The caller is responsible for releasing the object after popping ! ---------------------------------------------------------------- ! IMPLICIT NONE CLASS ( FTException ), POINTER :: popLastException CLASS ( FTObject ) , POINTER :: obj => NULL () obj => NULL () popLastException => NULL () IF ( . NOT . ASSOCIATED ( errorStack ) ) THEN CALL initializeFTExceptions ELSE CALL errorStack % pop ( obj ) IF ( ASSOCIATED ( obj )) CALL cast ( obj , popLastException ) END IF END FUNCTION popLastException ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION peekLastException () ! ! ---------------------------------------------------------------- !>Get the last exception posted. This is NOT popped from the stack. !>The caller does not own the object. ! ---------------------------------------------------------------- ! IMPLICIT NONE CLASS ( FTException ), POINTER :: peekLastException CLASS ( FTObject ) , POINTER :: obj => NULL () IF ( . NOT . ASSOCIATED ( errorStack ) ) THEN CALL initializeFTExceptions END IF peekLastException => NULL () obj => errorStack % peek () CALL cast ( obj , peekLastException ) END FUNCTION peekLastException ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE printAllExceptions IMPLICIT NONE TYPE ( FTLinkedListIterator ) :: iterator CLASS ( FTLinkedList ), POINTER :: list => NULL () CLASS ( FTObject ) , POINTER :: objectPtr => NULL () CLASS ( FTException ) , POINTER :: e => NULL () list => errorStack CALL iterator % initWithFTLinkedList ( list ) ! !       ---------------------------------------------------- !       Write out the descriptions of each of the exceptions !       ---------------------------------------------------- ! CALL iterator % setToStart DO WHILE (. NOT . iterator % isAtEnd ()) objectPtr => iterator % object () CALL cast ( objectPtr , e ) CALL e % printDescription ( 6 ) CALL iterator % moveToNext () END DO CALL iterator % destruct () !iterator is not a pointer END SUBROUTINE printAllExceptions END MODULE SharedExceptionManagerModule","tags":"","loc":"sourcefile/ftexceptionclass.f90.html","title":"FTExceptionClass.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~ftlinkedlistclass.f90~~EfferentGraph sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~ftlinkedlistclass.f90~~AfferentGraph sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftdictionaryclass.f90 FTDictionaryClass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftsparsematrixclass.f90 FTSparseMatrixClass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftsparsematrixclass.f90 sourcefile~linkedlisttests.f90 LinkedListTests.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~linkedlisttests.f90 sourcefile~ftobjectlibrary.f90 FTObjectLibrary.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftexceptionclass.f90 FTExceptionClass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftmultiindextable.f90 FTMultiIndexTable.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftmultiindextable.f90 sourcefile~ftstackclass.f90 FTStackClass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftstackclass.f90 sourcefile~linkedlistexample.f90 LinkedListExample.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~linkedlistexample.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftvaluedictionaryclass.f90 FTValueDictionaryClass.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftvaluedictionaryclass.f90 sourcefile~dictionarytests.f90 DictionaryTests.f90 sourcefile~ftdictionaryclass.f90->sourcefile~dictionarytests.f90 sourcefile~ftsparsematrixclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~sparsematrixtests.f90 SparseMatrixTests.f90 sourcefile~ftsparsematrixclass.f90->sourcefile~sparsematrixtests.f90 sourcefile~ftexceptionclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~exceptiontests.f90 ExceptionTests.f90 sourcefile~ftexceptionclass.f90->sourcefile~exceptiontests.f90 sourcefile~multiindextabletests.f90 MultiIndexTableTests.f90 sourcefile~ftmultiindextable.f90->sourcefile~multiindextabletests.f90 sourcefile~ftstackclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftstackclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~stackstests.f90 StacksTests.f90 sourcefile~ftstackclass.f90->sourcefile~stackstests.f90 sourcefile~calculator.f90 Calculator.f90 sourcefile~ftstackclass.f90->sourcefile~calculator.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~valuedictionarytests.f90 ValueDictionaryTests.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~valuedictionarytests.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~exceptiontests.f90 var pansourcefileftlinkedlistclassf90AfferentGraph = svgPanZoom('#sourcefileftlinkedlistclassf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules FTLinkedListRecordClass FTLinkedListClass FTLinkedListIteratorClass Source Code FTLinkedListClass.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      FTLinkedListClass.f90 !      Created: January 7, 2013 2:56 PM !      By: David Kopriva ! ! ! !//////////////////////////////////////////////////////////////////////// ! !@mark - ! !>FTLinkedListRecord is the record type (object and next) for the !>LinkedList class. !> !>One will generally not instantiate a record oneself. They are !>created automatically when one adds an object to a linked list. !> Module FTLinkedListRecordClass USE FTObjectClass IMPLICIT NONE ! !     ----------------------------- !     Record class for linked lists !     ----------------------------- ! TYPE , EXTENDS ( FTObject ) :: FTLinkedListRecord CLASS ( FTObject ) , POINTER :: recordObject => NULL () CLASS ( FTLinkedListRecord ), POINTER :: next => NULL (), previous => NULL () ! !        ======== CONTAINS !        ======== ! PROCEDURE :: initWithObject PROCEDURE :: destruct => destructFTLinkedListRecord PROCEDURE :: printDescription => printFTLinkedRecordDescription PROCEDURE :: className => llRecordClassName END TYPE FTLinkedListRecord INTERFACE release MODULE PROCEDURE releaseFTLinkedListRecord END INTERFACE ! !     ---------- !     Procedures !     ---------- ! CONTAINS ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initWithObject ( self , obj ) IMPLICIT NONE CLASS ( FTLinkedListRecord ) :: self CLASS ( FTObject ), POINTER :: obj ! !        ------------------------------- !        Always call the superclass init !        ------------------------------- ! CALL self % FTObject % init () ! !        ------------------------ !        Subclass initializations !        ------------------------ ! CALL obj % retain () self % recordObject => obj self % next => NULL () self % previous => NULL () END SUBROUTINE initWithObject ! !//////////////////////////////////////////////////////////////////////// ! !< The destructor must only be called from within subclass destructors ! SUBROUTINE destructFTLinkedListRecord ( self ) IMPLICIT NONE CLASS ( FTLinkedListRecord ) :: self IF ( ASSOCIATED ( self % recordObject ) ) CALL releaseFTObject ( self % recordObject ) self % next => NULL () self % previous => NULL () ! !        ------------------------------------------ !        Always call the superclass destructor here !        at the end of the subclass destructor. !        ------------------------------------------ ! CALL self % FTObject % destruct () END SUBROUTINE destructFTLinkedListRecord ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE releaseFTLinkedListRecord ( self ) IMPLICIT NONE CLASS ( FTLinkedListRecord ) , POINTER :: self CLASS ( FTObject ) , POINTER :: obj IF (. NOT . ASSOCIATED ( self )) RETURN obj => self CALL releaseFTObject ( self = obj ) IF ( . NOT . ASSOCIATED ( obj ) ) THEN self => NULL () END IF END SUBROUTINE releaseFTLinkedListRecord ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE printFTLinkedRecordDescription ( self , iUnit ) IMPLICIT NONE CLASS ( FTLinkedListRecord ) :: self INTEGER :: iUnit IF ( ASSOCIATED ( self % recordObject ) ) THEN CALL self % recordObject % printDescription ( iUnit ) END IF END SUBROUTINE printFTLinkedRecordDescription ! !//////////////////////////////////////////////////////////////////////// ! !      ----------------------------------------------------------------- !> Class name returns a string with the name of the type of the object !> !>  ### Usage: !> !>        PRINT *,  obj % className() !>        if( obj % className = \"FTLinkedListRecord\") !> FUNCTION llRecordClassName ( self ) RESULT ( s ) IMPLICIT NONE CLASS ( FTLinkedListRecord ) :: self CHARACTER ( LEN = CLASS_NAME_CHARACTER_LENGTH ) :: s s = \"FTLinkedListRecord\" END FUNCTION llRecordClassName END MODULE FTLinkedListRecordClass !@mark - ! ! !     -------------------------------------------------- !     Implements the basics of a linked list of objects !     -------------------------------------------------- ! !> !>FTLinkedList is a container class that stores objects in a linked list. !> !>Inherits from FTObjectClass !> !>##Definition (Subclass of FTObject): !> !>         TYPE(FTLinkedList) :: list !> !>#Usage: !> !>##Initialization !> !>         CLASS(FTLinkedList), POINTER :: list !>         ALLOCATE(list) !>         CALL list % init !> !>##Adding objects !> !>         CLASS(FTLinkedList), POINTER :: list, listToAdd !>         CLASS(FTObject)    , POINTER :: objectPtr !> !>         objectPtr => r                ! r is subclass of FTObject !>         CALL list % Add(objectPtr)    ! Pointer is retained by list !>         CALL release(r)               ! If caller relinquishes ownership !> !>         CALL list % addObjectsFromList(listToAdd) !> !>##Inserting objects !> !>         CLASS(FTLinkedList)      , POINTER :: list !>         CLASS(FTObject)          , POINTER :: objectPtr, obj !>         CLASS(FTLinkedListRecord), POINTER :: record !> !>         objectPtr => r                                        ! r is subclass of FTObject !>         CALL list % insertObjectAfterRecord(objectPtr,record) ! Pointer is retained by list !>         CALL release(r)                                       ! If caller reliquishes ownership !> !>         objectPtr => r                                     ! r is subclass of FTObject !>         CALL list % insertObjectAfterObject(objectPtr,obj) ! Pointer is retained by list !>         CALL release(r)                                    ! If caller reliquishes ownership !> !>##Removing objects !> !>         CLASS(FTLinkedList), POINTER :: list !>         CLASS(FTObject)    , POINTER :: objectPtr !>         objectPtr => r                 ! r is subclass of FTObject !>         CALL list % remove(objectPtr) !> !>##Getting all objects as an object array !> !>         CLASS(FTLinkedList)        , POINTER :: list !>         CLASS(FTMutableObjectArray), POINTER :: array !>         array => list % allObjects() ! Array has refCount = 1 !> !>##Counting the number of objects in the list !> !>         n = list % count() !> !>##Destruction !> !>         CALL release(list) [Pointers] !>         CALL list % destruct() [Non Pointers] !>! Module FTLinkedListClass ! USE FTLinkedListRecordClass USE FTMutableObjectArrayClass IMPLICIT NONE ! !     ----------------- !     Class object type !     ----------------- ! TYPE , EXTENDS ( FTObject ) :: FTLinkedList CLASS ( FTLinkedListRecord ), POINTER :: head => NULL (), tail => NULL () INTEGER :: nRecords LOGICAL :: isCircular_ ! !        ======== CONTAINS !        ======== ! PROCEDURE :: init => initFTLinkedList PROCEDURE :: add PROCEDURE :: remove => removeObject PROCEDURE :: reverse => reverseLinkedList PROCEDURE :: removeRecord => removeLinkedListRecord PROCEDURE :: destruct => destructFTLinkedList PROCEDURE :: count => numberOfRecords PROCEDURE :: description => FTLinkedListDescription PROCEDURE :: printDescription => printFTLinkedListDescription PROCEDURE :: className => linkedListClassName PROCEDURE :: allObjects => allLinkedListObjects PROCEDURE :: removeAllObjects => removeAllLinkedListObjects PROCEDURE :: addObjectsFromList PROCEDURE :: makeCircular PROCEDURE :: isCircular PROCEDURE :: insertObjectAfterRecord PROCEDURE :: insertObjectAfterObject END TYPE FTLinkedList INTERFACE cast MODULE PROCEDURE castObjectToLinkedList END INTERFACE cast INTERFACE release MODULE PROCEDURE releaseFTLinkedList END INTERFACE ! !     ---------- !     Procedures !     ---------- ! CONTAINS ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initFTLinkedList ( self ) IMPLICIT NONE CLASS ( FTLinkedList ) :: self ! !        ------------------------------- !        Always call the superclass init !        ------------------------------- ! CALL self % FTObject % init () ! !        -------------------------------------- !        Then call the subclass initializations !        -------------------------------------- ! self % nRecords = 0 self % isCircular_ = . FALSE . self % head => NULL (); self % tail => NULL () END SUBROUTINE initFTLinkedList ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE add ( self , obj ) IMPLICIT NONE CLASS ( FTLinkedList ) :: self CLASS ( FTObject ) , POINTER :: obj CLASS ( FTLinkedListRecord ), POINTER :: newRecord => NULL () ALLOCATE ( newRecord ) CALL newRecord % initWithObject ( obj ) IF ( . NOT . ASSOCIATED ( self % head ) ) THEN self % head => newRecord ELSE self % tail % next => newRecord newRecord % previous => self % tail END IF self % tail => newRecord self % nRecords = self % nRecords + 1 END SUBROUTINE add ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE addObjectsFromList ( self , list ) IMPLICIT NONE CLASS ( FTLinkedList ) :: self CLASS ( FTLinkedList ) , POINTER :: list CLASS ( FTLinkedListRecord ), POINTER :: recordPtr => NULL () CLASS ( FtObject ) , POINTER :: obj => NULL () LOGICAL :: circular IF (. NOT . ASSOCIATED ( list % head )) RETURN circular = list % isCircular () CALL list % makeCircular (. FALSE .) recordPtr => list % head DO WHILE ( ASSOCIATED ( recordPtr )) obj => recordPtr % recordObject CALL self % add ( obj ) recordPtr => recordPtr % next END DO CALL list % makeCircular ( circular ) END SUBROUTINE addObjectsFromList ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE insertObjectAfterRecord ( self , obj , after ) IMPLICIT NONE CLASS ( FTLinkedList ) :: self CLASS ( FTObject ) , POINTER :: obj CLASS ( FTLinkedListRecord ), POINTER :: newRecord => NULL () CLASS ( FTLinkedListRecord ), POINTER :: after , next => NULL () ALLOCATE ( newRecord ) CALL newRecord % initWithObject ( obj ) next => after % next newRecord % next => next newRecord % previous => after after % next => newRecord next % previous => newRecord IF ( . NOT . ASSOCIATED ( newRecord % next ) ) THEN self % tail => newRecord END IF self % nRecords = self % nRecords + 1 END SUBROUTINE insertObjectAfterRecord ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE insertObjectAfterObject ( self , obj , after ) IMPLICIT NONE CLASS ( FTLinkedList ) :: self CLASS ( FTObject ) , POINTER :: obj , after CLASS ( FTLinkedListRecord ), POINTER :: current => NULL (), previous => NULL () IF ( . NOT . ASSOCIATED ( self % head ) ) THEN CALL self % add ( obj ) RETURN END IF current => self % head previous => NULL () ! !        ------------------------------------------------------------- !        Find the object in the list by a linear search and !        add the new object after it. !        It will be deallocated if necessary. !        ------------------------------------------------------------- ! DO WHILE ( ASSOCIATED ( current )) IF ( ASSOCIATED ( current % recordObject , after ) ) THEN CALL self % insertObjectAfterRecord ( obj = obj , after = current ) RETURN END IF previous => current current => current % next END DO END SUBROUTINE insertObjectAfterObject ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE makeCircular ( self , circular ) IMPLICIT NONE CLASS ( FTLinkedList ) :: self LOGICAL :: circular IF ( circular ) THEN self % head % previous => self % tail self % tail % next => self % head self % isCircular_ = . TRUE . ELSE self % head % previous => NULL () self % tail % next => NULL () self % isCircular_ = . FALSE . END IF END SUBROUTINE makeCircular ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION isCircular ( self ) IMPLICIT NONE CLASS ( FTLinkedList ) :: self isCircular = self % isCircular_ END FUNCTION isCircular ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE removeObject1 ( self , obj ) IMPLICIT NONE CLASS ( FTLinkedList ) :: self CLASS ( FTObject ) , POINTER :: obj CLASS ( FTLinkedListRecord ), POINTER :: current => NULL (), previous => NULL () IF ( . NOT . ASSOCIATED ( self % head ) ) RETURN current => self % head previous => NULL () ! !        ------------------------------------------------------------- !        Find the object in the list by a linear search and remove it. !        It will be deallocated if necessary. !        ------------------------------------------------------------- ! DO WHILE ( ASSOCIATED ( current )) IF ( ASSOCIATED ( current % recordObject , obj ) ) THEN IF ( ASSOCIATED ( previous ) ) THEN previous % next => current % next ELSE self % head => current % next END IF IF ( ASSOCIATED ( current , self % tail ) ) THEN self % tail => previous END IF CALL releaseFTLinkedListRecord ( current ) self % nRecords = self % nRecords - 1 EXIT END IF previous => current current => current % next END DO END SUBROUTINE removeObject1 ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE removeObject ( self , obj ) IMPLICIT NONE CLASS ( FTLinkedList ) :: self CLASS ( FTObject ) , POINTER :: obj CLASS ( FTLinkedListRecord ), POINTER :: current => NULL (), previous => NULL () IF ( . NOT . ASSOCIATED ( self % head ) ) RETURN current => self % head previous => NULL () ! !        ------------------------------------------------------------- !        Find the object in the list by a linear search and remove it. !        It will be deallocated if necessary. !        ------------------------------------------------------------- ! DO WHILE ( ASSOCIATED ( current )) IF ( ASSOCIATED ( current % recordObject , obj ) ) THEN CALL self % removeRecord ( current ) EXIT END IF previous => current current => current % next END DO END SUBROUTINE removeObject ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE removeLinkedListRecord ( self , listRecord ) IMPLICIT NONE ! !        --------- !        Arguments !        --------- ! CLASS ( FTLinkedList ) :: self CLASS ( FTLinkedListRecord ), POINTER :: listRecord ! !        --------------- !        Local variables !        --------------- ! CLASS ( FTLinkedListRecord ), POINTER :: previous => NULL (), next => NULL () ! !        --------------------------------------------------- !        Turn cirularity off and then back on !        to work around an what appears to be an !        ifort bug testing the association of two pointers. !        --------------------------------------------------- ! LOGICAL :: circ circ = self % isCircular () IF ( circ ) CALL self % makeCircular (. FALSE .) previous => listRecord % previous next => listRecord % next IF ( . NOT . ASSOCIATED ( listRecord % previous ) ) THEN self % head => next IF ( ASSOCIATED ( next ) ) THEN self % head % previous => NULL () END IF END IF IF ( . NOT . ASSOCIATED ( listRecord % next ) ) THEN self % tail => previous IF ( ASSOCIATED ( previous ) ) THEN self % tail % next => NULL () END IF END IF IF ( ASSOCIATED ( previous ) . AND . ASSOCIATED ( next ) ) THEN previous % next => next next % previous => previous END IF CALL releaseFTLinkedListRecord ( listRecord ) self % nRecords = self % nRecords - 1 IF ( circ ) CALL self % makeCircular (. TRUE .) END SUBROUTINE removeLinkedListRecord ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE removeAllLinkedListObjects ( self ) IMPLICIT NONE CLASS ( FTLinkedList ) :: self CLASS ( FTLinkedListRecord ), POINTER :: listRecord => NULL (), tmp => NULL () LOGICAL :: circular IF (. NOT . ASSOCIATED ( self % head )) RETURN circular = self % isCircular () CALL self % makeCircular (. FALSE .) listRecord => self % head DO WHILE ( ASSOCIATED ( listRecord )) tmp => listRecord % next CALL releaseFTLinkedListRecord ( listRecord ) IF (. NOT . ASSOCIATED ( listRecord )) THEN self % nRecords = self % nRecords - 1 END IF listRecord => tmp END DO self % head => NULL (); self % tail => NULL () END SUBROUTINE removeAllLinkedListObjects ! !//////////////////////////////////////////////////////////////////////// ! INTEGER FUNCTION numberOfRecords ( self ) IMPLICIT NONE CLASS ( FTLinkedList ) :: self numberOfRecords = self % nRecords END FUNCTION numberOfRecords ! !//////////////////////////////////////////////////////////////////////// ! !< The destructor must only be called from within the destructors of subclasses !> It is automatically called by release(). ! SUBROUTINE destructFTLinkedList ( self ) IMPLICIT NONE CLASS ( FTLinkedList ) :: self CALL self % removeAllObjects () ! !        ------------------------------------------ !        Always call the superclass destructor here !        at the end of the subclass destructor. !        ------------------------------------------ ! CALL self % FTObject % destruct () END SUBROUTINE destructFTLinkedList ! !------------------------------------------------ !> Public, generic name: release(self) !> !> Call release(self) on an object to release control !> of an object. If its reference count is zero, then !> it is deallocated. !------------------------------------------------ ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE releaseFTLinkedList ( self ) IMPLICIT NONE TYPE ( FTLinkedList ), POINTER :: self CLASS ( FTObject ) , POINTER :: obj IF (. NOT . ASSOCIATED ( self )) RETURN obj => self CALL releaseFTObject ( self = obj ) IF ( . NOT . ASSOCIATED ( obj ) ) THEN self => NULL () END IF END SUBROUTINE releaseFTLinkedList ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION FTLinkedListDescription ( self ) IMPLICIT NONE CLASS ( FTLinkedList ) :: self CLASS ( FTLinkedListRecord ), POINTER :: listRecord => NULL () CHARACTER ( LEN = DESCRIPTION_CHARACTER_LENGTH ) :: FTLinkedListDescription FTLinkedListDescription = \"\" IF (. NOT . ASSOCIATED ( self % head )) RETURN listRecord => self % head FTLinkedListDescription = TRIM ( listRecord % recordObject % description ()) listRecord => listRecord % next DO WHILE ( ASSOCIATED ( listRecord )) FTLinkedListDescription = TRIM ( FTLinkedListDescription ) // & CHAR ( 13 ) // & TRIM ( listRecord % recordObject % description ()) listRecord => listRecord % next END DO END FUNCTION FTLinkedListDescription ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE printFTLinkedListDescription ( self , iUnit ) IMPLICIT NONE CLASS ( FTLinkedList ) :: self INTEGER :: iUnit CLASS ( FTLinkedListRecord ), POINTER :: listRecord => NULL () LOGICAL :: circular IF (. NOT . ASSOCIATED ( self % head )) RETURN IF ( self % isCircular_ ) circular = . TRUE . CALL self % makeCircular (. FALSE .) listRecord => self % head DO WHILE ( ASSOCIATED ( listRecord )) CALL listRecord % printDescription ( iUnit ) listRecord => listRecord % next END DO IF ( circular ) CALL self % makeCircular (. TRUE .) END SUBROUTINE printFTLinkedListDescription ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE reverseLinkedList ( self ) ! !     ------------------------ !     Reverses the linked list !     ------------------------ ! IMPLICIT NONE ! !        --------- !        Arguments !        --------- ! CLASS ( FTLinkedList ) :: self ! !        --------------- !        Local variables !        --------------- ! CLASS ( FTLinkedListRecord ), POINTER :: current => NULL (), tmp => NULL () IF (. NOT . ASSOCIATED ( self % head )) RETURN IF ( self % isCircular_ ) THEN self % head % previous => NULL () self % tail % next => NULL () END IF current => self % head DO WHILE ( ASSOCIATED ( current )) tmp => current % next current % next => current % previous current % previous => tmp current => tmp END DO tmp => self % head self % head => self % tail self % tail => tmp IF ( self % isCircular_ ) THEN CALL self % makeCircular (. TRUE .) END IF END SUBROUTINE reverseLinkedList ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION allLinkedListObjects ( self ) RESULT ( array ) IMPLICIT NONE ! !        --------- !        Arguments !        --------- ! CLASS ( FTLinkedList ) :: self CLASS ( FTMutableObjectArray ), POINTER :: array ! !        --------------- !        Local variables !        --------------- ! INTEGER :: N CLASS ( FTLinkedListRecord ), POINTER :: listRecord => NULL () CLASS ( FTObject ) , POINTER :: obj => NULL () array => NULL () N = self % count () IF ( N == 0 ) RETURN ALLOCATE ( array ) CALL array % initWithSize ( arraySize = N ) listRecord => self % head DO WHILE ( ASSOCIATED ( listRecord )) obj => listRecord % recordObject CALL array % addObject ( obj ) listRecord => listRecord % next END DO END FUNCTION allLinkedListObjects ! !//////////////////////////////////////////////////////////////////////// ! !      ----------------------------------------------------------------- !> Class name returns a string with the name of the type of the object !> !>  ### Usage: !> !>        PRINT *,  obj % className() !>        if( obj % className = \"FTLinkedList\") !> FUNCTION linkedListClassName ( self ) RESULT ( s ) IMPLICIT NONE CLASS ( FTLinkedList ) :: self CHARACTER ( LEN = CLASS_NAME_CHARACTER_LENGTH ) :: s s = \"FTLinkedList\" END FUNCTION linkedListClassName !@mark - ! type conversions ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE castObjectToLinkedList ( obj , cast ) ! !     ----------------------------------------------------- !     Cast the base class FTObject to the LinkedList class !     ----------------------------------------------------- ! IMPLICIT NONE CLASS ( FTObject ) , POINTER :: obj CLASS ( FTLinkedList ), POINTER :: cast cast => NULL () SELECT TYPE ( e => obj ) TYPE is ( FTLinkedList ) cast => e CLASS DEFAULT END SELECT END SUBROUTINE castObjectToLinkedList ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION linkedListFromObject ( obj ) RESULT ( cast ) ! !     ----------------------------------------------------- !     Cast the base class FTObject to the LinkedList class !     ----------------------------------------------------- ! IMPLICIT NONE CLASS ( FTObject ) , POINTER :: obj CLASS ( FTLinkedList ), POINTER :: cast cast => NULL () SELECT TYPE ( e => obj ) TYPE is ( FTLinkedList ) cast => e CLASS DEFAULT END SELECT END FUNCTION linkedListFromObject ! END MODULE FTLinkedListClass ! !@mark - ! !//////////////////////////////////////////////////////////////////////// ! !>An object for stepping through a linked list. !> !>###Definition (Subclass of FTObject): !>   TYPE(FTLinkedListIterator) :: list !> !> !>###Initialization !> !>         CLASS(FTLinkedList)        , POINTER :: list !>         CLASS(FTLinkedListIterator), POINTER :: iterator !>         ALLOCATE(iterator) !>         CALL iterator % initWithFTLinkedList(list) !> !>###Accessors !> !>         ptr => iterator % list() !>         ptr => iterator % object() !>         ptr => iterator % currentRecord() !> !>###Iterating !> !>         CLASS(FTObject), POINTER :: objectPtr !>         CALL iterator % setToStart !>         DO WHILE (.NOT.iterator % isAtEnd()) !>            objectPtr => iterator % object()        ! if the object is wanted !>            recordPtr => iterator % currentRecord() ! if the record is wanted !> !>             Do something with object or record !> !>            CALL iterator % moveToNext() ! DON'T FORGET THIS!! !>         END DO !> !>###Destruction !> !>         CALL iterator % destruct() [Non Pointers] !>         CALL release(iterator) [Pointers] ! !//////////////////////////////////////////////////////////////////////// ! Module FTLinkedListIteratorClass USE FTLinkedListClass IMPLICIT NONE ! !     ----------------- !     Class object type !     ----------------- ! TYPE , EXTENDS ( FTObject ) :: FTLinkedListIterator CLASS ( FTLinkedList ) , POINTER :: list => NULL () CLASS ( FTLinkedListRecord ), POINTER :: current => NULL () ! !        ======== CONTAINS !        ======== ! PROCEDURE :: init => initEmpty PROCEDURE :: initWithFTLinkedList PROCEDURE :: destruct => destructIterator PROCEDURE :: isAtEnd => FTLinkedListIsAtEnd PROCEDURE :: object => FTLinkedListObject PROCEDURE :: currentRecord => FTLinkedListCurrentRecord PROCEDURE :: linkedList => returnLinkedList PROCEDURE :: className => linkedListIteratorClassName PROCEDURE :: setLinkedList PROCEDURE :: setToStart PROCEDURE :: moveToNext PROCEDURE :: removeCurrentRecord END TYPE FTLinkedListIterator INTERFACE release MODULE PROCEDURE releaseFTLinkedListIterator END INTERFACE ! !     ---------- !     Procedures !     ---------- ! CONTAINS ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initEmpty ( self ) IMPLICIT NONE CLASS ( FTLinkedListIterator ) :: self ! !        -------------------------------------------- !        Always call the superclass initializer first !        -------------------------------------------- ! CALL self % FTObject % init () ! !        ---------------------------------------------- !        Then call the initializations for the subclass !        ---------------------------------------------- ! self % list => NULL () self % current => NULL () END SUBROUTINE initEmpty ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initWithFTLinkedList ( self , list ) IMPLICIT NONE CLASS ( FTLinkedListIterator ) :: self CLASS ( FTLinkedList ), POINTER :: list ! !        -------------------------------------------- !        Always call the superclass initializer first !        -------------------------------------------- ! CALL self % FTObject % init () ! !        ---------------------------------------------- !        Then call the initializations for the subclass !        ---------------------------------------------- ! self % list => NULL () self % current => NULL () CALL self % setLinkedList ( list ) CALL self % setToStart () END SUBROUTINE initWithFTLinkedList ! !//////////////////////////////////////////////////////////////////////// ! !< The destuctor must not be called except at the end of destructors of ! subclasses. ! SUBROUTINE destructIterator ( self ) IMPLICIT NONE CLASS ( FTLinkedListIterator ) :: self CLASS ( FTObject ), POINTER :: obj CALL releaseMemberList ( self ) self % current => NULL () ! !        ------------------------------------------ !        Always call the superclass destructor here !        at the end of the subclass destructor. !        ------------------------------------------ ! CALL self % FTObject % destruct () END SUBROUTINE destructIterator ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE releaseMemberList ( self ) IMPLICIT NONE CLASS ( FTLinkedListIterator ) :: self CLASS ( FTObject ), POINTER :: obj IF ( ASSOCIATED ( self % list ) ) THEN obj => self % list CALL releaseFTObject ( self = obj ) IF (. NOT . ASSOCIATED ( obj )) self % list => NULL () END IF END SUBROUTINE releaseMemberList ! !------------------------------------------------ !> Public, generic name: release(self) !> !> Call release(self) on an object to release control !> of an object. If its reference count is zero, then !> it is deallocated. !------------------------------------------------ ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE releaseFTLinkedListIterator ( self ) IMPLICIT NONE CLASS ( FTLinkedListIterator ) , POINTER :: self CLASS ( FTObject ) , POINTER :: obj IF (. NOT . ASSOCIATED ( self )) RETURN obj => self CALL releaseFTObject ( self = obj ) IF ( . NOT . ASSOCIATED ( obj ) ) THEN self => NULL () END IF END SUBROUTINE releaseFTLinkedListIterator ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE setToStart ( self ) IMPLICIT NONE CLASS ( FTLinkedListIterator ) :: self self % current => self % list % head END SUBROUTINE setToStart ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE moveToNext ( self ) IMPLICIT NONE CLASS ( FTLinkedListIterator ) :: self IF ( ASSOCIATED ( self % current ) ) THEN self % current => self % current % next ELSE self % current => NULL () END IF IF ( ASSOCIATED ( self % current , self % list % head ) ) THEN self % current => NULL () END IF END SUBROUTINE moveToNext ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION FTLinkedListIsAtEnd ( self ) IMPLICIT NONE CLASS ( FTLinkedListIterator ) :: self IF ( ASSOCIATED ( self % current ) ) THEN FTLinkedListIsAtEnd = . false . ELSE FTLinkedListIsAtEnd = . true . END IF END FUNCTION FTLinkedListIsAtEnd ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE setLinkedList ( self , list ) IMPLICIT NONE CLASS ( FTLinkedListIterator ) :: self CLASS ( FTLinkedList ), POINTER :: list ! !        ----------------------------------- !        Remove current list if there is one !        ----------------------------------- ! IF ( ASSOCIATED ( list ) ) THEN IF ( ASSOCIATED ( self % list , list ) ) THEN CALL self % setToStart () ELSE IF ( ASSOCIATED ( self % list ) ) THEN CALL releaseMemberList ( self ) self % list => list CALL self % list % retain () CALL self % setToStart ELSE self % list => list CALL self % list % retain () CALL self % setToStart () END IF ELSE IF ( ASSOCIATED ( self % list ) ) THEN CALL releaseMemberList ( self ) END IF self % list => NULL () END IF END SUBROUTINE setLinkedList ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION returnLinkedList ( self ) RESULT ( o ) IMPLICIT NONE CLASS ( FTLinkedListIterator ) :: self CLASS ( FTLinkedList ), POINTER :: o o => self % list END FUNCTION returnLinkedList ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION FTLinkedListObject ( self ) RESULT ( o ) IMPLICIT NONE CLASS ( FTLinkedListIterator ) :: self CLASS ( FTObject ), POINTER :: o o => self % current % recordObject END FUNCTION FTLinkedListObject ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION FTLinkedListCurrentRecord ( self ) RESULT ( o ) IMPLICIT NONE CLASS ( FTLinkedListIterator ) :: self CLASS ( FTLinkedListRecord ), POINTER :: o o => self % current END FUNCTION FTLinkedListCurrentRecord ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE removeCurrentRecord ( self ) IMPLICIT NONE CLASS ( FTLinkedListIterator ) :: self CLASS ( FTLinkedListRecord ), POINTER :: r , n r => self % current n => self % current % next CALL self % list % removeRecord ( r ) self % current => n END SUBROUTINE removeCurrentRecord ! !//////////////////////////////////////////////////////////////////////// ! !      ----------------------------------------------------------------- !> Class name returns a string with the name of the type of the object !> !>  ### Usage: !> !>        PRINT *,  obj % className() !>        if( obj % className = \"FTLinkedListIterator\") !> FUNCTION linkedListIteratorClassName ( self ) RESULT ( s ) IMPLICIT NONE CLASS ( FTLinkedListIterator ) :: self CHARACTER ( LEN = CLASS_NAME_CHARACTER_LENGTH ) :: s s = \"FTLinkedListIterator\" END FUNCTION linkedListIteratorClassName END MODULE FTLinkedListIteratorClass","tags":"","loc":"sourcefile/ftlinkedlistclass.f90.html","title":"FTLinkedListClass.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~ftmultiindextable.f90~~EfferentGraph sourcefile~ftmultiindextable.f90 FTMultiIndexTable.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftmultiindextable.f90 sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftmultiindextable.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~ftmultiindextable.f90~~AfferentGraph sourcefile~ftmultiindextable.f90 FTMultiIndexTable.f90 sourcefile~multiindextabletests.f90 MultiIndexTableTests.f90 sourcefile~ftmultiindextable.f90->sourcefile~multiindextabletests.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules FTMultiIndexTableData FTMultiIndexTableClass Source Code FTMultiIndexTable.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      MultiIndexTableClass.f90 !      Created: July 29, 2013 10:59 AM !      By: David Kopriva ! ! !//////////////////////////////////////////////////////////////////////// ! Module FTMultiIndexTableData USE FTObjectClass IMPLICIT NONE ! !     --------------- !     Type definition !     --------------- ! TYPE , EXTENDS ( FTObject ) :: MultiIndexMatrixData INTEGER , ALLOCATABLE :: key (:) CLASS ( FTObject ), POINTER :: object ! !        ======== CONTAINS !        ======== ! PROCEDURE :: initWithObjectAndKeys PROCEDURE :: destruct => destructMultiIndexMatrixData END TYPE MultiIndexMatrixData INTERFACE cast MODULE PROCEDURE castObjectToMultiIndexMatrixData END INTERFACE cast ! !     ======== CONTAINS !     ======== ! ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initWithObjectAndKeys ( self , object , key ) ! !        ---------------------- !        Designated initializer !        ---------------------- ! IMPLICIT NONE CLASS ( MultiIndexMatrixData ) :: self CLASS ( FTObject ), POINTER :: object INTEGER :: key (:) CALL self % FTObject % init () ALLOCATE ( self % key ( SIZE ( key ))) self % key = key self % object => object CALL self % object % retain () END SUBROUTINE initWithObjectAndKeys ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE destructMultiIndexMatrixData ( self ) IMPLICIT NONE CLASS ( MultiIndexMatrixData ) :: self IF ( ASSOCIATED ( self % object ) ) CALL releaseFTObject ( self % object ) IF ( ALLOCATED ( self % key ) ) DEALLOCATE ( self % key ) CALL self % FTObject % destruct () END SUBROUTINE destructMultiIndexMatrixData ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE castObjectToMultiIndexMatrixData ( obj , cast ) IMPLICIT NONE ! !        ----------------------------------------------------- !        Cast the base class FTObject to the FTException class !        ----------------------------------------------------- ! CLASS ( FTObject ) , POINTER :: obj CLASS ( MultiIndexMatrixData ), POINTER :: cast cast => NULL () SELECT TYPE ( e => obj ) TYPE is ( MultiIndexMatrixData ) cast => e CLASS DEFAULT END SELECT END SUBROUTINE castObjectToMultiIndexMatrixData ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION MultiIndexMatrixDataCast ( obj ) RESULT ( cast ) IMPLICIT NONE ! !        ----------------------------------------------------- !        Cast the base class FTObject to the FTException class !        ----------------------------------------------------- ! CLASS ( FTObject ) , POINTER :: obj CLASS ( MultiIndexMatrixData ), POINTER :: cast cast => NULL () SELECT TYPE ( e => obj ) TYPE is ( MultiIndexMatrixData ) cast => e CLASS DEFAULT END SELECT END FUNCTION MultiIndexMatrixDataCast END Module FTMultiIndexTableData !@mark - !>The MultiIndexTable stores an FTObject pointer associated !>with any number of integer keys(:) as a hash table. !> !>#Usage !>## Definition (Subclass of FTObject) !> !>         TYPE(FTMultiIndexTable) :: multiIndexTable !> !>##Initialization !> !>         CALL MultiIndexTable % initWithSize(N) !> !>The size, N = the maximum value of all of the keys. !> !>## Destruction !> !>         CALL release(MultiIndexTable)     ... Pointers !>         call MultiIndexTable % destruct() ... non Pointers !> !>##Adding an object !> !>         CLASS(FTObject), POINTER :: obj !>         INTEGER, DIMENSION(dim)  :: keys !>         CALL MultiIndexTable % addObjectForKeys(obj,keys) !> !>##Retrieving an object !> !>         CLASS(FTObject), POINTER :: obj !>         INTEGER, DIMENSION(dim)  :: keys !>         obj => MultiIndexTable % objectForKeys(keys) !> !>Be sure to retain the object if you want it to live !>      beyond the life of the table. !> !>##Testing the presence of keys !> !>         LOGICAL :: exists !>         exists = MultiIndexTable % containsKeys(keys) ! !//////////////////////////////////////////////////////////////////////// ! Module FTMultiIndexTableClass USE FTObjectClass USE FTLinkedListClass USE FTMultiIndexTableData IMPLICIT NONE ! !     --------------------- !     Class type definition !     --------------------- ! TYPE , EXTENDS ( FTObject ) :: FTMultiIndexTable CLASS ( FTLinkedList ), DIMENSION (:), ALLOCATABLE :: table ! !        ======== CONTAINS !        ======== ! PROCEDURE :: initWithSize => initMultiIndexTableWithSize PROCEDURE :: destruct => destructMultiIndexTable PROCEDURE :: containsKeys => MultiIndexTableContainsKeys PROCEDURE :: addObjectForKeys => addObjectToMultiIndexTableForKeys PROCEDURE :: objectForKeys => objectInMultiIndexTableForKeys PROCEDURE :: printDescription => printMultiIndexTableDescription PROCEDURE :: MultiIndexTableSize END TYPE FTMultiIndexTable INTERFACE release MODULE PROCEDURE releaseFTMultiIndexTable END INTERFACE ! !     ======== CONTAINS !     ======== ! ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initMultiIndexTableWithSize ( self , N ) IMPLICIT NONE ! !        --------- !        Arguments !        --------- ! CLASS ( FTMultiIndexTable ) :: self INTEGER :: N ! !        --------------- !        Local variables !        --------------- ! INTEGER :: j CALL self % FTObject % init () ALLOCATE ( self % table ( N )) DO j = 1 , N CALL self % table ( j ) % init () END DO END SUBROUTINE initMultiIndexTableWithSize ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE destructMultiIndexTable ( self ) IMPLICIT NONE ! !        --------- !        Arguments !        --------- ! CLASS ( FTMultiIndexTable ) :: self ! !        --------------- !        Local variables !        --------------- ! INTEGER :: j IF ( ALLOCATED ( self % table )) THEN DO j = 1 , SIZE ( self % table ) CALL self % table ( j ) % destruct () END DO DEALLOCATE ( self % table ) END IF CALL self % FTObject % destruct () END SUBROUTINE destructMultiIndexTable ! !------------------------------------------------ !> Public, generic name: release(self) !> !> Call release(self) on an object to release control !> of an object. If its reference count is zero, then !> it is deallocated. !------------------------------------------------ ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE releaseFTMultiIndexTable ( self ) IMPLICIT NONE CLASS ( FTMultiIndexTable ) , POINTER :: self CLASS ( FTObject ) , POINTER :: obj IF (. NOT . ASSOCIATED ( self )) RETURN obj => self CALL releaseFTObject ( self = obj ) IF ( . NOT . ASSOCIATED ( obj ) ) THEN self => NULL () END IF END SUBROUTINE releaseFTMultiIndexTable ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE addObjectToMultiIndexTableForKeys ( self , obj , keys ) IMPLICIT NONE ! !        --------- !        Arguments !        --------- ! CLASS ( FTMultiIndexTable ) :: self CLASS ( FTObject ), POINTER :: obj INTEGER :: keys (:) ! !        --------------- !        Local variables !        --------------- ! CLASS ( MultiIndexMatrixData ), POINTER :: mData CLASS ( FTObject ) , POINTER :: ptr INTEGER :: i INTEGER :: orderedKeys ( SIZE ( keys )) orderedKeys = keys CALL sortKeysAscending ( orderedKeys ) i = orderedKeys ( 1 ) IF ( . NOT . self % containsKeys ( orderedKeys ) ) THEN ALLOCATE ( mData ) CALL mData % initWithObjectAndKeys ( obj , orderedKeys ) ptr => mData CALL self % table ( i ) % add ( ptr ) CALL releaseFTObject ( ptr ) END IF END SUBROUTINE addObjectToMultiIndexTableForKeys ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION objectInMultiIndexTableForKeys ( self , keys ) RESULT ( r ) ! !     --------------------------------------------------------------- !     Returns the stored FTObject for the keys (i,j). Returns NULL() !     if the object isn't in the table. Retain the object if it needs !     a strong reference by the caller. !     --------------------------------------------------------------- ! IMPLICIT NONE ! !        --------- !        Arguments !        --------- ! CLASS ( FTMultiIndexTable ) :: self INTEGER :: keys (:) CLASS ( FTObject ), POINTER :: r ! !        --------------- !        Local variables !        --------------- ! CLASS ( MultiIndexMatrixData ) , POINTER :: mData CLASS ( FTObject ) , POINTER :: obj CLASS ( FTLinkedListRecord ) , POINTER :: currentRecord INTEGER :: i INTEGER :: orderedKeys ( SIZE ( keys )) orderedKeys = keys CALL sortKeysAscending ( orderedKeys ) r => NULL () i = orderedKeys ( 1 ) IF (. NOT . ALLOCATED ( self % table )) RETURN IF ( self % table ( i ) % COUNT () == 0 ) RETURN ! !        ---------------------------- !        Step through the linked list !        ---------------------------- ! r => NULL () currentRecord => self % table ( i ) % head DO WHILE ( ASSOCIATED ( currentRecord )) obj => currentRecord % recordObject CALL cast ( obj , mData ) IF ( keysMatch ( key1 = mData % key , key2 = orderedKeys ) ) THEN r => mData % object EXIT END IF currentRecord => currentRecord % next END DO END FUNCTION objectInMultiIndexTableForKeys ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION MultiIndexTableContainsKeys ( self , keys ) RESULT ( r ) IMPLICIT NONE ! !        --------- !        Arguments !        --------- ! CLASS ( FTMultiIndexTable ) :: self INTEGER :: keys (:) LOGICAL :: r ! !        --------------- !        Local variables !        --------------- ! CLASS ( FTObject ) , POINTER :: obj CLASS ( MultiIndexMatrixData ) , POINTER :: mData CLASS ( FTLinkedListRecord ) , POINTER :: currentRecord INTEGER :: i INTEGER :: orderedKeys ( SIZE ( keys )) orderedKeys = keys CALL sortKeysAscending ( orderedKeys ) r = . FALSE . i = orderedKeys ( 1 ) IF (. NOT . ALLOCATED ( self % table )) RETURN IF ( self % table ( i ) % COUNT () == 0 ) RETURN ! !        ---------------------------- !        Step through the linked list !        ---------------------------- ! currentRecord => self % table ( i ) % head DO WHILE ( ASSOCIATED ( currentRecord )) obj => currentRecord % recordObject CALL cast ( obj , mData ) IF ( keysMatch ( key1 = mData % key , key2 = orderedKeys )) THEN r = . TRUE . EXIT END IF currentRecord => currentRecord % next END DO END FUNCTION MultiIndexTableContainsKeys ! !//////////////////////////////////////////////////////////////////////// ! INTEGER FUNCTION MultiIndexTableSize ( self ) IMPLICIT NONE CLASS ( FTMultiIndexTable ) :: self IF ( ALLOCATED ( self % table ) ) THEN MultiIndexTableSize = SIZE ( self % table ) ELSE MultiIndexTableSize = 0 END IF END FUNCTION MultiIndexTableSize ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION MultiIndexTableFromObject ( obj ) RESULT ( cast ) ! !     ----------------------------------------------------- !     Cast the base class FTObject to the FTException class !     ----------------------------------------------------- ! IMPLICIT NONE CLASS ( FTObject ) , POINTER :: obj CLASS ( FTMultiIndexTable ), POINTER :: cast cast => NULL () SELECT TYPE ( e => obj ) TYPE is ( FTMultiIndexTable ) cast => e CLASS DEFAULT END SELECT END FUNCTION MultiIndexTableFromObject ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION keysMatch ( key1 , key2 ) IMPLICIT NONE INTEGER , DIMENSION (:) :: key1 , key2 INTEGER :: match keysMatch = . FALSE . match = MAXVAL ( ABS ( key1 - key2 )) IF ( match == 0 ) keysMatch = . TRUE . END FUNCTION keysMatch ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE sortKeysAscending ( keys ) ! !     ---------------------------------------------------- !     Use an insertion sort for the keys, since the number !     of them should be small !     ---------------------------------------------------- ! IMPLICIT NONE INTEGER , DIMENSION (:) :: keys INTEGER :: i , j , N , t N = SIZE ( keys ) SELECT CASE ( N ) CASE ( 1 ) return CASE ( 2 ) IF ( keys ( 1 ) > keys ( 2 ) ) THEN t = keys ( 1 ) keys ( 1 ) = keys ( 2 ) keys ( 2 ) = t END IF CASE DEFAULT DO i = 2 , N t = keys ( i ) j = i DO WHILE ( j > 1 . AND . keys ( j - 1 ) > t ) keys ( j ) = keys ( j - 1 ) j = j - 1 IF ( j == 1 ) EXIT END DO keys ( j ) = t END DO END SELECT END SUBROUTINE sortKeysAscending ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE printMultiIndexTableDescription ( self , iUnit ) IMPLICIT NONE CLASS ( FTMultiIndexTable ) :: self INTEGER :: iUnit INTEGER :: i DO i = 1 , SIZE ( self % table ) CALL self % table ( i ) % printDescription ( iUnit ) END DO END SUBROUTINE printMultiIndexTableDescription END Module FTMultiIndexTableClass","tags":"","loc":"sourcefile/ftmultiindextable.f90.html","title":"FTMultiIndexTable.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~ftobjectarrayclass.f90~~EfferentGraph sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~ftobjectarrayclass.f90~~AfferentGraph sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftdictionaryclass.f90 FTDictionaryClass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~mutablearraytests.f90 MutableArrayTests.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~mutablearraytests.f90 sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectlibrary.f90 FTObjectLibrary.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftvaluedictionaryclass.f90 FTValueDictionaryClass.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftvaluedictionaryclass.f90 sourcefile~dictionarytests.f90 DictionaryTests.f90 sourcefile~ftdictionaryclass.f90->sourcefile~dictionarytests.f90 sourcefile~ftexceptionclass.f90 FTExceptionClass.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftsparsematrixclass.f90 FTSparseMatrixClass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftsparsematrixclass.f90 sourcefile~linkedlisttests.f90 LinkedListTests.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~linkedlisttests.f90 sourcefile~ftmultiindextable.f90 FTMultiIndexTable.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftmultiindextable.f90 sourcefile~ftstackclass.f90 FTStackClass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftstackclass.f90 sourcefile~linkedlistexample.f90 LinkedListExample.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~linkedlistexample.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~valuedictionarytests.f90 ValueDictionaryTests.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~valuedictionarytests.f90 sourcefile~exceptiontests.f90 ExceptionTests.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~exceptiontests.f90 sourcefile~ftexceptionclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftexceptionclass.f90->sourcefile~exceptiontests.f90 sourcefile~ftsparsematrixclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~sparsematrixtests.f90 SparseMatrixTests.f90 sourcefile~ftsparsematrixclass.f90->sourcefile~sparsematrixtests.f90 sourcefile~multiindextabletests.f90 MultiIndexTableTests.f90 sourcefile~ftmultiindextable.f90->sourcefile~multiindextabletests.f90 sourcefile~ftstackclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftstackclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~stackstests.f90 StacksTests.f90 sourcefile~ftstackclass.f90->sourcefile~stackstests.f90 sourcefile~calculator.f90 Calculator.f90 sourcefile~ftstackclass.f90->sourcefile~calculator.f90 var pansourcefileftobjectarrayclassf90AfferentGraph = svgPanZoom('#sourcefileftobjectarrayclassf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules FTMutableObjectArrayClass Source Code FTObjectArrayClass.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      FTMutableObjectArray.f90 !      Created: February 7, 2013 3:24 PM !      By: David Kopriva ! !>FTMutableObjectArray is a mutable array class to which objects !>can be added, removed, replaced and accessed according to their !>index in the array. !> !>Fortran has pointers to arrays, but not arrays of pointers. To do the latter, one creates !>a wrapper derived type and creates an array of that wrapper type. Fortran arrays are great, but !>they are of fixed length, and they don't easily implement reference counting to keep track of !>memory. For that, we have the FTMutableObjectArray. Performance reasons dictate that you !>will use regular arrays for numeric types and the like, but for generic objects we would use !>an Object Array. !> !>You initialize a FTMutableObjectArray with the number of objects that you expect it to hold. !>However, it can re-size itself if necessary. To be efficient, it adds more than one entry at a time !>given by the ``chunkSize'', which you can choose for yourself. (The default is 10.) !>##Definition !>           TYPE(FTMutableObjectArray) :: array !>#Usage !>##Initialization !>      CLASS(FTMutableObjectArray)  :: array !>      INTEGER                      :: N = 11 !>      CALL array % initWithSize(N) !>#Destruction !>           CALL array  %  destuct() [Non Pointers] !>           call release(array) [Pointers] !>#Adding an Object !>           TYPE(FTObject) :: obj !>           obj => r1 !>           CALL array % addObject(obj) !>#Removing an Object !>           TYPE(FTObject) :: obj !>           CALL array % removeObjectAtIndex(i) !>#Accessing an Object !>           TYPE(FTObject) :: obj !>           obj => array % objectAtIndex(i) !>#Replacing an Object !>           TYPE(FTObject) :: obj !>           obj => r1 !>           CALL array % replaceObjectAtIndexWithObject(i,obj) !>#Setting the Chunk Size !>           CALL array % setChunkSize(size) !>#Finding The Number Of Items In The Array !>           n =  array % count() !>#Finding The Actual Allocated Size Of The Array !>           n =  array % allocatedSize() ! !//////////////////////////////////////////////////////////////////////// ! MODULE FTMutableObjectArrayClass USE FTObjectClass IMPLICIT NONE TYPE FTObjectPointerWrapper CLASS ( FTObject ), POINTER :: object => NULL () END TYPE FTObjectPointerWrapper PRIVATE :: FTObjectPointerWrapper PRIVATE :: increaseArraysize TYPE , EXTENDS ( FTObject ) :: FTMutableObjectArray INTEGER , PRIVATE :: count_ TYPE ( FTObjectPointerWrapper ), DIMENSION (:), POINTER , PRIVATE :: array => NULL () INTEGER , PRIVATE :: chunkSize_ = 10 ! !        -------- CONTAINS !        -------- ! PROCEDURE , PUBLIC :: initWithSize => initObjectArrayWithSize PROCEDURE , PUBLIC :: destruct => destructObjectArray PROCEDURE , PUBLIC :: addObject => addObjectToArray PROCEDURE , PUBLIC :: replaceObjectAtIndexWithObject PROCEDURE , PUBLIC :: removeObjectAtIndex PROCEDURE , PUBLIC :: objectAtIndex PROCEDURE , PUBLIC :: printDescription => printArray PROCEDURE , PUBLIC :: className => arrayClassName ! PROCEDURE , PUBLIC :: setChunkSize PROCEDURE , PUBLIC :: chunkSize PROCEDURE , PUBLIC :: COUNT => numberOfItems PROCEDURE , PUBLIC :: allocatedSize END TYPE INTERFACE cast MODULE PROCEDURE castToMutableObjectArray END INTERFACE cast INTERFACE release MODULE PROCEDURE releaseFTMutableObjectArray END INTERFACE ! !     ======== CONTAINS !     ======== ! ! !//////////////////////////////////////////////////////////////////////// ! !> !> Designated initializer. Initializes the amount of storage, but !> the array remains empty. !> !> *Usage !> !>       CLASS(FTMutableObjectArray)  :: array !>       integer                      :: N = 11 !>       CALL array % initWithSize(N) !> SUBROUTINE initObjectArrayWithSize ( self , arraySize ) IMPLICIT NONE CLASS ( FTMutableObjectArray ) :: self INTEGER :: arraySize INTEGER :: i CALL self % FTObject % init () ALLOCATE ( self % array ( arraySize ) ) DO i = 1 , arraySize self % array ( i ) % object => NULL () END DO self % count_ = 0 END SUBROUTINE initObjectArrayWithSize ! !//////////////////////////////////////////////////////////////////////// ! !> !> Destructor for the class. This is called automatically when the !> reference count reaches zero. Do not call this yourself. !> SUBROUTINE destructObjectArray ( self ) IMPLICIT NONE CLASS ( FTMutableObjectArray ) :: self CLASS ( FTObject ), POINTER :: obj => NULL () INTEGER :: i DO i = 1 , self % count_ obj => self % array ( i ) % object IF ( ASSOCIATED ( obj ) ) CALL releaseFTObject ( self = obj ) END DO DEALLOCATE ( self % array ) self % array => NULL () self % count_ = 0 END SUBROUTINE ! !------------------------------------------------ !> Public, generic name: release(self) !> !> Call release(self) on an object to release control !> of an object. If its reference count is zero, then !> it is deallocated. !------------------------------------------------ ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE releaseFTMutableObjectArray ( self ) IMPLICIT NONE TYPE ( FTMutableObjectArray ) , POINTER :: self CLASS ( FTObject ), POINTER :: obj IF (. NOT . ASSOCIATED ( self )) RETURN obj => self CALL releaseFTObject ( self = obj ) IF ( . NOT . ASSOCIATED ( obj ) ) THEN self => NULL () END IF END SUBROUTINE releaseFTMutableObjectArray ! !//////////////////////////////////////////////////////////////////////// ! !> !> Add an object to the end of the array !> !> *Usage !> !>       CLASS(FTMutableObjectArray)      :: array !>       CLASS(FTObject)        , POINTER :: obj !>       CLASS(FTObjectSubclass), POINTER :: p !>       obj => p !>       CALL array % addObject(obj) !> SUBROUTINE addObjectToArray ( self , obj ) IMPLICIT NONE CLASS ( FTMutableObjectArray ) :: self CLASS ( FTObject ), POINTER :: obj self % count_ = self % count_ + 1 IF ( self % count_ > SIZE ( self % array ) ) THEN CALL increaseArraysize ( self , self % count_ ) END IF self % array ( self % count_ ) % object => obj CALL obj % retain () END SUBROUTINE addObjectToArray ! !//////////////////////////////////////////////////////////////////////// ! !> !> Remove an object at the index indx !> !> *Usage !> !>       CLASS(FTMutableObjectArray) :: array !>       INTEGER                     :: indx !>       CALL array % removeObjectAtIndex(indx) !> SUBROUTINE removeObjectAtIndex ( self , indx ) IMPLICIT NONE ! !        --------- !        Arguments !        --------- ! CLASS ( FTMutableObjectArray ) :: self INTEGER :: indx ! !        --------------- !        Local variables !        --------------- ! INTEGER :: i CLASS ( FTObject ), POINTER :: obj => NULL () obj => self % array ( indx ) % object IF ( ASSOCIATED ( obj ) ) THEN CALL releaseFTObject ( self = obj ) END IF DO i = indx , self % count_ - 1 self % array ( i ) % object => self % array ( i + 1 ) % object END DO self % array ( self % count_ ) % object => NULL () self % count_ = self % count_ - 1 END SUBROUTINE removeObjectAtIndex ! !//////////////////////////////////////////////////////////////////////// ! !> !> Replace an object at the index indx !> !> Usage !> ----- !> !>       CLASS(FTMutableObjectArray) :: array !>       INTEGER                     :: indx !>       CALL array % replaceObjectAtIndexWithObject(indx) !> SUBROUTINE replaceObjectAtIndexWithObject ( self , indx , replacement ) IMPLICIT NONE ! !        --------- !        Arguments !        --------- ! CLASS ( FTMutableObjectArray ) :: self INTEGER :: indx CLASS ( FTObject ), POINTER :: replacement ! !        --------------- !        Local variables !        --------------- ! CLASS ( FTObject ), POINTER :: obj => NULL () obj => self % array ( indx ) % object CALL releaseFTObject ( obj ) self % array ( indx ) % object => replacement CALL replacement % retain () END SUBROUTINE replaceObjectAtIndexWithObject ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE printArray ( self , iUnit ) IMPLICIT NONE CLASS ( FTMutableObjectArray ) :: self INTEGER :: iUnit INTEGER :: i CLASS ( FTObject ), POINTER :: obj => NULL () DO i = 1 , self % count_ obj => self % array ( i ) % object CALL obj % printDescription ( iUnit ) END DO END SUBROUTINE printArray ! !//////////////////////////////////////////////////////////////////////// ! !> !> Access the object at the index indx !> !> *Usage !> !>       CLASS(FTMutableObjectArray) :: array !>       INTEGER                     :: indx !>       CLASS(FTObject), POINTER    :: obj !>       obj => array % objectAtIndex(indx) !> FUNCTION objectAtIndex ( self , indx ) RESULT ( obj ) IMPLICIT NONE CLASS ( FTMutableObjectArray ) :: self INTEGER :: indx CLASS ( FTObject ), POINTER :: obj IF ( indx > self % count_ . OR . indx < 1 ) THEN obj => NULL () ELSE obj => self % array ( indx ) % object END IF END FUNCTION objectAtIndex ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE increaseArraySize ( self , n ) IMPLICIT NONE ! !        --------- !        Arguments !        --------- ! CLASS ( FTMutableObjectArray ) :: self INTEGER :: n ! !        --------------- !        Local Variables !        --------------- ! TYPE ( FTObjectPointerWrapper ), DIMENSION (:), POINTER :: newArray INTEGER :: i , m IF ( n <= SIZE ( self % array ) ) THEN RETURN END IF m = ( n - SIZE ( self % array )) / self % chunkSize_ + 1 ALLOCATE ( newArray ( SIZE ( self % array ) + m * self % chunkSize_ ) ) DO i = 1 , SIZE ( self % array ) newArray ( i ) % object => self % array ( i ) % object END DO DO i = SIZE ( self % array ) + 1 , SIZE ( newArray ) newArray ( i ) % object => NULL () END DO DEALLOCATE ( self % array ) self % array => newArray END SUBROUTINE increaseArraySize ! !//////////////////////////////////////////////////////////////////////// ! !> !> Set the number of items to be added when the array needs to be re-sized !> !> *Usage !> !>       CLASS(FTMutableObjectArray) :: array !>       INTEGER                     :: sze = 42 !>       CALL array % setChunkSize(sze) !> SUBROUTINE setChunkSize ( self , chunkSize ) IMPLICIT NONE CLASS ( FTMutableObjectArray ) :: self INTEGER :: chunkSize self % chunkSize_ = chunkSize END SUBROUTINE setChunkSize ! !//////////////////////////////////////////////////////////////////////// ! !> !> Returns the number of items to be added when the array needs to be re-sized !> !> *Usage !> !>       CLASS(FTMutableObjectArray) :: array !>       INTEGER                     :: sze !>       sze =  array % chunkSize !> INTEGER FUNCTION chunkSize ( self ) IMPLICIT NONE CLASS ( FTMutableObjectArray ) :: self chunkSize = self % chunkSize_ END FUNCTION chunkSize ! !//////////////////////////////////////////////////////////////////////// ! !> !> Generic name: count !> !> Returns the acutal number of items in the array. !> !> *Usage !> !>       CLASS(FTMutableObjectArray) :: array !>       INTEGER                     :: sze !>       sze =  array % count() !> INTEGER FUNCTION numberOfItems ( self ) IMPLICIT NONE CLASS ( FTMutableObjectArray ) :: self numberOfItems = self % count_ END FUNCTION numberOfItems ! !//////////////////////////////////////////////////////////////////////// ! INTEGER FUNCTION allocatedSize ( self ) IMPLICIT NONE CLASS ( FTMutableObjectArray ) :: self IF ( ASSOCIATED ( self % array ) ) THEN allocatedSize = SIZE ( self % array ) ELSE allocatedSize = 0 END IF END FUNCTION allocatedSize ! !--------------------------------------------------------------------------- !> Generic Name: cast !> !> Cast a pointer to the base class to an FTMutableObjectArray pointer !--------------------------------------------------------------------------- ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION objectArrayFromObject ( obj ) RESULT ( cast ) ! !     ----------------------------------------------------- !     Cast the base class FTObject to the FTException class !     ----------------------------------------------------- ! IMPLICIT NONE CLASS ( FTObject ) , POINTER :: obj CLASS ( FTMutableObjectArray ), POINTER :: cast cast => NULL () SELECT TYPE ( e => obj ) TYPE is ( FTMutableObjectArray ) cast => e CLASS DEFAULT END SELECT END FUNCTION objectArrayFromObject ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE castToMutableObjectArray ( obj , cast ) ! !     ----------------------------------------------------- !     Cast the base class FTObject to the FTException class !     ----------------------------------------------------- ! IMPLICIT NONE CLASS ( FTObject ) , POINTER :: obj CLASS ( FTMutableObjectArray ), POINTER :: cast cast => NULL () SELECT TYPE ( e => obj ) TYPE is ( FTMutableObjectArray ) cast => e CLASS DEFAULT END SELECT END SUBROUTINE castToMutableObjectArray ! !//////////////////////////////////////////////////////////////////////// ! !      ----------------------------------------------------------------- !> Class name returns a string with the name of the type of the object !> !>  ### Usage: !> !>        PRINT *,  obj % className() !>        if( obj % className = \"FTMutableObjectArray\") !> FUNCTION arrayClassName ( self ) RESULT ( s ) IMPLICIT NONE CLASS ( FTMutableObjectArray ) :: self CHARACTER ( LEN = CLASS_NAME_CHARACTER_LENGTH ) :: s s = \"FTMutableObjectArray\" END FUNCTION arrayClassName END Module FTMutableObjectArrayClass","tags":"","loc":"sourcefile/ftobjectarrayclass.f90.html","title":"FTObjectArrayClass.f90 – FTObjectLibrary"},{"text":"Files Dependent On This One sourcefile~~ftobjectclass.f90~~AfferentGraph sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftdictionaryclass.f90 FTDictionaryClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftmultiindextable.f90 FTMultiIndexTable.f90 sourcefile~ftobjectclass.f90->sourcefile~ftmultiindextable.f90 sourcefile~ftobjectlibrary.f90 FTObjectLibrary.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftdataclass.f90 FTDataClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftdataclass.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 sourcefile~multiindextabletests.f90 MultiIndexTableTests.f90 sourcefile~ftobjectclass.f90->sourcefile~multiindextabletests.f90 sourcefile~calculator.f90 Calculator.f90 sourcefile~ftobjectclass.f90->sourcefile~calculator.f90 sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftvalueclass.f90 sourcefile~ftsparsematrixclass.f90 FTSparseMatrixClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftsparsematrixclass.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftvaluedictionaryclass.f90 FTValueDictionaryClass.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftvaluedictionaryclass.f90 sourcefile~dictionarytests.f90 DictionaryTests.f90 sourcefile~ftdictionaryclass.f90->sourcefile~dictionarytests.f90 sourcefile~ftexceptionclass.f90 FTExceptionClass.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftmultiindextable.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftsparsematrixclass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~linkedlisttests.f90 LinkedListTests.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~linkedlisttests.f90 sourcefile~ftstackclass.f90 FTStackClass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftstackclass.f90 sourcefile~linkedlistexample.f90 LinkedListExample.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~linkedlistexample.f90 sourcefile~ftmultiindextable.f90->sourcefile~multiindextabletests.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~mutablearraytests.f90 MutableArrayTests.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~mutablearraytests.f90 sourcefile~ftvalueclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftvalueclass.f90->sourcefile~multiindextabletests.f90 sourcefile~ftvalueclass.f90->sourcefile~calculator.f90 sourcefile~ftvalueclass.f90->sourcefile~ftvaluedictionaryclass.f90 sourcefile~ftvalueclass.f90->sourcefile~dictionarytests.f90 sourcefile~ftvalueclass.f90->sourcefile~linkedlisttests.f90 sourcefile~ftvalueclass.f90->sourcefile~linkedlistexample.f90 sourcefile~stackstests.f90 StacksTests.f90 sourcefile~ftvalueclass.f90->sourcefile~stackstests.f90 sourcefile~ftvalueclass.f90->sourcefile~mutablearraytests.f90 sourcefile~sparsematrixtests.f90 SparseMatrixTests.f90 sourcefile~ftvalueclass.f90->sourcefile~sparsematrixtests.f90 sourcefile~hashtabletests.f90 HashTableTests.f90 sourcefile~ftvalueclass.f90->sourcefile~hashtabletests.f90 sourcefile~valueclasstests.f90 ValueClassTests.f90 sourcefile~ftvalueclass.f90->sourcefile~valueclasstests.f90 sourcefile~ftsparsematrixclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftsparsematrixclass.f90->sourcefile~sparsematrixtests.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~valuedictionarytests.f90 ValueDictionaryTests.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~valuedictionarytests.f90 sourcefile~exceptiontests.f90 ExceptionTests.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~exceptiontests.f90 sourcefile~ftexceptionclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftexceptionclass.f90->sourcefile~exceptiontests.f90 sourcefile~ftstackclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftstackclass.f90->sourcefile~calculator.f90 sourcefile~ftstackclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftstackclass.f90->sourcefile~stackstests.f90 var pansourcefileftobjectclassf90AfferentGraph = svgPanZoom('#sourcefileftobjectclassf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules FTObjectClass Source Code FTObjectClass.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! ! ! !>FTObject is the root class for all object types. !> !>Overview !>-------- !> !>FTObject defines the basic methods that are essential for reference counted objects. !> !>FTObject is generally not going to be instantiated by itself, but rather it will !>be subclassed and one will work with instances of the subclasses. !>Otherwise, pointers of type FTObject that point to instances of subclasses !>will be stored in the container classes. !> !> !>Tasks !>----- !> !> !>- init() !> !>     Initializes an object and any memory that it needs to allocate, etc. !>     Should be orrerrided in subclasses.The base class implementation does nothing but !>     increase the reference count of the object. !> !>- destruct() !> !>     Destructor of the object, which releases and deallocates owned objects and memory. !>     Should be overrided in subclasses. The base class implementation does nothing but !>     decrease the reference count of the object. !> !>- printDescription(iUnit) !> !>     Prints a description of the object to a specified file unit. The base class implementation !>     does nothing but print \"FTObject\" !> !>- copy() !> !>     Creates a copy (pointer) to the object of CLASS(FTObject) sourced with the object. !> !>- retain() !> !>     Increases the reference count of the object. Any procedure or object that retain()'s !>     an object gains an ownership stake in that object. This procedure is not overridable. !> !>- release() !> !>     Decreases the reference count of an object. To be called only by objects or procedures !>     that have ownership in an object pointer, i.e., for which init() or retain() have been called. !>     Override this procedure in subclasses for releasing the actual type. !> !>- isUnreferenced() !> !>     Test to see if there are no more owners of an object. !> !>- refCount() !> !>     Returns the number of owners of an object. Usually this is of interest only for debugging purposes. !>     This procedure is not overridable. !> !> !>Subclassing FTObject !>-------------------- !> !>In general, subclasses of FTObject override !> !>- init() !>- destruct() !>- printDescription() !>- release() !> !>They should also provide a cast() subroutine to convert from the base class to a subclass. !>The cast() routine can look something like !> !>     SUBROUTINE castToSubclass(obj,cast) !>        IMPLICIT NONE !>        CLASS(FTObject), POINTER :: obj !>        CLASS(SubClass), POINTER :: cast !> !>        cast => NULL() !>        SELECT TYPE (e => obj) !>           TYPE is (SubClass) !>              cast => e !>           CLASS DEFAULT !> !>        END SELECT !> !>     END SUBROUTINE castToSubclass !> !> !>## Subclassing init !> !>The init() procedure performs subclass specific operations to initialize an object. !> !>Subclasses that override init() must include !>a call to the super class method. For example, overriding init looks like !> !>     SUBROUTINE initSubclass(self) !>        IMPLICIT NONE !>        CLASS(Subclass) :: self !> !>        CALL self % FTObject % init() !>        Allocate and initialize all member objects !>        ... Other Subclass specific code !>     END SUBROUTINE initSubclass !> !>## Subclassing destruct !> !>The destruct() procedure reverses the operations done in the init() procedure. It releases and !>deallocates any pointers that it owns.  Subclasses that override destruct() must include !>a call to the super class method. For example, overriding destruct looks like !> !>     SUBROUTINE destructSubclass(self) !>        IMPLICIT NONE !>        CLASS(Subclass) :: self !> !>        Release and deallocate (if necessary) all member objects !>        CALL self % FTObject % destruct() !> !>     END SUBROUTINE destructSubclass !> !>## Subclassing printDescription(iUnit) !> !>printDescription is a method whose existence is to support debugging. Call printDescription(iUnit) !>on any objects owned by self for a cascading of what is stored in the object. !> !> !>## Casting an object from the base to a subclass !> !>Container classes and the copy function return pointers to a CLASS(FTObject). To use !>any subclass features one must \"cast\" to the subclass. We like to have a specific !>cast routine to do this as painlessly as possible. Each subclass should include a !>SUBROUTINE like this: !> !>     SUBROUTINE castToSubclass(obj,cast) !>        IMPLICIT NONE !>        CLASS(FTObject), POINTER :: obj !>        CLASS(Subclass), POINTER :: cast !>        cast => NULL() !>        SELECT TYPE (e => obj) !>           TYPE is (Subclass) !>              cast => e !>           CLASS DEFAULT !>        END SELECT !>     END SUBROUTINE castToValue !>## Subclassing className !> !>The className() procedure returns the name of the class. !> !>Subclasses should override className() !> !> !>Created: January 7, 2013 11:30 AM !>@author !>David A. Kopriva ! Module FTObjectClass IMPLICIT NONE ! !     --------- !     Constants !     --------- ! ! Until all compilers can do allocatables INTEGER , PARAMETER :: DESCRIPTION_CHARACTER_LENGTH = 1024 INTEGER , PARAMETER :: CLASS_NAME_CHARACTER_LENGTH = 32 ! !     -------------------------- !     Derived type for the class !     -------------------------- ! TYPE FTObject INTEGER , PRIVATE :: refCount_ ! !        ======== CONTAINS !        ======== ! PROCEDURE :: init => initFTObject PROCEDURE :: destruct => destructFTObject PROCEDURE :: description => FTObjectDescription PROCEDURE :: printDescription => printFTObjectDescription PROCEDURE :: className PROCEDURE , NON_OVERRIDABLE :: copy => copyFTObject PROCEDURE , NON_OVERRIDABLE :: retain => retainFTObject PROCEDURE , NON_OVERRIDABLE :: isUnreferenced PROCEDURE , NON_OVERRIDABLE :: refCount END TYPE FTObject PRIVATE :: copyFTObject ! !     ===================== CONTAINS ! Procedures !     ===================== ! ! !//////////////////////////////////////////////////////////////////////// ! ! !     -------------------------------------------------------------- !>   Generic Name: init() !> !>   Initializes the object. The base class initialization does !>   nothing but set the reference count to one. !     -------------------------------------------------------------- ! SUBROUTINE initFTObject ( self ) IMPLICIT NONE CLASS ( FTObject ) :: self self % refCount_ = 1 END SUBROUTINE initFTObject ! !//////////////////////////////////////////////////////////////////////// ! ! !     -------------------------------------------------------------------- !>   Generic Name: destruct() !> !>   The destructor for the class. The base class destructor does nothing. !     -------------------------------------------------------------------- ! SUBROUTINE destructFTObject ( self ) IMPLICIT NONE CLASS ( FTObject ) :: self END SUBROUTINE destructFTObject ! !//////////////////////////////////////////////////////////////////////// ! ! !      ----------------------------------------------------------------- !> Retain increases the reference count by one and implies ownership !>  to the caller. !>  ### Usage: !>        CALL obj\\ % retain() !      ----------------------------------------------------------------- ! SUBROUTINE retainFTObject ( self ) IMPLICIT NONE CLASS ( FTObject ) :: self self % refCount_ = self % refCount_ + 1 END SUBROUTINE retainFTObject ! !//////////////////////////////////////////////////////////////////////// ! ! !      --------------------------------------------------------------------------- !>     releaseFTObject decreases the reference count by one and implies !>     relinquishing ownership by the caller. Call this if control !>     over the existence of an object pointer is no longer desired by the caller. !>     When the reference count goes to zero, the destructor of the object !>     is called automatically and the object is deallocated. !      --------------------------------------------------------------------------- ! RECURSIVE SUBROUTINE releaseFTObject ( self ) IMPLICIT NONE CLASS ( FTObject ), POINTER :: self IF (. NOT . ASSOCIATED ( self )) RETURN self % refCount_ = self % refCount_ - 1 IF ( self % refCount_ < 0 ) THEN PRINT * , \"Attempt to release object with refCount = 0\" CALL self % printDescription ( 6 ) PRINT * , \"--------------------------------------------\" PRINT * , \" \" RETURN END IF IF ( self % refCount_ == 0 ) THEN CALL self % destruct () DEALLOCATE ( self ) self => NULL () END IF END SUBROUTINE releaseFTObject ! !//////////////////////////////////////////////////////////////////////// ! !      ----------------------------------------------------------------- !> Class name returns a string with the name of the type of the object !> !>  ### Usage: !> !>        PRINT *,  obj % className() !>        if( obj % className = \"FTObject\") !> !      ----------------------------------------------------------------- ! FUNCTION className ( self ) RESULT ( s ) IMPLICIT NONE CLASS ( FTObject ) :: self CHARACTER ( LEN = CLASS_NAME_CHARACTER_LENGTH ) :: s s = \"FTObject\" END FUNCTION className ! !//////////////////////////////////////////////////////////////////////// ! ! !     ----------------------------------------------------------------------- !>    Owners of objects should call isUnreferenced after releasing a !>     pointer object. If true, the object should be deallocated and then !>     set to point to NULL() !> !>     ### Usage: ### !> !>          IF ( v % isUnreferenced() )     THEN !>             DEALLOCATE(v) !>             v => NULL() !>          END IF !> !     ----------------------------------------------------------------------- ! LOGICAL FUNCTION isUnreferenced ( self ) IMPLICIT NONE CLASS ( FTObject ) :: self IF ( self % refCount_ == 0 ) THEN isUnreferenced = . true . ELSE isUnreferenced = . false . END IF END FUNCTION isUnreferenced ! !//////////////////////////////////////////////////////////////////////// ! ! !     ----------------------------------------------------------------- !>   Returns the reference count for the object. Normally this is done !>    only for debugging purposes. !< !     ----------------------------------------------------------------- ! INTEGER FUNCTION refCount ( self ) IMPLICIT NONE CLASS ( FTObject ) :: self refCount = self % refCount_ END FUNCTION refCount ! !//////////////////////////////////////////////////////////////////////// ! ! !     ---------------------------------------------------------------------- !>   Returns a character string of length DESCRIPTION_CHARACTER_LENGTH that !>    represents the object. the base class implementation returns an empty !>    string. Note that if the description is too long, the expected string !>    will be trunctated. In general, one wants to use printDescription. !< !     ---------------------------------------------------------------------- ! FUNCTION FTObjectDescription ( self ) IMPLICIT NONE CLASS ( FTObject ) :: self CHARACTER ( LEN = DESCRIPTION_CHARACTER_LENGTH ) :: FTObjectDescription FTObjectDescription = \" \" END FUNCTION FTObjectDescription ! !//////////////////////////////////////////////////////////////////////// ! ! !     ------------------------------------------------------------------------------------ !>   Generic Name: printDescription() !> !>   Prints a string to unit iUnit that represents the contents of the object. FTObject's !>    description simply prints its name. Override this in subclasses to print something !>    useful. !< !     ------------------------------------------------------------------------------------ ! SUBROUTINE printFTObjectDescription ( self , iUnit ) IMPLICIT NONE CLASS ( FTObject ) :: self INTEGER :: iUnit WRITE ( iUnit , * ) \"FTObject\" END SUBROUTINE printFTObjectDescription ! !//////////////////////////////////////////////////////////////////////// ! ! !     -------------------------------------------------------------------- !>   Base class implemetation of the assignment function. Call this from !>    within any subclasses copy assignment function. All FTObject's !>    implementation does is set !>    the reference count to one, implying no additional ownwership to the !>    caller that is creating the copy. !< !     -------------------------------------------------------------------- ! FUNCTION copyFTObject ( self ) RESULT ( copy ) IMPLICIT NONE CLASS ( FTObject ), INTENT ( IN ) :: self CLASS ( FTObject ), POINTER :: copy ALLOCATE ( copy ) CALL initFTObject ( self = copy ) END FUNCTION copyFTObject END MODULE FTObjectClass","tags":"","loc":"sourcefile/ftobjectclass.f90.html","title":"FTObjectClass.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~ftsparsematrixclass.f90~~EfferentGraph sourcefile~ftsparsematrixclass.f90 FTSparseMatrixClass.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftsparsematrixclass.f90 sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftsparsematrixclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~ftsparsematrixclass.f90~~AfferentGraph sourcefile~ftsparsematrixclass.f90 FTSparseMatrixClass.f90 sourcefile~ftobjectlibrary.f90 FTObjectLibrary.f90 sourcefile~ftsparsematrixclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~sparsematrixtests.f90 SparseMatrixTests.f90 sourcefile~ftsparsematrixclass.f90->sourcefile~sparsematrixtests.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules FTSparseMatrixData FTSparseMatrixClass Source Code FTSparseMatrixClass.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      SparseMatrixClass.f90 !      Created: July 29, 2013 10:59 AM !      By: David Kopriva ! ! !//////////////////////////////////////////////////////////////////////// ! !>FTSparseMatrixData is used by the FTSparseMatrix Class. Users will !>usually not interact with or use this class directly. !> Module FTSparseMatrixData USE FTObjectClass IMPLICIT NONE ! !     --------------- !     Type definition !     --------------- ! TYPE , EXTENDS ( FTObject ) :: MatrixData INTEGER :: key CLASS ( FTObject ), POINTER :: object ! !        ======== CONTAINS !        ======== ! PROCEDURE :: initWithObjectAndKey PROCEDURE :: destruct => destructMatrixData END TYPE MatrixData INTERFACE cast MODULE PROCEDURE castObjectToMatrixData END INTERFACE cast ! !     ======== CONTAINS !     ======== ! ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initWithObjectAndKey ( self , object , key ) ! !        ---------------------- !        Designated initializer !        ---------------------- ! IMPLICIT NONE CLASS ( MatrixData ) :: self CLASS ( FTObject ), POINTER :: object INTEGER :: key CALL self % FTObject % init () self % key = key self % object => object CALL self % object % retain () END SUBROUTINE initWithObjectAndKey ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE destructMatrixData ( self ) IMPLICIT NONE CLASS ( MatrixData ) :: self IF ( ASSOCIATED ( self % object ) ) THEN CALL releaseFTObject ( self = self % object ) END IF CALL self % FTObject % destruct END SUBROUTINE destructMatrixData ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE castObjectToMatrixData ( obj , cast ) IMPLICIT NONE ! !        ----------------------------------------------------- !        Cast the base class FTObject to the FTException class !        ----------------------------------------------------- ! CLASS ( FTObject ) , POINTER :: obj CLASS ( MatrixData ), POINTER :: cast cast => NULL () SELECT TYPE ( e => obj ) TYPE is ( MatrixData ) cast => e CLASS DEFAULT END SELECT END SUBROUTINE castObjectToMatrixData ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION matrixDataCast ( obj ) RESULT ( cast ) IMPLICIT NONE ! !        ----------------------------------------------------- !        Cast the base class FTObject to the FTException class !        ----------------------------------------------------- ! CLASS ( FTObject ) , POINTER :: obj CLASS ( MatrixData ), POINTER :: cast cast => NULL () SELECT TYPE ( e => obj ) TYPE is ( MatrixData ) cast => e CLASS DEFAULT END SELECT END FUNCTION matrixDataCast END Module FTSparseMatrixData !@mark - !>The sparse matrix stores an FTObject pointer associated !>with two keys (i,j) as a hash table. !> !>Hash tables are data structures designed to enable storage and fast !>retrieval of key-value pairs. An example of a key-value pair is !>a variable name (``gamma'') and its associated value (``1.4''). !>The table itself is typically an array. !>The location of the value in a hash table associated with !>a key, $k$, is specified by way of a hash function, $H(k)$. !>In the case of a variable name and value, the hash function !>would convert the name into an integer that tells where to !>find the associated value in the table. !> !>A very simple example of a !>hash table is, in fact, a singly dimensioned array. The key is !>the array index and the value is what is stored at that index. !>Multiple keys can be used to identify data; a two dimensional !>array provides an example of where two keys are used to access memory !>and retrieve the value at that location. !>If we view a singly dimensioned array as a special case of a hash table, !>its hash function is just the array index, $H(j)=j$. A doubly dimensioned array !>could be (and often is) stored columnwise as a singly dimensioned array by creating a hash !>function that maps the two indices to a single location in the array, e.g., !>$H(i,j) = i + j*N$, where $N$ is the range of the first index, $i$. !> !>Two classes are included in FTObjectLibrary. The first, FTSparseMatrix, works with an ordered pair, (i,j), as the !>keys. The second, FTMultiIndexTable, uses an array of integers as the keys. !> !>Both classes include enquiry functions to see of an object exists for the given keys. Otherwise, !>the function that returns an object for a given key will return an UNASSOCIATED pointer if there !>is no object for the key. Be sure to retain any object returned by the objectForKeys methods if !>you want to keep it beyond the lifespan of the matrix or table. For example, !> !>           TYPE(FTObject) :: obj !>           obj => matrix % objectForKeys(i,j) !>           IF ( ASSOCIATED(OBJ) ) THEN !>               CALL obj % retain() !>                 Cast obj to something useful !>           ELSE !>              Perform some kind of error recovery !>           END IF !>The sparse matrix stores an FTObject pointer associated !>with two keys (i,j) as a hash table. The size, N = the range of i. !> !>##Definition (Subclass of FTObject) !> !>         TYPE(FTSparseMatrix) :: SparseMatrix !>#Usage !>##Initialization !> !>         CALL SparseMatrix % initWithSize(N) !> !>##Destruction !> !>         CALL release(SparseMatrix) !> !>##Adding an object !> !>         CLASS(FTObject), POINTER :: obj !>         CALL SparseMatrix % addObjectForKeys(obj,i,j) !> !>##Retrieving an object !> !>         CLASS(FTObject), POINTER :: obj !>         obj => SparseMatrix % objectForKeys(i,j) !> !>Be sure to retain the object if you want it to live !>      beyond the life of the table. !> !>##Testing the presence of keys !> !>         LOGICAL :: exists !>         exists = SparseMatrix % containsKeys(i,j) ! !//////////////////////////////////////////////////////////////////////// ! Module FTSparseMatrixClass USE FTObjectClass USE FTLinkedListClass USE FTLinkedListIteratorClass USE FTSparseMatrixData IMPLICIT NONE ! !     ---------------------- !     Class type definitions !     ---------------------- ! TYPE FTLinkedListPtr CLASS ( FTLinkedList ), POINTER :: list END TYPE FTLinkedListPtr PRIVATE :: FTLinkedListPtr TYPE , EXTENDS ( FTObject ) :: FTSparseMatrix TYPE ( FTLinkedListPtr ) , DIMENSION (:), ALLOCATABLE :: table TYPE ( FTLinkedListIterator ), PRIVATE :: iterator ! !        ======== CONTAINS !        ======== ! PROCEDURE :: initWithSize => initSparseMatrixWithSize PROCEDURE :: destruct => destructSparseMatrix PROCEDURE :: containsKeys => SparseMatrixContainsKeys PROCEDURE :: addObjectForKeys => addObjectToSparseMatrixForKeys PROCEDURE :: objectForKeys => objectInSparseMatrixForKeys PROCEDURE :: SparseMatrixSize END TYPE FTSparseMatrix INTERFACE release MODULE PROCEDURE releaseFTSparseMatrix END INTERFACE ! !     ======== CONTAINS !     ======== ! ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initSparseMatrixWithSize ( self , N ) IMPLICIT NONE ! !        --------- !        Arguments !        --------- ! CLASS ( FTSparseMatrix ) :: self INTEGER :: N ! !        --------------- !        Local variables !        --------------- ! INTEGER :: j CALL self % FTObject % init () ALLOCATE ( self % table ( N )) DO j = 1 , N ALLOCATE ( self % table ( j ) % list ) CALL self % table ( j ) % list % init () END DO CALL self % iterator % init () END SUBROUTINE initSparseMatrixWithSize ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE addObjectToSparseMatrixForKeys ( self , obj , i , j ) IMPLICIT NONE ! !        --------- !        Arguments !        --------- ! CLASS ( FTSparseMatrix ) :: self CLASS ( FTObject ), POINTER :: obj ! !        --------------- !        Local variables !        --------------- ! CLASS ( MatrixData ), POINTER :: mData CLASS ( FTObject ) , POINTER :: ptr INTEGER :: i , j IF ( . NOT . self % containsKeys ( i , j ) ) THEN ALLOCATE ( mData ) CALL mData % initWithObjectAndKey ( obj , j ) ptr => mData CALL self % table ( i ) % list % add ( ptr ) CALL releaseFTObject ( ptr ) END IF END SUBROUTINE addObjectToSparseMatrixForKeys ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION objectInSparseMatrixForKeys ( self , i , j ) RESULT ( r ) ! !     --------------------------------------------------------------- !     Returns the stored FTObject for the keys (i,j). Returns NULL() !     if the object isn't in the table. Retain the object if it needs !     a strong reference by the caller. !     --------------------------------------------------------------- ! IMPLICIT NONE ! !        --------- !        Arguments !        --------- ! CLASS ( FTSparseMatrix ) :: self INTEGER :: i , j CLASS ( FTObject ), POINTER :: r ! !        --------------- !        Local variables !        --------------- ! CLASS ( MatrixData ) , POINTER :: mData CLASS ( FTObject ) , POINTER :: obj CLASS ( FTLinkedList ), POINTER :: list r => NULL () IF (. NOT . ALLOCATED ( self % table )) RETURN list => self % table ( i ) % list IF (. NOT . ASSOCIATED ( list )) RETURN IF ( list % COUNT () == 0 ) RETURN ! !        ---------------------------- !        Step through the linked list !        ---------------------------- ! r => NULL () CALL self % iterator % setLinkedList ( self % table ( i ) % list ) DO WHILE (. NOT . self % iterator % isAtEnd ()) obj => self % iterator % object () CALL cast ( obj , mData ) IF ( mData % key == j ) THEN r => mData % object EXIT END IF CALL self % iterator % moveToNext () END DO END FUNCTION objectInSparseMatrixForKeys ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION SparseMatrixContainsKeys ( self , i , j ) RESULT ( r ) IMPLICIT NONE ! !        --------- !        Arguments !        --------- ! CLASS ( FTSparseMatrix ) :: self INTEGER :: i , j LOGICAL :: r ! !        --------------- !        Local variables !        --------------- ! CLASS ( FTObject ) , POINTER :: obj CLASS ( MatrixData ) , POINTER :: mData CLASS ( FTLinkedList ), POINTER :: list r = . FALSE . IF (. NOT . ALLOCATED ( self % table )) RETURN IF (. NOT . ASSOCIATED ( self % table ( i ) % list )) RETURN IF ( self % table ( i ) % list % COUNT () == 0 ) RETURN ! !        ---------------------------- !        Step through the linked list !        ---------------------------- ! list => self % table ( i ) % list CALL self % iterator % setLinkedList ( list ) CALL self % iterator % setToStart () DO WHILE (. NOT . self % iterator % isAtEnd ()) obj => self % iterator % object () CALL cast ( obj , mData ) IF ( mData % key == j ) THEN r = . TRUE . RETURN END IF CALL self % iterator % moveToNext () END DO END FUNCTION SparseMatrixContainsKeys ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE destructSparseMatrix ( self ) IMPLICIT NONE ! !        --------- !        Arguments !        --------- ! CLASS ( FTSparseMatrix ) :: self ! !        --------------- !        Local variables !        --------------- ! INTEGER :: j DO j = 1 , SIZE ( self % table ) IF ( ASSOCIATED ( self % table ( j ) % list ) ) THEN CALL releaseSMMemberList ( list = self % table ( j ) % list ) END IF END DO IF ( ALLOCATED ( self % table )) DEALLOCATE ( self % table ) CALL self % iterator % destruct () CALL self % FTObject % destruct () END SUBROUTINE destructSparseMatrix ! !------------------------------------------------ !> Public, generic name: release(self) !> !> Call release(self) on an object to release control !> of an object. If its reference count is zero, then !> it is deallocated. !------------------------------------------------ ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE releaseFTSparseMatrix ( self ) IMPLICIT NONE CLASS ( FTSparseMatrix ) , POINTER :: self CLASS ( FTObject ) , POINTER :: obj IF (. NOT . ASSOCIATED ( self )) RETURN obj => self CALL releaseFTObject ( self = obj ) IF ( . NOT . ASSOCIATED ( obj ) ) THEN self => NULL () END IF END SUBROUTINE releaseFTSparseMatrix ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE releaseSMMemberList ( list ) IMPLICIT NONE CLASS ( FTLinkedList ), POINTER :: list CLASS ( FTObject ) , POINTER :: obj obj => list CALL releaseFTObject ( self = obj ) IF (. NOT . ASSOCIATED ( obj )) list => NULL () END SUBROUTINE releaseSMMemberList ! !//////////////////////////////////////////////////////////////////////// ! INTEGER FUNCTION SparseMatrixSize ( self ) IMPLICIT NONE CLASS ( FTSparseMatrix ) :: self IF ( ALLOCATED ( self % table ) ) THEN SparseMatrixSize = SIZE ( self % table ) ELSE SparseMatrixSize = 0 END IF END FUNCTION SparseMatrixSize ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION SparseMatrixFromObject ( obj ) RESULT ( cast ) ! !     ----------------------------------------------------- !     Cast the base class FTObject to the FTException class !     ----------------------------------------------------- ! IMPLICIT NONE CLASS ( FTObject ) , POINTER :: obj CLASS ( FTSparseMatrix ), POINTER :: cast cast => NULL () SELECT TYPE ( e => obj ) TYPE is ( FTSparseMatrix ) cast => e CLASS DEFAULT END SELECT END FUNCTION SparseMatrixFromObject ! !//////////////////////////////////////////////////////////////////////// ! INTEGER FUNCTION Hash1 ( idPair ) INTEGER , DIMENSION ( 2 ) :: idPair Hash1 = MAXVAL ( idPair ) END FUNCTION Hash1 ! !//////////////////////////////////////////////////////////////////////// ! INTEGER FUNCTION Hash2 ( idPair ) INTEGER , DIMENSION ( 2 ) :: idPair Hash2 = MINVAL ( idPair ) END FUNCTION Hash2 END Module FTSparseMatrixClass","tags":"","loc":"sourcefile/ftsparsematrixclass.f90.html","title":"FTSparseMatrixClass.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~ftstackclass.f90~~EfferentGraph sourcefile~ftstackclass.f90 FTStackClass.f90 sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftstackclass.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~ftstackclass.f90~~AfferentGraph sourcefile~ftstackclass.f90 FTStackClass.f90 sourcefile~ftobjectlibrary.f90 FTObjectLibrary.f90 sourcefile~ftstackclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~stackstests.f90 StacksTests.f90 sourcefile~ftstackclass.f90->sourcefile~stackstests.f90 sourcefile~calculator.f90 Calculator.f90 sourcefile~ftstackclass.f90->sourcefile~calculator.f90 sourcefile~ftexceptionclass.f90 FTExceptionClass.f90 sourcefile~ftstackclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftexceptionclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~exceptiontests.f90 ExceptionTests.f90 sourcefile~ftexceptionclass.f90->sourcefile~exceptiontests.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules FTStackClass Source Code FTStackClass.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      FTStackClass.f90 !      Created: January 25, 2013 12:56 PM !      By: David Kopriva ! !>Inherits from FTLinkedListClass : FTObjectClass !> !>##Definition (Subclass of FTLinkedListClass): !>   TYPE(FTStack) :: list !> !>#Usage: !> !>##Initialization !> !>      ALLOCATE(stack)  If stack is a pointer !>      CALL stack  %  init() !> !>##Destruction !>      CALL release(stack) [Pointers] !>      CALL stack % destruct() [Non pointers] !> !>##Pushing an object onto the stack !> !>      TYPE(FTObject) :: objectPtr !>      objectPtr => r1 !>      CALL stack % push(objectPtr) !> !>##Peeking at the top of the stack !> !>      objectPtr => stack % peek()  No change of ownership !>      SELECT TYPE(objectPtr) !>         TYPE is (*SubclassType*) !>            … Do something with ObjectPtr as subclass !>         CLASS DEFAULT !>            … Problem with casting !>      END SELECT !> !>##Popping the top of the stack !> !>      objectPtr => stack % pop()  Ownership transferred to caller !>      SELECT TYPE(objectPtr) !>         TYPE is (*SubclassType*) !>            … Do something with ObjectPtr as subclass !>         CLASS DEFAULT !>            … Problem with casting !>      END SELECT ! !//////////////////////////////////////////////////////////////////////// ! Module FTStackClass USE FTLinkedListClass IMPLICIT NONE TYPE , EXTENDS ( FTLinkedList ) :: FTStack ! !        ======== CONTAINS !        ======== ! PROCEDURE :: init => initFTStack PROCEDURE :: printDescription => printStackDescription PROCEDURE :: className => stackClassName PROCEDURE :: push PROCEDURE :: pop PROCEDURE :: peek END TYPE FTStack INTERFACE release MODULE PROCEDURE releaseFTStack END INTERFACE ! !     ---------- !     Procedures !     ---------- ! !     ======== CONTAINS !     ======== ! ! !------------------------------------------------ !> Public, generic name: init() !> !> Initialize the stack. !------------------------------------------------ ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initFTStack ( self ) IMPLICIT NONE CLASS ( FTStack ) :: self ! !        -------------------------------------------- !        Call the initializer of the superclass first !        -------------------------------------------- ! CALL self % FTLinkedList % init () ! !        --------------------------------- !        Then initialize ivars of subclass !        --------------------------------- ! !None to intialize END SUBROUTINE initFTStack ! !------------------------------------------------------ !> Public, generic name: release(self) !> !> Call release(self) on an object to release control !> of a pointer object. If its reference count is zero, !> then it is deallocated. !------------------------------------------------------ ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE releaseFTStack ( self ) IMPLICIT NONE TYPE ( FTStack ) , POINTER :: self CLASS ( FTObject ), POINTER :: obj IF (. NOT . ASSOCIATED ( self )) RETURN obj => self CALL releaseFTObject ( self = obj ) IF ( . NOT . ASSOCIATED ( obj ) ) THEN self => NULL () END IF END SUBROUTINE releaseFTStack ! !     ----------------------------------- !     push: Push an object onto the stack !     ----------------------------------- ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE push ( self , obj ) ! !        ---------------------------------- !        Add object to the head of the list !        ---------------------------------- ! IMPLICIT NONE CLASS ( FTStack ) :: self CLASS ( FTObject ) , POINTER :: obj CLASS ( FTLinkedListRecord ), POINTER :: newRecord => NULL () CLASS ( FTLinkedListRecord ), POINTER :: tmp => NULL () ALLOCATE ( newRecord ) CALL newRecord % initWithObject ( obj ) IF ( . NOT . ASSOCIATED ( self % head ) ) THEN self % head => newRecord self % tail => newRecord ELSE tmp => self % head self % head => newRecord self % head % next => tmp tmp % previous => newRecord END IF self % nRecords = self % nRecords + 1 END SUBROUTINE push ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION peek ( self ) ! !        ----------------------------------------- !        Return the object at the head of the list !        ** No change of ownership ** !        ----------------------------------------- ! IMPLICIT NONE CLASS ( FTStack ) :: self CLASS ( FTObject ), POINTER :: peek IF ( . NOT . ASSOCIATED ( self % head ) ) THEN peek => NULL () RETURN END IF peek => self % head % recordObject END FUNCTION peek ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE pop ( self , p ) ! !        --------------------------------------------------- !        Remove the head of the list and return the object !        that it points to. Calling routine gains ownership !        of the object. !        --------------------------------------------------- ! IMPLICIT NONE CLASS ( FTStack ) :: self CLASS ( FTObject ) , POINTER :: p CLASS ( FTLinkedListRecord ), POINTER :: tmp => NULL () IF ( . NOT . ASSOCIATED ( self % head ) ) THEN p => NULL () RETURN END IF p => self % head % recordObject IF (. NOT . ASSOCIATED ( p )) RETURN CALL p % retain () tmp => self % head self % head => self % head % next CALL release ( tmp ) self % nRecords = self % nRecords - 1 END SUBROUTINE pop ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION stackFromObject ( obj ) RESULT ( cast ) ! !     ----------------------------------------------------- !     Cast the base class FTObject to the LinkedList class !     ----------------------------------------------------- ! IMPLICIT NONE CLASS ( FTObject ), POINTER :: obj CLASS ( FTStack ) , POINTER :: cast cast => NULL () SELECT TYPE ( e => obj ) TYPE is ( FTStack ) cast => e CLASS DEFAULT END SELECT END FUNCTION stackFromObject ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE printStackDescription ( self , iUnit ) IMPLICIT NONE CLASS ( FTStack ) :: self INTEGER :: iUnit CALL self % FTLinkedList % printDescription ( iUnit = iUnit ) END SUBROUTINE printStackDescription ! !//////////////////////////////////////////////////////////////////////// ! !      ----------------------------------------------------------------- !> Class name returns a string with the name of the type of the object !> !>  ### Usage: !> !>        PRINT *,  obj % className() !>        if( obj % className = \"FTStack\") !> FUNCTION stackClassName ( self ) RESULT ( s ) IMPLICIT NONE CLASS ( FTStack ) :: self CHARACTER ( LEN = CLASS_NAME_CHARACTER_LENGTH ) :: s s = \"FTStack\" END FUNCTION stackClassName END Module FTStackClass","tags":"","loc":"sourcefile/ftstackclass.f90.html","title":"FTStackClass.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~ftvalueclass.f90~~EfferentGraph sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~ftvalueclass.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftvalueclass.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~ftvalueclass.f90~~AfferentGraph sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~sparsematrixtests.f90 SparseMatrixTests.f90 sourcefile~ftvalueclass.f90->sourcefile~sparsematrixtests.f90 sourcefile~dictionarytests.f90 DictionaryTests.f90 sourcefile~ftvalueclass.f90->sourcefile~dictionarytests.f90 sourcefile~ftvaluedictionaryclass.f90 FTValueDictionaryClass.f90 sourcefile~ftvalueclass.f90->sourcefile~ftvaluedictionaryclass.f90 sourcefile~ftobjectlibrary.f90 FTObjectLibrary.f90 sourcefile~ftvalueclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~hashtabletests.f90 HashTableTests.f90 sourcefile~ftvalueclass.f90->sourcefile~hashtabletests.f90 sourcefile~linkedlisttests.f90 LinkedListTests.f90 sourcefile~ftvalueclass.f90->sourcefile~linkedlisttests.f90 sourcefile~stackstests.f90 StacksTests.f90 sourcefile~ftvalueclass.f90->sourcefile~stackstests.f90 sourcefile~calculator.f90 Calculator.f90 sourcefile~ftvalueclass.f90->sourcefile~calculator.f90 sourcefile~linkedlistexample.f90 LinkedListExample.f90 sourcefile~ftvalueclass.f90->sourcefile~linkedlistexample.f90 sourcefile~valueclasstests.f90 ValueClassTests.f90 sourcefile~ftvalueclass.f90->sourcefile~valueclasstests.f90 sourcefile~mutablearraytests.f90 MutableArrayTests.f90 sourcefile~ftvalueclass.f90->sourcefile~mutablearraytests.f90 sourcefile~multiindextabletests.f90 MultiIndexTableTests.f90 sourcefile~ftvalueclass.f90->sourcefile~multiindextabletests.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~valuedictionarytests.f90 ValueDictionaryTests.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~valuedictionarytests.f90 sourcefile~ftexceptionclass.f90 FTExceptionClass.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~exceptiontests.f90 ExceptionTests.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~exceptiontests.f90 sourcefile~ftexceptionclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftexceptionclass.f90->sourcefile~exceptiontests.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules FTValueClass Source Code FTValueClass.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! ! !> A not completely F2003/2008 version of an immutable class !> to store primitive values: integer, real, double precision, logical, !> character. (To Add: complex) !> !> This version does not use CLASS(*) or deferred length strings !> so that it can be used with gfortran 4.7/4.8 !> !> Usage: !> ------ !> !> - Initialization !> !>            TYPE(FTValue) :: r, i, s, l, d !> !>            CALL r % initValue(3.14) !>            CALL i % initValue(6) !>            CALL d % initValue(3.14d0) !>            CALL l % initValue(.true.) !>            CALL s % initValue(\"A string\") !> !> - Destruction !> !>            CALL r % destruct()   [non pointers] !>            call release(r) [Pointers] !> !> - Accessors !> !>            real = r % realValue() !>            int  = i % integerValue() !>            doub = d % doublePrecisionValue() !>            logc = l % logicalValue() !>            str  = s % stringValue(nChars) !> !> - Description !> !>            str = v % description() !>            call v % printDescription(unit) !> !> - Casting !> !>            CLASS(FTVALUE) , POINTER :: v !>            CLASS(FTObject), POINTER :: obj !>            call cast(obj,v) !> !> The class will attempt to convert between the different types: !> !>            CALL r % initWithReal(3.14) !>            print *, r % stringValue(8) !> !>            Logical variables rules: !> !>            real, doublePrecision, integer values !>               logicalValue = .FALSE. if input = 0 !>               logicalValue = .TRUE.  if input /= 0 !> !> String values can be converted to numeric types. If the string is !> not a numeric, Huge(1) will be returned, for integers and NaN for reals. !> !< ! FTValueClass.f90 ! Created: January 9, 2013 12:20 PM !> @author David Kopriva !< ! !//////////////////////////////////////////////////////////////////////// ! Module FTValueClass USE IEEE_ARITHMETIC USE ISO_FORTRAN_ENV USE FTOLConstants USE FTObjectClass IMPLICIT NONE ! !     ---------------- !     Public constants !     ---------------- ! INTEGER , PARAMETER :: FTVALUE_NOT_INTEGER = HUGE ( 1 ) REAL , PARAMETER :: FTVALUE_NOT_REAL = HUGE ( 1.0 ) DOUBLE PRECISION , PARAMETER :: FTVALUE_NOT_DOUBLEPRECISION = HUGE ( 1.0 D0 ) INTEGER , PARAMETER :: FTVALUE_STRING_LENGTH = 512 ! Until vary length strings are available. INTEGER , PARAMETER :: FT_REAL_KIND = SELECTED_REAL_KIND ( 6 ) INTEGER , PARAMETER :: FT_DOUBLE_PRECISION_KIND = SELECTED_REAL_KIND ( 15 ) ! !     ----------------- !     Private constants !     ----------------- ! INTEGER , PARAMETER , PRIVATE :: FTVALUECLASS_INTEGER = 1 , FTVALUECLASS_REAL = 2 , & FTVALUECLASS_DOUBLE = 3 , FTVALUECLASS_STRING = 4 , & FTVALUECLASS_LOGICAL = 5 , FTVALUECLASS_QUAD = 6 ! !     --------------------- !     Class type definition !     --------------------- ! TYPE , EXTENDS ( FTObject ) :: FTValue PRIVATE INTEGER :: valueType CHARACTER ( LEN = 1 ), ALLOCATABLE :: valueStorage (:) ! !        ======== CONTAINS !        ======== ! !        -------------- !        Initialization !        -------------- ! PROCEDURE , PRIVATE :: initWithReal PROCEDURE , PRIVATE :: initWithDoublePrecision PROCEDURE , PRIVATE :: initWithString PROCEDURE , PRIVATE :: initWithLogical PROCEDURE , PRIVATE :: initWithInteger GENERIC , PUBLIC :: initWithValue => initWithReal , initWithDoublePrecision , & initWithString , initWithLogical , & initWithInteger #ifdef _has_Quad PROCEDURE , PRIVATE :: initWithQuad GENERIC , PUBLIC :: initWithValue => initWithQuad #endif ! !        ----------- !        Destruction !        ----------- ! PROCEDURE :: destruct => destructValue ! !        ------- !        Getters !        ------- ! PROCEDURE :: realValue PROCEDURE :: doublePrecisionValue #ifdef _has_Quad PROCEDURE :: quadValue #endif PROCEDURE :: stringValue PROCEDURE :: logicalValue PROCEDURE :: integerValue ! !        ----------- !        Description !        ----------- ! PROCEDURE :: description => FTValueDescription PROCEDURE :: printDescription => printValueDescription PROCEDURE :: className => valueClassName ! !        ---------- !        Comparison !        ---------- ! !         PROCEDURE, PRIVATE :: isEqualTo => isEqualToFTValue END TYPE FTValue INTERFACE cast MODULE PROCEDURE castToValue END INTERFACE cast INTERFACE release MODULE PROCEDURE releaseFTValue END INTERFACE !     ---------- !     Procedures !     ---------- ! CONTAINS !@mark - ! ! !------------------------------------------------ !> Public, generic name: initwithValue() !> !> Initialize the value object with a real number !------------------------------------------------ ! ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initWithReal ( self , v ) IMPLICIT NONE CLASS ( FTValue ) :: self REAL :: v INTEGER :: dataLength CALL self % FTObject % init () dataLength = SIZE ( TRANSFER ( v , self % valueStorage )) ALLOCATE ( self % valueStorage ( dataLength )) self % valueStorage = TRANSFER ( v , self % valueStorage ) self % valueType = FTVALUECLASS_REAL END SUBROUTINE initWithReal ! !----------------------------------------------- !> Public, generic name: initwithValue() !> !> Initialize the value object with a double !> precision number !----------------------------------------------- ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initWithDoublePrecision ( self , v ) IMPLICIT NONE CLASS ( FTValue ) :: self DoublePrecision :: v INTEGER :: dataLength CALL self % FTObject % init dataLength = SIZE ( TRANSFER ( v , self % valueStorage )) ALLOCATE ( self % valueStorage ( dataLength )) self % valueStorage = TRANSFER ( v , self % valueStorage ) self % valueType = FTVALUECLASS_DOUBLE END SUBROUTINE initWithDoublePrecision ! !--------------------------------------------------- !> Public, generic name: initwithValue() !> !> Initialize the value object with a quad precision !> number !--------------------------------------------------- ! ! !//////////////////////////////////////////////////////////////////////// ! #ifdef _has_Quad SUBROUTINE initWithQuad ( self , v ) IMPLICIT NONE CLASS ( FTValue ) :: self REAL ( KIND = SELECTED_REAL_KIND ( QUAD_DIGITS )) :: v INTEGER :: dataLength CALL self % FTObject % init () dataLength = SIZE ( TRANSFER ( v , self % valueStorage )) ALLOCATE ( self % valueStorage ( dataLength )) self % valueStorage = TRANSFER ( v , self % valueStorage ) self % valueType = FTVALUECLASS_QUAD END SUBROUTINE initWithQuad #endif ! !----------------------------------------------- !> Public, generic name: initwithValue() !> !> Initialize the value object with an !> integer number !----------------------------------------------- ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initWithInteger ( self , v ) IMPLICIT NONE CLASS ( FTValue ) :: self INTEGER :: v INTEGER :: dataLength CALL self % FTObject % init dataLength = SIZE ( TRANSFER ( v , self % valueStorage )) ALLOCATE ( self % valueStorage ( dataLength )) self % valueStorage = TRANSFER ( v , self % valueStorage ) self % valueType = FTVALUECLASS_INTEGER END SUBROUTINE initWithInteger ! !----------------------------------------------- !> Public, generic name: initwithValue() !> !> Initialize the value object with a logical !----------------------------------------------- ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initWithLogical ( self , v ) IMPLICIT NONE CLASS ( FTValue ) :: self LOGICAL :: v INTEGER :: dataLength CALL self % FTObject % init dataLength = SIZE ( TRANSFER ( v , self % valueStorage )) ALLOCATE ( self % valueStorage ( dataLength )) self % valueStorage = TRANSFER ( v , self % valueStorage ) self % valueType = FTVALUECLASS_LOGICAL END SUBROUTINE initWithLogical ! !----------------------------------------------- !> Public, generic name: initwithValue() !> !> Initialize the value object with a string !----------------------------------------------- ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initWithString ( self , v ) IMPLICIT NONE CLASS ( FTValue ) :: self CHARACTER ( LEN =* ) :: v INTEGER :: dataLength CALL self % FTObject % init dataLength = LEN_TRIM ( v ) ALLOCATE ( self % valueStorage ( dataLength )) self % valueStorage = TRANSFER ( trim ( v ), self % valueStorage ) self % valueType = FTVALUECLASS_STRING END SUBROUTINE initWithString !@mark - ! !------------------------------------------------ !> Public, generic name: destruct() !> !> Destructor for the class. !------------------------------------------------ ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE destructValue ( self ) IMPLICIT NONE CLASS ( FTValue ) :: self CALL self % FTObject % destruct () END SUBROUTINE destructValue ! !------------------------------------------------ !> Public, generic name: release(self) !> !> Call release(self) on an object to release control !> of an object. If its reference count is zero, then !> it is deallocated. !------------------------------------------------ ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE releaseFTValue ( self ) IMPLICIT NONE CLASS ( FTValue ) , POINTER :: self CLASS ( FTObject ), POINTER :: obj IF (. NOT . ASSOCIATED ( self )) RETURN obj => self CALL releaseFTObject ( self = obj ) IF ( . NOT . ASSOCIATED ( obj ) ) THEN self => NULL () END IF END SUBROUTINE releaseFTValue !@mark - ! !--------------------------------------------------------------- !> Get the real value stored in the object, or convert the value !> in the object to a real if it is of a different type. !--------------------------------------------------------------- ! !//////////////////////////////////////////////////////////////////////// ! REAL FUNCTION realValue ( self ) IMPLICIT NONE CLASS ( FTValue ) :: self INTEGER :: iErr INTEGER :: i DOUBLE PRECISION :: d LOGICAL :: l CHARACTER ( LEN = FTVALUE_STRING_LENGTH ) :: s , tmpString SELECT CASE ( self % valueType ) CASE ( FTVALUECLASS_INTEGER ) i = TRANSFER ( self % valueStorage , i ) realValue = REAL ( i ) CASE ( FTVALUECLASS_DOUBLE ) d = TRANSFER ( self % valueStorage , d ) realValue = REAL ( d ) CASE ( FTVALUECLASS_REAL ) realValue = TRANSFER ( self % valueStorage , realValue ) CASE ( FTVALUECLASS_STRING ) tmpString = TRANSFER ( self % valueStorage , tmpString ) s = tmpString ( 1 : SIZE ( self % valueStorage )) READ ( s , * , IOSTAT = iErr ) realValue IF ( iErr /= 0 ) THEN realValue = IEEE_VALUE ( realValue , IEEE_QUIET_NAN ) END IF CASE ( FTVALUECLASS_LOGICAL ) l = TRANSFER ( self % valueStorage , l ) IF ( l ) THEN realValue = 1.0 ELSE realValue = 0.0 END IF END SELECT END FUNCTION realValue ! !--------------------------------------------------------------------------- !> Get the double precision value stored in the object, or convert the value !> in the object to a double precision if it is of a different type. !--------------------------------------------------------------------------- ! !//////////////////////////////////////////////////////////////////////// ! DOUBLE PRECISION FUNCTION doublePrecisionValue ( self ) IMPLICIT NONE CLASS ( FTValue ) :: self INTEGER :: iErr REAL :: r INTEGER :: i LOGICAL :: l CHARACTER ( LEN = FTVALUE_STRING_LENGTH ) :: s , tmpString SELECT CASE ( self % valueType ) CASE ( FTVALUECLASS_INTEGER ) i = TRANSFER ( self % valueStorage , i ) doublePrecisionValue = DBLE ( i ) CASE ( FTVALUECLASS_REAL ) r = TRANSFER ( self % valueStorage , r ) doublePrecisionValue = DBLE ( r ) CASE ( FTVALUECLASS_DOUBLE ) doublePrecisionValue = TRANSFER ( self % valueStorage , doublePrecisionValue ) CASE ( FTVALUECLASS_STRING ) tmpString = TRANSFER ( self % valueStorage , tmpString ) s = tmpString ( 1 : SIZE ( self % valueStorage )) READ ( s , * , IOSTAT = iErr ) doublePrecisionValue IF ( iErr /= 0 ) THEN doublePrecisionValue = IEEE_VALUE ( doublePrecisionValue , IEEE_QUIET_NAN ) END IF CASE ( FTVALUECLASS_LOGICAL ) l = TRANSFER ( self % valueStorage , l ) IF ( l ) THEN doublePrecisionValue = 1.0 d0 ELSE doublePrecisionValue = 0.0 d0 END IF END SELECT END FUNCTION doublePrecisionValue ! !--------------------------------------------------------------------------- !> Get the double precision value stored in the object, or convert the value !> in the object to a double precision if it is of a different type. !--------------------------------------------------------------------------- ! !//////////////////////////////////////////////////////////////////////// ! #ifdef _has_Quad DOUBLE PRECISION FUNCTION quadValue ( self ) IMPLICIT NONE CLASS ( FTValue ) :: self INTEGER :: iErr REAL :: r INTEGER :: i LOGICAL :: l CHARACTER ( LEN = FTVALUE_STRING_LENGTH ) :: s , tmpString SELECT CASE ( self % valueType ) CASE ( FTVALUECLASS_INTEGER ) i = TRANSFER ( self % valueStorage , i ) quadValue = REAL ( A = i , KIND = SELECTED_REAL_KIND ( QUAD_DIGITS )) CASE ( FTVALUECLASS_REAL ) r = TRANSFER ( self % valueStorage , r ) quadValue = REAL ( A = r , KIND = SELECTED_REAL_KIND ( QUAD_DIGITS )) CASE ( FTVALUECLASS_DOUBLE ) quadValue = TRANSFER ( self % valueStorage , quadValue ) CASE ( FTVALUECLASS_STRING ) tmpString = TRANSFER ( self % valueStorage , tmpString ) s = tmpString ( 1 : SIZE ( self % valueStorage )) READ ( s , * , IOSTAT = iErr ) quadValue IF ( iErr /= 0 ) THEN quadValue = IEEE_VALUE ( quadValue , IEEE_QUIET_NAN ) END IF CASE ( FTVALUECLASS_LOGICAL ) l = TRANSFER ( self % valueStorage , l ) IF ( l ) THEN quadValue = 1.0 ELSE quadValue = 0.0 END IF END SELECT END FUNCTION quadValue #endif ! !--------------------------------------------------------------------------- !> Get the integer value stored in the object, or convert the value !> in the object to an integer if it is of a different type. !--------------------------------------------------------------------------- ! !//////////////////////////////////////////////////////////////////////// ! INTEGER FUNCTION integerValue ( self ) IMPLICIT NONE CLASS ( FTValue ) :: self INTEGER :: iErr REAL :: r INTEGER :: i DOUBLE PRECISION :: d LOGICAL :: l CHARACTER ( LEN = FTVALUE_STRING_LENGTH ) :: s , tmpString SELECT CASE ( self % valueType ) CASE ( FTVALUECLASS_INTEGER ) integerValue = TRANSFER ( self % valueStorage , i ) CASE ( FTVALUECLASS_DOUBLE ) d = TRANSFER ( self % valueStorage , d ) integerValue = INT ( d ) CASE ( FTVALUECLASS_REAL ) r = TRANSFER ( self % valueStorage , r ) integerValue = INT ( r ) CASE ( FTVALUECLASS_STRING ) tmpString = TRANSFER ( self % valueStorage , tmpString ) s = tmpString ( 1 : SIZE ( self % valueStorage )) READ ( s , * , IOSTAT = iErr ) integerValue IF ( iErr /= 0 ) THEN integerValue = HUGE ( 1 ) END IF CASE ( FTVALUECLASS_LOGICAL ) l = TRANSFER ( self % valueStorage , l ) IF ( l ) THEN integerValue = 1 ELSE integerValue = 0 END IF END SELECT END FUNCTION integerValue ! !--------------------------------------------------------------------------- !> Get the logical value stored in the object, or convert the value !> in the object to a logical if it is of a different type. !--------------------------------------------------------------------------- ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION logicalValue ( self ) IMPLICIT NONE CLASS ( FTValue ) :: self REAL :: r INTEGER :: i DOUBLE PRECISION :: d LOGICAL :: l CHARACTER ( LEN = FTVALUE_STRING_LENGTH ) :: s , tmpString SELECT CASE ( self % valueType ) CASE ( FTVALUECLASS_INTEGER ) i = TRANSFER ( self % valueStorage , i ) IF ( i /= 0 ) THEN logicalValue = . true . ELSE logicalValue = . false . END IF CASE ( FTVALUECLASS_DOUBLE ) d = TRANSFER ( self % valueStorage , d ) IF ( d /= 0.0 d0 ) THEN logicalValue = . true . ELSE logicalValue = . false . END IF CASE ( FTVALUECLASS_REAL ) r = TRANSFER ( self % valueStorage , r ) IF ( r /= 0.0 ) THEN logicalValue = . true . ELSE logicalValue = . false . END IF CASE ( FTVALUECLASS_STRING ) tmpString = TRANSFER ( self % valueStorage , tmpString ) s = tmpString ( 1 : SIZE ( self % valueStorage )) IF ( TRIM ( s ) == \".true.\" . OR . TRIM ( s ) == \".false.\" . OR . & TRIM ( s ) == \".TRUE.\" . OR . TRIM ( s ) == \".FALSE.\" ) THEN READ ( s , * ) logicalValue ELSE logicalValue = . false . END IF CASE ( FTVALUECLASS_LOGICAL ) logicalValue = TRANSFER ( self % valueStorage , l ) END SELECT END FUNCTION logicalValue ! !--------------------------------------------------------------------------- !> Get the string value of length requestedLength stored in the object, or !> convert the value !> in the object to a string of that length if it is of a different type. !--------------------------------------------------------------------------- ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION stringValue ( self , requestedLength ) RESULT ( s ) IMPLICIT NONE CLASS ( FTValue ) :: self INTEGER :: requestedLength CHARACTER ( LEN = requestedLength ) :: s CHARACTER ( LEN = FTVALUE_STRING_LENGTH ) :: tmpString REAL :: r INTEGER :: i DOUBLE PRECISION :: d LOGICAL :: l SELECT CASE ( self % valueType ) CASE ( FTVALUECLASS_INTEGER ) i = TRANSFER ( self % valueStorage , i ) WRITE ( tmpString , * ) i s = TRIM ( ADJUSTL ( tmpString )) CASE ( FTVALUECLASS_DOUBLE ) d = TRANSFER ( self % valueStorage , d ) WRITE ( tmpString , * ) d s = TRIM ( ADJUSTL ( tmpString )) CASE ( FTVALUECLASS_REAL ) r = TRANSFER ( self % valueStorage , r ) WRITE ( tmpString , * ) r s = TRIM ( ADJUSTL ( tmpString )) CASE ( FTVALUECLASS_STRING ) tmpString = TRANSFER ( self % valueStorage , tmpString ) s = tmpString ( 1 : SIZE ( self % valueStorage )) CASE ( FTVALUECLASS_LOGICAL ) l = TRANSFER ( self % valueStorage , l ) IF ( l ) THEN s = \"TRUE\" ELSE s = \"FALSE\" END IF END SELECT END FUNCTION stringValue !@mark - ! !--------------------------------------------------------------------------- !> Returns the description of the value. In this case, it returns the !> stringValue() of the object. !--------------------------------------------------------------------------- ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION FTValueDescription ( self ) IMPLICIT NONE CLASS ( FTValue ) :: self CHARACTER ( LEN = DESCRIPTION_CHARACTER_LENGTH ) :: FTValueDescription FTValueDescription = self % stringValue ( DESCRIPTION_CHARACTER_LENGTH ) END FUNCTION FTValueDescription ! !--------------------------------------------------------------------------- !> Prints the description of the value to unit iUnit. In this case, it prints !> the stringValue() of the object. !--------------------------------------------------------------------------- ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE printValueDescription ( self , iUnit ) IMPLICIT NONE CLASS ( FTValue ) :: self INTEGER :: iUnit WRITE ( iUnit , * ) TRIM ( self % description ()) END SUBROUTINE printValueDescription ! !--------------------------------------------------------------------------- !> Generic Name: cast !> !> Cast a pointer to the base class to an FTValue pointer !--------------------------------------------------------------------------- ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE castToValue ( obj , cast ) ! !     ----------------------------------------------------- !     Cast the base class FTObject to the FTValue class !     ----------------------------------------------------- ! IMPLICIT NONE CLASS ( FTObject ), POINTER :: obj CLASS ( FTValue ) , POINTER :: cast cast => NULL () SELECT TYPE ( e => obj ) TYPE is ( FTValue ) cast => e CLASS DEFAULT END SELECT END SUBROUTINE castToValue ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION valueFromObject ( obj ) RESULT ( cast ) ! !     ----------------------------------------------------- !     Cast the base class FTObject to the FTValue class !     ----------------------------------------------------- ! IMPLICIT NONE CLASS ( FTObject ), POINTER :: obj CLASS ( FTValue ) , POINTER :: cast cast => NULL () SELECT TYPE ( e => obj ) TYPE is ( FTValue ) cast => e CLASS DEFAULT END SELECT END FUNCTION valueFromObject ! !//////////////////////////////////////////////////////////////////////// ! !      ----------------------------------------------------------------- !> Class name returns a string with the name of the type of the object !> !>  ### Usage: !> !>        PRINT *,  obj % className() !>        if( obj % className = \"FTValue\") !> FUNCTION valueClassName ( self ) RESULT ( s ) IMPLICIT NONE CLASS ( FTValue ) :: self CHARACTER ( LEN = CLASS_NAME_CHARACTER_LENGTH ) :: s s = \"FTValue\" END FUNCTION valueClassName END MODULE FTValueClass","tags":"","loc":"sourcefile/ftvalueclass.f90.html","title":"FTValueClass.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~ftvaluedictionaryclass.f90~~EfferentGraph sourcefile~ftvaluedictionaryclass.f90 FTValueDictionaryClass.f90 sourcefile~ftdictionaryclass.f90 FTDictionaryClass.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftvaluedictionaryclass.f90 sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~ftvalueclass.f90->sourcefile~ftvaluedictionaryclass.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftvalueclass.f90 sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~ftvalueclass.f90 var pansourcefileftvaluedictionaryclassf90EfferentGraph = svgPanZoom('#sourcefileftvaluedictionaryclassf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~ftvaluedictionaryclass.f90~~AfferentGraph sourcefile~ftvaluedictionaryclass.f90 FTValueDictionaryClass.f90 sourcefile~ftobjectlibrary.f90 FTObjectLibrary.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~valuedictionarytests.f90 ValueDictionaryTests.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~valuedictionarytests.f90 sourcefile~ftexceptionclass.f90 FTExceptionClass.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~exceptiontests.f90 ExceptionTests.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~exceptiontests.f90 sourcefile~ftexceptionclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~ftexceptionclass.f90->sourcefile~exceptiontests.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules FTValueDictionaryClass Source Code FTValueDictionaryClass.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      FTValueDictionary.f90 !      Created: February 6, 2013 8:54 AM !      By: David Kopriva ! !> !> The FTValueDictionary subclass of FTDictionary adds convenient methods !> to easily add fundamental (Real, integer,…) values to a dictionary. !> !> As a subclass, all other methods are still available. !> !>#Usage: !>#Adding a value !> !>     CALL dict % addValueForKey(1,\"integer\") !>     CALL dict % addValueForKey(3.14,\"real\") !>     CALL dict % addValueForKey(98.6d0,\"double\") !>     CALL dict % addValueForKey(.true.,\"logical\") !>     CALL dict % addValueForKey(\"Hello World\",\"string\") !>#Accessing a value !>     i = dict % integerValueForKey(\"integer\") !>     r = dict % realValueForKey(\"real\") !>     d = dict % doublePrecisionValueForKey(\"double\") !>     l = dict % logicalValueForKey(\"logical\") !>     s = dict % stringValueForKey(\"string\",15) !>#Converting an FTDictionary to an FTValueDictionary !>            valueDict => valueDictionaryFromDictionary(dict) !>#Converting an FTObject to an FTValueDictionary !>            valueDict => valueDictionaryFromObject(obj) ! !//////////////////////////////////////////////////////////////////////// ! Module FTValueDictionaryClass USE ISO_FORTRAN_ENV USE FTDictionaryClass USE FTValueClass IMPLICIT NONE TYPE , EXTENDS ( FTDictionary ) :: FTValueDictionary ! !        -------- CONTAINS !        -------- ! !        ------- !        Setters !        ------- ! PROCEDURE , PRIVATE :: addRealValueForKey PROCEDURE , PRIVATE :: addDoublePrecisionValueForKey PROCEDURE , PRIVATE :: addIntegerValueForKey PROCEDURE , PRIVATE :: addStringValueForKey PROCEDURE , PRIVATE :: addLogicalValueForKey GENERIC , PUBLIC :: addValueForKey => addRealValueForKey , & addDoublePrecisionValueForKey , & addIntegerValueForKey , & addStringValueForKey , & addLogicalValueForKey #ifdef _has_Quad PROCEDURE , PRIVATE :: addQuadValueForKey GENERIC , PUBLIC :: addValueForKey => addQuadValueForKey #endif ! !        ------- !        Getters !        ------- ! PROCEDURE :: realValueForKey PROCEDURE :: doublePrecisionValueForKey #ifdef _has_Quad PROCEDURE :: quadValueForKey #endif PROCEDURE :: integerValueForKey PROCEDURE :: stringValueForKey PROCEDURE :: logicalValueForKey ! !        ------------- !        Introspection !        ------------- ! PROCEDURE :: className => valueDictionaryClassName END TYPE FTValueDictionary ! INTERFACE release MODULE PROCEDURE releaseFTValueDictionary END INTERFACE !      INTERFACE cast !         MODULE PROCEDURE castObjectToValueDictionary !      END INTERFACE cast ! CONTAINS !@mark - ! !------------------------------------------------ !> Public, generic name: release(self) !> !> Call release(self) on an object to release control !> of an object. If its reference count is zero, then !> it is deallocated. !------------------------------------------------ ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE releaseFTValueDictionary ( self ) IMPLICIT NONE TYPE ( FTValueDictionary ) , POINTER :: self CLASS ( FTObject ) , POINTER :: obj IF (. NOT . ASSOCIATED ( self )) RETURN obj => self CALL releaseFTObject ( self = obj ) IF ( . NOT . ASSOCIATED ( obj ) ) THEN self => NULL () END IF END SUBROUTINE releaseFTValueDictionary ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE addIntegerValueForKey ( self , i , key ) IMPLICIT NONE CLASS ( FTValueDictionary ) :: self INTEGER :: i CHARACTER ( LEN =* ) :: key CLASS ( FTValue ), POINTER :: v => NULL () CLASS ( FTObject ), POINTER :: obj => NULL () ALLOCATE ( v ) CALL v % initWithValue ( i ) obj => v CALL self % addObjectforKey ( obj , key ) CALL release ( v ) END SUBROUTINE addIntegerValueForKey ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE addRealValueForKey ( self , r , key ) IMPLICIT NONE CLASS ( FTValueDictionary ) :: self REAL :: r CHARACTER ( LEN =* ) :: key CLASS ( FTValue ), POINTER :: v => NULL () CLASS ( FTObject ), POINTER :: obj => NULL () ALLOCATE ( v ) CALL v % initWithValue ( r ) obj => v CALL self % addObjectforKey ( obj , key ) CALL release ( v ) END SUBROUTINE addRealValueForKey ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE addDoublePrecisionValueForKey ( self , r , key ) IMPLICIT NONE CLASS ( FTValueDictionary ) :: self DOUBLE PRECISION :: r CHARACTER ( LEN =* ) :: key CLASS ( FTValue ), POINTER :: v => NULL () CLASS ( FTObject ), POINTER :: obj => NULL () ALLOCATE ( v ) CALL v % initWithValue ( r ) obj => v CALL self % addObjectforKey ( obj , key ) CALL release ( v ) END SUBROUTINE addDoublePrecisionValueForKey ! !//////////////////////////////////////////////////////////////////////// ! #ifdef _has_Quad SUBROUTINE addQuadValueForKey ( self , r , key ) IMPLICIT NONE CLASS ( FTValueDictionary ) :: self REAL ( KIND = SELECTED_REAL_KIND ( QUAD_DIGITS )) :: r CHARACTER ( LEN =* ) :: key CLASS ( FTValue ), POINTER :: v => NULL () CLASS ( FTObject ), POINTER :: obj => NULL () ALLOCATE ( v ) CALL v % initWithValue ( r ) obj => v CALL self % addObjectforKey ( obj , key ) CALL release ( v ) END SUBROUTINE addQuadValueForKey #endif ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE addStringValueForKey ( self , s , key ) IMPLICIT NONE CLASS ( FTValueDictionary ) :: self CHARACTER ( LEN =* ) :: s CHARACTER ( LEN =* ) :: key CLASS ( FTValue ), POINTER :: v => NULL () CLASS ( FTObject ), POINTER :: obj => NULL () ALLOCATE ( v ) CALL v % initWithValue ( s ) obj => v CALL self % addObjectforKey ( obj , key ) CALL release ( v ) END SUBROUTINE addStringValueForKey ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE addLogicalValueForKey ( self , l , key ) IMPLICIT NONE CLASS ( FTValueDictionary ) :: self LOGICAL :: l CHARACTER ( LEN =* ) :: key CLASS ( FTValue ), POINTER :: v => NULL () CLASS ( FTObject ), POINTER :: obj => NULL () ALLOCATE ( v ) CALL v % initWithValue ( l ) obj => v CALL self % addObjectforKey ( obj , key ) CALL release ( v ) END SUBROUTINE addLogicalValueForKey !@mark - ! !//////////////////////////////////////////////////////////////////////// ! REAL FUNCTION realValueForKey ( self , key ) IMPLICIT NONE CLASS ( FTValueDictionary ) :: self CHARACTER ( LEN =* ) :: key CLASS ( FTValue ) , POINTER :: v => NULL () CLASS ( FTObject ), POINTER :: obj => NULL () obj => self % objectForKey ( key ) IF ( ASSOCIATED ( obj ) ) THEN v => valueFromObject ( obj ) realValueForKey = v % realValue () ELSE realValueForKey = HUGE ( realValueForKey ) END IF END FUNCTION realValueForKey ! !//////////////////////////////////////////////////////////////////////// ! INTEGER FUNCTION integerValueForKey ( self , key ) IMPLICIT NONE CLASS ( FTValueDictionary ) :: self CHARACTER ( LEN =* ) :: key CLASS ( FTValue ) , POINTER :: v => NULL () CLASS ( FTObject ), POINTER :: obj => NULL () obj => self % objectForKey ( key ) IF ( ASSOCIATED ( obj ) ) THEN v => valueFromObject ( obj ) integerValueForKey = v % integerValue () ELSE integerValueForKey = HUGE ( integerValueForKey ) END IF END FUNCTION integerValueForKey ! !//////////////////////////////////////////////////////////////////////// ! DOUBLE PRECISION FUNCTION doublePrecisionValueForKey ( self , key ) IMPLICIT NONE CLASS ( FTValueDictionary ) :: self CHARACTER ( LEN =* ) :: key CLASS ( FTValue ) , POINTER :: v => NULL () CLASS ( FTObject ), POINTER :: obj => NULL () obj => self % objectForKey ( key ) IF ( ASSOCIATED ( obj ) ) THEN v => valueFromObject ( obj ) doublePrecisionValueForKey = v % doublePrecisionValue () ELSE doublePrecisionValueForKey = HUGE ( doublePrecisionValueForKey ) END IF END FUNCTION doublePrecisionValueForKey ! !//////////////////////////////////////////////////////////////////////// ! #ifdef _has_Quad REAL ( KIND = SELECTED_REAL_KIND ( QUAD_DIGITS )) FUNCTION quadValueForKey ( self , key ) IMPLICIT NONE CLASS ( FTValueDictionary ) :: self CHARACTER ( LEN =* ) :: key CLASS ( FTValue ) , POINTER :: v => NULL () CLASS ( FTObject ), POINTER :: obj => NULL () obj => self % objectForKey ( key ) IF ( ASSOCIATED ( obj ) ) THEN v => valueFromObject ( obj ) quadValueForKey = v % quadValue () ELSE quadValueForKey = HUGE ( quadValueForKey ) END IF END FUNCTION quadValueForKey #endif ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION logicalValueForKey ( self , key ) IMPLICIT NONE CLASS ( FTValueDictionary ) :: self CHARACTER ( LEN =* ) :: key CLASS ( FTValue ) , POINTER :: v => NULL () CLASS ( FTObject ), POINTER :: obj => NULL () obj => self % objectForKey ( key ) IF ( ASSOCIATED ( obj ) ) THEN v => valueFromObject ( obj ) logicalValueForKey = v % logicalValue () ELSE logicalValueForKey = . FALSE . END IF END FUNCTION logicalValueForKey ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION stringValueForKey ( self , key , requestedLength ) IMPLICIT NONE CLASS ( FTValueDictionary ) :: self CHARACTER ( LEN =* ) :: key INTEGER :: requestedLength CHARACTER ( LEN = requestedLength ) :: stringValueForKey CLASS ( FTValue ) , POINTER :: v => NULL () CLASS ( FTObject ), POINTER :: obj => NULL () obj => self % objectForKey ( key ) IF ( ASSOCIATED ( obj ) ) THEN v => valueFromObject ( obj ) stringValueForKey = v % stringValue ( requestedLength ) ELSE stringValueForKey = \"\" END IF END FUNCTION stringValueForKey !@mark - ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE castDictionaryToValueDictionary ( dict , valueDict ) ! !     ----------------------------------------------------- !     Cast the base class FTObject to the FTException class !     ----------------------------------------------------- ! IMPLICIT NONE CLASS ( FTDictionary ) , POINTER :: dict CLASS ( FTValueDictionary ), POINTER :: valueDict valueDict => NULL () SELECT TYPE ( dict ) TYPE is ( FTValueDictionary ) valueDict => dict CLASS DEFAULT END SELECT END SUBROUTINE castDictionaryToValueDictionary ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE castObjectToValueDictionary ( obj , valueDict ) ! !     ----------------------------------------------------------- !     Cast the base class FTObject to the FTValueDictionary class !     ----------------------------------------------------------- ! IMPLICIT NONE CLASS ( FTValueDictionary ), POINTER :: valueDict CLASS ( FTObject ) , POINTER :: obj obj => NULL () SELECT TYPE ( obj ) TYPE is ( FTValueDictionary ) valueDict => obj CLASS DEFAULT END SELECT END SUBROUTINE castObjectToValueDictionary ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION valueDictionaryFromDictionary ( dict ) RESULT ( valueDict ) ! !     ----------------------------------------------------- !     Cast the base class FTObject to the FTException class !     ----------------------------------------------------- ! IMPLICIT NONE CLASS ( FTDictionary ) , POINTER :: dict CLASS ( FTValueDictionary ), POINTER :: valueDict valueDict => NULL () SELECT TYPE ( dict ) TYPE is ( FTValueDictionary ) valueDict => dict CLASS DEFAULT END SELECT END FUNCTION valueDictionaryFromDictionary ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION valueDictionaryFromObject ( obj ) RESULT ( valueDict ) ! !     ----------------------------------------------------------- !     Cast the base class FTObject to the FTValueDictionary class !     ----------------------------------------------------------- ! IMPLICIT NONE CLASS ( FTValueDictionary ), POINTER :: valueDict CLASS ( FTObject ) , POINTER :: obj obj => NULL () SELECT TYPE ( obj ) TYPE is ( FTValueDictionary ) valueDict => obj CLASS DEFAULT END SELECT END FUNCTION valueDictionaryFromObject ! !//////////////////////////////////////////////////////////////////////// ! !      ----------------------------------------------------------------- !> Class name returns a string with the name of the type of the object !> !>  ### Usage: !> !>        PRINT *,  obj % className() !>        if( obj % className = \"FTValueDictionary\") !> FUNCTION valueDictionaryClassName ( self ) RESULT ( s ) IMPLICIT NONE CLASS ( FTValueDictionary ) :: self CHARACTER ( LEN = CLASS_NAME_CHARACTER_LENGTH ) :: s s = \"FTValueDictionary\" END FUNCTION valueDictionaryClassName END Module FTValueDictionaryClass","tags":"","loc":"sourcefile/ftvaluedictionaryclass.f90.html","title":"FTValueDictionaryClass.f90 – FTObjectLibrary"},{"text":"Functions b3hs_hash_key_jenkins Source Code Hash.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      hash !      Created: January 28, 2013 12:39 PM !      By: David Kopriva ! !      Code by Rich Townsend, 2005 !      See: https://groups.google.com/forum/#!topic/comp.lang.fortran/RWoHZFt39ng ! !//////////////////////////////////////////////////////////////////////// ! function b3hs_hash_key_jenkins ( key , range ) result ( code ) INTEGER , PARAMETER :: KIND_I32 = SELECTED_INT_KIND ( 10 ) character ( * ), intent ( in ) :: key integer , intent ( in ) :: range integer :: code integer :: len_key integer ( KIND_I32 ) :: a integer ( KIND_I32 ) :: b integer ( KIND_I32 ) :: c INTEGER :: c_i integer :: k ! Hash the key into a code, using the algorithm ! described by Bob Jenkins at: !  http://burtleburtle.net/bob/hash/doobs.html ! ! Note that range should be a power of 2, and ! that the 32-bit algorithm is used len_key = LEN_TRIM ( key ) a = - 1640531527_KIND_I32 ! 0x9E3779B9 b = a c = 305419896_KIND_I32 ! 0x12345678 k = 1 char_loop : do if ( len_key < 12 ) exit char_loop ! Pack the key into 32 bits a = a + ICHAR ( key ( k + 0 : k + 0 )) + ISHFT ( ICHAR ( key ( k + 1 : k + 1 )), 8 ) + & & ISHFT ( ICHAR ( key ( k + 2 : k + 2 )), 16 ) + ISHFT ( ICHAR ( key ( k + 3 : k + 3 )), 24 ) b = b + ICHAR ( key ( k + 4 : k + 4 )) + ISHFT ( ICHAR ( key ( k + 5 : k + 5 )), 8 ) + & & ISHFT ( ICHAR ( key ( k + 6 : k + 6 )), 16 ) + ISHFT ( ICHAR ( key ( k + 7 : k + 7 )), 24 ) c = c + ICHAR ( key ( k + 8 : k + 8 )) + ISHFT ( ICHAR ( key ( k + 9 : k + 9 )), 8 ) + & & ISHFT ( ICHAR ( key ( k + 10 : k + 10 )), 16 ) + ISHFT ( ICHAR ( key ( k + 11 : k + 11 )), 24 ) ! Mix it up call b3hs_hash_key_jenkins_mix_ () k = k + 12 len_key = len_key - 12 end do char_loop c = c + len_key ! Process remaining bits select case ( len_key ) case ( 11 ) c = c + ISHFT ( ICHAR ( key ( k + 10 : k + 10 )), 24 ) + ISHFT ( ICHAR ( key ( k + 9 : k + 9 )), 16 ) + & & ISHFT ( ICHAR ( key ( k + 8 : k + 8 )), 8 ) b = b + ISHFT ( ICHAR ( key ( k + 7 : k + 7 )), 24 ) + ISHFT ( ICHAR ( key ( k + 6 : k + 6 )), 16 ) + & & ISHFT ( ICHAR ( key ( k + 5 : k + 5 )), 8 ) + ICHAR ( key ( k + 4 : k + 4 )) a = a + ISHFT ( ICHAR ( key ( k + 3 : k + 3 )), 24 ) + ISHFT ( ICHAR ( key ( k + 2 : k + 2 )), 16 ) + & & ISHFT ( ICHAR ( key ( k + 1 : k + 1 )), 8 ) + ICHAR ( key ( k : k )) case ( 10 ) c = c + ISHFT ( ICHAR ( key ( k + 9 : k + 9 )), 16 ) + ISHFT ( ICHAR ( key ( k + 8 : k + 8 )), 8 ) b = b + ISHFT ( ICHAR ( key ( k + 7 : k + 7 )), 24 ) + ISHFT ( ICHAR ( key ( k + 6 : k + 6 )), 16 ) + & & ISHFT ( ICHAR ( key ( k + 5 : k + 5 )), 8 ) + ICHAR ( key ( k + 4 : k + 4 )) a = a + ISHFT ( ICHAR ( key ( k + 3 : k + 3 )), 24 ) + ISHFT ( ICHAR ( key ( k + 2 : k + 2 )), 16 ) + & & ISHFT ( ICHAR ( key ( k + 1 : k + 1 )), 8 ) + ICHAR ( key ( k : k )) case ( 9 ) c = c + ISHFT ( ICHAR ( key ( k + 8 : k + 8 )), 8 ) b = b + ISHFT ( ICHAR ( key ( k + 7 : k + 7 )), 24 ) + ISHFT ( ICHAR ( key ( k + 6 : k + 6 )), 16 ) + & & ISHFT ( ICHAR ( key ( k + 5 : k + 5 )), 8 ) + ICHAR ( key ( k + 4 : k + 4 )) a = a + ISHFT ( ICHAR ( key ( k + 3 : k + 3 )), 24 ) + ISHFT ( ICHAR ( key ( k + 2 : k + 2 )), 16 ) + & & ISHFT ( ICHAR ( key ( k + 1 : k + 1 )), 8 ) + ICHAR ( key ( k : k )) case ( 8 ) b = b + ISHFT ( ICHAR ( key ( k + 7 : k + 7 )), 24 ) + ISHFT ( ICHAR ( key ( k + 6 : k + 6 )), 16 ) + & & ISHFT ( ICHAR ( key ( k + 5 : k + 5 )), 8 ) + ICHAR ( key ( k + 4 : k + 4 )) a = a + ISHFT ( ICHAR ( key ( k + 3 : k + 3 )), 24 ) + ISHFT ( ICHAR ( key ( k + 2 : k + 2 )), 16 ) + & & ISHFT ( ICHAR ( key ( k + 1 : k + 1 )), 8 ) + ICHAR ( key ( k : k )) case ( 7 ) b = b + ISHFT ( ICHAR ( key ( k + 6 : k + 6 )), 16 ) + ISHFT ( ICHAR ( key ( k + 5 : k + 5 )), 8 ) + & & ICHAR ( key ( k + 4 : k + 4 )) a = a + ISHFT ( ICHAR ( key ( k + 3 : k + 3 )), 24 ) + ISHFT ( ICHAR ( key ( k + 2 : k + 2 )), 16 ) + & & ISHFT ( ICHAR ( key ( k + 1 : k + 1 )), 8 ) + ICHAR ( key ( k : k )) case ( 6 ) b = b + ISHFT ( ICHAR ( key ( k + 5 : k + 5 )), 8 ) + ICHAR ( key ( k + 4 : k + 4 )) a = a + ISHFT ( ICHAR ( key ( k + 3 : k + 3 )), 24 ) + ISHFT ( ICHAR ( key ( k + 2 : k + 2 )), 16 ) + & & ISHFT ( ICHAR ( key ( k + 1 : k + 1 )), 8 ) + ICHAR ( key ( k : k )) case ( 5 ) b = b + ICHAR ( key ( k + 4 : k + 4 )) a = a + ISHFT ( ICHAR ( key ( k + 3 : k + 3 )), 24 ) + ISHFT ( ICHAR ( key ( k + 2 : k + 2 )), 16 ) + & & ISHFT ( ICHAR ( key ( k + 1 : k + 1 )), 8 ) + ICHAR ( key ( k : k )) case ( 4 ) a = a + ISHFT ( ICHAR ( key ( k + 3 : k + 3 )), 24 ) + ISHFT ( ICHAR ( key ( k + 2 : k + 2 )), 16 ) + & & ISHFT ( ICHAR ( key ( k + 1 : k + 1 )), 8 ) + ICHAR ( key ( k : k )) case ( 3 ) a = a + ISHFT ( ICHAR ( key ( k + 2 : k + 2 )), 16 ) + ISHFT ( ICHAR ( key ( k + 1 : k + 1 )), 8 ) + & & ICHAR ( key ( k : k )) case ( 2 ) a = a + ISHFT ( ICHAR ( key ( k + 1 : k + 1 )), 8 ) + ICHAR ( key ( k : k )) case ( 1 ) a = a + ICHAR ( key ( k : k )) end select call b3hs_hash_key_jenkins_mix_ () c_i = INT ( c ) code = IAND ( c_i , RANGE - 1 ) + 1 ! Finish return contains subroutine b3hs_hash_key_jenkins_mix_ ! Mix a, b and c a = IEOR ( a - b - c , ISHFT ( c , - 13 )) b = IEOR ( b - c - a , ISHFT ( a , 8 )) c = IEOR ( c - a - b , ISHFT ( b , - 13 )) a = IEOR ( a - b - c , ISHFT ( c , - 12 )) b = IEOR ( b - c - a , ISHFT ( a , 16 )) c = IEOR ( c - a - b , ISHFT ( b , - 5 )) a = IEOR ( a - b - c , ISHFT ( c , - 3 )) b = IEOR ( b - c - a , ISHFT ( a , 10 )) c = IEOR ( c - a - b , ISHFT ( b , - 15 )) ! Finish return end subroutine b3hs_hash_key_jenkins_mix_ end function b3hs_hash_key_jenkins","tags":"","loc":"sourcefile/hash.f90.html","title":"Hash.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~assert.f90~~EfferentGraph sourcefile~assert.f90 Assert.f90 sourcefile~comparisons.f90 Comparisons.f90 sourcefile~comparisons.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90->sourcefile~comparisons.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~assert.f90~~AfferentGraph sourcefile~assert.f90 Assert.f90 sourcefile~sparsematrixtests.f90 SparseMatrixTests.f90 sourcefile~assert.f90->sourcefile~sparsematrixtests.f90 sourcefile~dictionarytests.f90 DictionaryTests.f90 sourcefile~assert.f90->sourcefile~dictionarytests.f90 sourcefile~stackstests.f90 StacksTests.f90 sourcefile~assert.f90->sourcefile~stackstests.f90 sourcefile~ftobjectlibrary.f90 FTObjectLibrary.f90 sourcefile~assert.f90->sourcefile~ftobjectlibrary.f90 sourcefile~hashtabletests.f90 HashTableTests.f90 sourcefile~assert.f90->sourcefile~hashtabletests.f90 sourcefile~valuedictionarytests.f90 ValueDictionaryTests.f90 sourcefile~assert.f90->sourcefile~valuedictionarytests.f90 sourcefile~linkedlisttests.f90 LinkedListTests.f90 sourcefile~assert.f90->sourcefile~linkedlisttests.f90 sourcefile~valueclasstests.f90 ValueClassTests.f90 sourcefile~assert.f90->sourcefile~valueclasstests.f90 sourcefile~multiindextabletests.f90 MultiIndexTableTests.f90 sourcefile~assert.f90->sourcefile~multiindextabletests.f90 sourcefile~exceptiontests.f90 ExceptionTests.f90 sourcefile~assert.f90->sourcefile~exceptiontests.f90 sourcefile~testsuitemanagerclass.f90 TestSuiteManagerClass.f90 sourcefile~assert.f90->sourcefile~testsuitemanagerclass.f90 sourcefile~mutablearraytests.f90 MutableArrayTests.f90 sourcefile~assert.f90->sourcefile~mutablearraytests.f90 sourcefile~testsuitemanagerclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~testmain.f90 TestMain.f90 sourcefile~testsuitemanagerclass.f90->sourcefile~testmain.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules FTAssertions Source Code Assert.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! ! Assert.f90 ! Created: February 21, 2013 2:34 PM ! By: David Kopriva ! !> Assertions are functions that return true or false !> that can be placed in a program to test whether !> a predicate is true. !> !> To use the assertions module, it must be initialized, !> usually in the main program. When it is no longer needed, !> it is finalized. Assertions are posted to the module as they !> are called, and can be summarized later at an appropriate time. !> !>### Initialization ### !> !>      CALL initializeSharedAssertionsManager !> !>### Finalization ### !> !>      CALL finalizeSharedAssertionsManager !> !>### Asserting ### !> !>      CALL FTAssertEqual(expectedValue,resultValue,message) !> !>### Summarizing Assertions ### !> !>      CALL SummarizeFTAssertions(title,unit) !> !>### Additional enquiry functions ### !> !>      INTEGER :: nf, nA !>       nF = numberOfAssertionFailures() !>       nA = numberOfAssertions() ! ! !//////////////////////////////////////////////////////////////////////// ! Module FTAssertions USE ComparisonsModule USE FTOLConstants USE ISO_FORTRAN_ENV IMPLICIT NONE PRIVATE ! !     ------ !     Public !     ------ ! INTEGER , PARAMETER , PUBLIC :: FT_ASSERTION_STRING_LENGTH = 128 TYPE FTAssertionsManager PRIVATE INTEGER :: numberOfTests_ INTEGER :: numberOfAssertionFailures_ TYPE ( FTAssertionFailureRecord ), POINTER :: failureListHead => NULL () TYPE ( FTAssertionFailureRecord ), POINTER :: failureListTail => NULL () ! !        ======== CONTAINS !        ======== ! PROCEDURE , PUBLIC :: init PROCEDURE , PUBLIC :: finalize PROCEDURE , PUBLIC :: numberOfAssertionFailures PROCEDURE , PUBLIC :: numberOfAssertions PROCEDURE , PUBLIC :: summarizeAssertions END TYPE FTAssertionsManager PUBLIC :: FTAssertionsManager INTERFACE FTAssertEqual MODULE PROCEDURE assertEqualTwoIntegers MODULE PROCEDURE assertEqualTwoIntegerArrays1D MODULE PROCEDURE assertEqualTwoIntegerArrays2D MODULE PROCEDURE assertWithinToleranceTwoReal MODULE PROCEDURE assertWithinToleranceTwoRealArrays1D MODULE PROCEDURE assertWithinToleranceTwoRealArrays2D MODULE PROCEDURE assertWithinToleranceTwoDouble MODULE PROCEDURE assertWithinToleranceTwoDoubleArrays1D MODULE PROCEDURE assertWithinToleranceTwoDoubleArrays2D #ifdef _has_Quad MODULE PROCEDURE assertWithinToleranceTwoQuad #endif MODULE PROCEDURE assertEqualTwoLogicals MODULE PROCEDURE assertEqualString END INTERFACE FTAssertEqual PUBLIC :: FTAssertEqual #ifdef _has_Quad PUBLIC :: assertWithinToleranceTwoQuad #endif PUBLIC :: initializeSharedAssertionsManager , finalizeSharedAssertionsManager PUBLIC :: FTAssert , sharedAssertionsManager , numberOfAssertionFailures , numberOfAssertions PUBLIC :: detachSharedAssertionsManager ! !     ------- !     Private !     ------- ! TYPE FTAssertionFailureRecord CHARACTER ( LEN = FT_ASSERTION_STRING_LENGTH ) :: msg , expected , actual CHARACTER ( LEN = FT_ASSERTION_STRING_LENGTH ) :: assertionType TYPE ( FTAssertionFailureRecord ), POINTER :: next END TYPE FTAssertionFailureRecord ! !     ------------------------- !     Shared Assertions manager !     ------------------------- ! TYPE ( FTAssertionsManager ), POINTER , PRIVATE :: sharedManager ! !     ======== CONTAINS !     ======== !@mark - ! !//////////////////////////////////////////////////////////////////////// ! FUNCTION sharedAssertionsManager () IMPLICIT NONE TYPE ( FTAssertionsManager ), POINTER :: sharedAssertionsManager sharedAssertionsManager => sharedManager END FUNCTION sharedAssertionsManager ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE detachSharedAssertionsManager IMPLICIT NONE ! !     -------------------------------------------------------------------------- !     To create a new sharedAssertionsManager, !     call this procedure after storing a pointer to the sharedAssertionsManager !     and before initializing again. !     -------------------------------------------------------------------------- ! sharedManager => NULL () END SUBROUTINE detachSharedAssertionsManager ! !//////////////////////////////////////////////////////////////////////// ! INTEGER FUNCTION numberOfAssertions ( self ) IMPLICIT NONE CLASS ( FTAssertionsManager ) :: self numberOfAssertions = self % numberOfTests_ END FUNCTION numberOfAssertions ! !//////////////////////////////////////////////////////////////////////// ! INTEGER FUNCTION numberOfAssertionFailures ( self ) IMPLICIT NONE CLASS ( FTAssertionsManager ) :: self numberOfAssertionFailures = self % numberOfAssertionFailures_ END FUNCTION numberOfAssertionFailures ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE init ( self ) IMPLICIT NONE CLASS ( FTAssertionsManager ) :: self self % numberOfTests_ = 0 self % numberOfAssertionFailures_ = 0 NULLIFY ( self % failureListHead , self % failureListTail ) END SUBROUTINE init ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE finalize ( self ) IMPLICIT NONE CLASS ( FTAssertionsManager ) :: self TYPE ( FTAssertionFailureRecord ), POINTER :: tmp , current IF ( . NOT . ASSOCIATED ( self % failureListHead ) ) RETURN ! !        ------------------------------ !        Delete linked list of failures !        ------------------------------ ! current => self % failureListHead DO WHILE ( ASSOCIATED ( tmp )) tmp => current % next DEALLOCATE ( current ) current => tmp END DO self % numberOfTests_ = 0 self % numberOfAssertionFailures_ = 0 NULLIFY ( self % failureListHead , self % failureListTail ) END SUBROUTINE finalize ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initializeSharedAssertionsManager IMPLICIT NONE ! !        -------------------------------------------------- !        The manager is allowed only once to be initialized !        per run. !        -------------------------------------------------- ! IF ( ASSOCIATED ( sharedManager ) ) RETURN ALLOCATE ( sharedManager ) CALL sharedManager % init () END SUBROUTINE initializeSharedAssertionsManager ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE finalizeSharedAssertionsManager IMPLICIT NONE IF ( ASSOCIATED ( sharedManager )) CALL sharedManager % finalize () END SUBROUTINE finalizeSharedAssertionsManager ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE addAssertionFailureForParameters ( msg , expected , actual , assertionType ) IMPLICIT NONE CHARACTER ( LEN =* ) :: msg , expected , actual , assertionType TYPE ( FTAssertionFailureRecord ), POINTER :: newFailure ALLOCATE ( newFailure ) newFailure % msg = TRIM ( msg ) newFailure % expected = TRIM ( ADJUSTL ( expected )) newFailure % actual = TRIM ( ADJUSTL ( actual )) newFailure % assertionType = assertionType newFailure % next => NULL () IF ( ASSOCIATED ( sharedManager % failureListTail ) ) THEN sharedManager % failureListTail % next => newFailure sharedManager % failureListTail => sharedManager % failureListTail % next ELSE sharedManager % failureListHead => newFailure sharedManager % failureListTail => newFailure END IF sharedManager % numberOfAssertionFailures_ = sharedManager % numberOfAssertionFailures_ + 1 END SUBROUTINE addAssertionFailureForParameters ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE summarizeAssertions ( self , title , iUnit ) IMPLICIT NONE CLASS ( FTAssertionsManager ) :: self CHARACTER ( LEN =* ) :: title INTEGER :: iUnit TYPE ( FTAssertionFailureRecord ), POINTER :: current WRITE ( iUnit , * ) WRITE ( iUnit , * ) \"   -------------------------------------------------------------\" WRITE ( iUnit , * ) \"   Summary of failed tests for test suite: \" , TRIM ( title ) WRITE ( iUnit , '(3x,i3,A,i5,A)' ) self % numberOfAssertionFailures (), \" failures out of \" , & self % numberOfAssertions (), \" assertions.\" WRITE ( iUnit , * ) \"   -------------------------------------------------------------\" current => self % failureListHead DO WHILE ( ASSOCIATED ( current )) WRITE ( iUnit , * ) \"   \" , TRIM ( current % assertionType ) WRITE ( iUnit , * ) \"      \" , TRIM ( current % msg ) WRITE ( iUnit , * ) \"      \" , \"Expected [\" , TRIM ( current % expected ),& \"], Got [\" , TRIM ( current % actual ), \"]\" current => current % next END DO WRITE ( iUnit , * ) END SUBROUTINE summarizeAssertions !@mark - ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE FTAssert ( test , msg ) IMPLICIT NONE CHARACTER ( LEN =* ), OPTIONAL :: msg LOGICAL :: test IF (. NOT . ASSOCIATED ( sharedManager )) THEN CALL initializeSharedAssertionsManager END IF sharedManager % numberOfTests_ = sharedManager % numberOfTests_ + 1 IF ( . NOT . test ) THEN IF ( PRESENT ( msg ) ) THEN CALL addAssertionFailureForParameters ( msg , \"True\" , \"False\" , \"Logical assertion failed: \" ) ELSE CALL addAssertionFailureForParameters ( \"\" , \"True\" , \"False\" , \"Logical assertion failed: \" ) END IF END IF END SUBROUTINE FTAssert !@mark - ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE assertEqualTwoIntegers ( expectedValue , actualValue , msg ) IMPLICIT NONE INTEGER , INTENT ( in ) :: expectedValue , actualValue CHARACTER ( LEN =* ), OPTIONAL :: msg CHARACTER ( LEN = FT_ASSERTION_STRING_LENGTH ) :: expected , actual IF (. NOT . ASSOCIATED ( sharedManager )) THEN CALL initializeSharedAssertionsManager END IF sharedManager % numberOfTests_ = sharedManager % numberOfTests_ + 1 IF ( . NOT . isEqual ( expectedValue , actualValue ) ) THEN WRITE ( expected , * ) expectedValue WRITE ( actual , * ) actualValue IF ( PRESENT ( msg ) ) THEN CALL addAssertionFailureForParameters ( msg , expected , actual , \"Integer equality failed: \" ) ELSE CALL addAssertionFailureForParameters ( \"\" , expected , actual , \"Integer equality failed: \" ) END IF END IF END SUBROUTINE assertEqualTwoIntegers ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE assertEqualTwoIntegerArrays1D ( expectedValue , actualValue ) IMPLICIT NONE INTEGER , INTENT ( in ) , DIMENSION (:) :: expectedValue , actualValue IF (. NOT . ASSOCIATED ( sharedManager )) THEN CALL initializeSharedAssertionsManager END IF sharedManager % numberOfTests_ = sharedManager % numberOfTests_ + 1 IF ( . NOT . isEqual ( expectedValue , actualValue ) ) THEN PRINT * , \"assertEqualTwoIntegerArrays1D not implemented\" END IF END SUBROUTINE assertEqualTwoIntegerArrays1D ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE assertEqualTwoIntegerArrays2D ( expectedValue , actualValue ) IMPLICIT NONE INTEGER , INTENT ( in ) , DIMENSION (:,:) :: expectedValue , actualValue IF (. NOT . ASSOCIATED ( sharedManager )) THEN CALL initializeSharedAssertionsManager END IF sharedManager % numberOfTests_ = sharedManager % numberOfTests_ + 1 IF ( . NOT . isEqual ( expectedValue , actualValue ) ) THEN PRINT * , \"assertEqualTwoIntegerArrays2D not implemented\" END IF END SUBROUTINE assertEqualTwoIntegerArrays2D !@mark - ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE assertWithinToleranceTwoReal ( expectedValue , actualValue , tol , msg ) IMPLICIT NONE REAL , INTENT ( in ) :: expectedValue , actualValue , tol CHARACTER ( LEN =* ), OPTIONAL :: msg CHARACTER ( LEN = FT_ASSERTION_STRING_LENGTH ) :: expectedS , actualS IF (. NOT . ASSOCIATED ( sharedManager )) THEN CALL initializeSharedAssertionsManager END IF sharedManager % numberOfTests_ = sharedManager % numberOfTests_ + 1 IF ( . NOT . isEqual ( expectedValue , actualValue , tol ) ) THEN WRITE ( expectedS , * ) expectedValue WRITE ( actualS , * ) actualValue IF ( PRESENT ( msg ) ) THEN CALL addAssertionFailureForParameters ( msg , expectedS , actualS , \"Real equality failed: \" ) ELSE CALL addAssertionFailureForParameters ( \"\" , expectedS , actualS , \"Real equality failed: \" ) END IF END IF END SUBROUTINE assertWithinToleranceTwoReal ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE assertWithinToleranceTwoRealArrays1D ( expectedValue , actualValue , tol , msg ) IMPLICIT NONE REAL , INTENT ( IN ), DIMENSION (:) :: expectedValue , actualValue REAL , INTENT ( IN ) :: tol CHARACTER ( LEN =* ), OPTIONAL :: msg INTEGER :: k CHARACTER ( LEN = FT_ASSERTION_STRING_LENGTH ) :: expected , actual IF (. NOT . ASSOCIATED ( sharedManager )) THEN CALL initializeSharedAssertionsManager END IF sharedManager % numberOfTests_ = sharedManager % numberOfTests_ + 1 IF ( . NOT . isEqual ( expectedValue , actualValue , tol ) ) THEN DO k = 1 , SIZE ( expectedValue ) WRITE ( expected , * ) expectedValue ( k ) WRITE ( actual , * ) actualValue ( k ) IF ( PRESENT ( msg ) ) THEN CALL addAssertionFailureForParameters ( msg , expected , actual , \"Real Array equality failed: \" ) ELSE CALL addAssertionFailureForParameters ( \"\" , expected , actual , \"Real Array equality failed: \" ) END IF END DO END IF END SUBROUTINE assertWithinToleranceTwoRealArrays1D ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE assertWithinToleranceTwoRealArrays2D ( expectedValue , actualValue , tol ) IMPLICIT NONE REAL , INTENT ( IN ), DIMENSION (:,:) :: expectedValue , actualValue REAL , INTENT ( IN ) :: tol IF (. NOT . ASSOCIATED ( sharedManager )) THEN CALL initializeSharedAssertionsManager END IF sharedManager % numberOfTests_ = sharedManager % numberOfTests_ + 1 IF ( . NOT . isEqual ( expectedValue , actualValue , tol ) ) THEN PRINT * , \"assertWithinToleranceTwoRealArrays2D not implemented\" END IF END SUBROUTINE assertWithinToleranceTwoRealArrays2D !@mark - ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE assertWithinToleranceTwoDouble ( expectedValue , actualValue , tol , msg ) IMPLICIT NONE DOUBLE PRECISION , INTENT ( in ) :: expectedValue , actualValue , tol CHARACTER ( LEN =* ), OPTIONAL :: msg CHARACTER ( LEN = FT_ASSERTION_STRING_LENGTH ) :: expected , actual IF (. NOT . ASSOCIATED ( sharedManager )) THEN CALL initializeSharedAssertionsManager END IF sharedManager % numberOfTests_ = sharedManager % numberOfTests_ + 1 IF ( . NOT . isEqual ( expectedValue , actualValue , tol ) ) THEN WRITE ( expected , * ) expectedValue WRITE ( actual , * ) actualValue IF ( PRESENT ( msg ) ) THEN CALL addAssertionFailureForParameters ( msg , expected , actual , \"Double Precision equality failed: \" ) ELSE CALL addAssertionFailureForParameters ( \"\" , expected , actual , \"Double Precision equality failed: \" ) END IF END IF END SUBROUTINE assertWithinToleranceTwoDouble ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE assertWithinToleranceTwoDoubleArrays1D ( expectedValue , actualValue , tol , msg ) IMPLICIT NONE DOUBLE PRECISION , INTENT ( IN ), DIMENSION (:) :: expectedValue , actualValue DOUBLE PRECISION , INTENT ( IN ) :: tol CHARACTER ( LEN =* ), OPTIONAL :: msg INTEGER :: code INTEGER :: k CHARACTER ( LEN = FT_ASSERTION_STRING_LENGTH ) :: expected , actual , eMsg IF (. NOT . ASSOCIATED ( sharedManager )) THEN CALL initializeSharedAssertionsManager END IF sharedManager % numberOfTests_ = sharedManager % numberOfTests_ + 1 IF ( . NOT . isEqual ( expectedValue , actualValue , tol , code ) ) THEN IF ( PRESENT ( msg ) ) THEN eMsg = TRIM ( msg ) // \"---\" // TRIM ( compareCodeStrings ( code )) ELSE eMsg = \"---\" // TRIM ( compareCodeStrings ( code )) END IF DO k = 1 , SIZE ( expectedValue ) WRITE ( expected , * ) expectedValue ( k ) WRITE ( actual , * ) actualValue ( k ) CALL addAssertionFailureForParameters ( eMsg , expected , actual , \"Double Precision 1D Array equality failed: \" ) END DO END IF END SUBROUTINE assertWithinToleranceTwoDoubleArrays1D ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE assertWithinToleranceTwoDoubleArrays2D ( expectedValue , actualValue , tol ) IMPLICIT NONE DOUBLE PRECISION , INTENT ( IN ), DIMENSION (:,:) :: expectedValue , actualValue DOUBLE PRECISION , INTENT ( IN ) :: tol INTEGER :: code IF (. NOT . ASSOCIATED ( sharedManager )) THEN CALL initializeSharedAssertionsManager END IF sharedManager % numberOfTests_ = sharedManager % numberOfTests_ + 1 IF ( . NOT . isEqual ( expectedValue , actualValue , tol , code ) ) THEN PRINT * , \"assertWithinToleranceTwoDoubleArrays2D not implemented\" END IF END SUBROUTINE assertWithinToleranceTwoDoubleArrays2D !@mark - #ifdef _has_Quad ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE assertWithinToleranceTwoQuad ( expectedValue , actualValue , tol , msg ) IMPLICIT NONE REAL ( KIND = SELECTED_REAL_KIND ( QUAD_DIGITS )), INTENT ( in ) :: expectedValue , actualValue , tol CHARACTER ( LEN =* ) , OPTIONAL :: msg CHARACTER ( LEN = FT_ASSERTION_STRING_LENGTH ) :: expectedS , actualS IF (. NOT . ASSOCIATED ( sharedManager )) THEN CALL initializeSharedAssertionsManager END IF sharedManager % numberOfTests_ = sharedManager % numberOfTests_ + 1 IF ( . NOT . isEqual ( expectedValue , actualValue , tol ) ) THEN WRITE ( expectedS , * ) expectedValue WRITE ( actualS , * ) actualValue IF ( PRESENT ( msg ) ) THEN CALL addAssertionFailureForParameters ( msg , expectedS , actualS , \"Quad equality failed: \" ) ELSE CALL addAssertionFailureForParameters ( \"\" , expectedS , actualS , \"Quad equality failed: \" ) END IF END IF END SUBROUTINE assertWithinToleranceTwoQuad #endif !@mark - ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE assertEqualString ( expectedValue , actualValue , msg ) IMPLICIT NONE CHARACTER ( LEN =* ) :: expectedValue , actualValue CHARACTER ( LEN =* ), OPTIONAL :: msg IF (. NOT . ASSOCIATED ( sharedManager )) THEN CALL initializeSharedAssertionsManager END IF sharedManager % numberOfTests_ = sharedManager % numberOfTests_ + 1 IF ( . NOT . isEqual ( expectedValue , actualValue ) ) THEN IF ( PRESENT ( msg ) ) THEN CALL addAssertionFailureForParameters ( msg , expectedValue , actualValue , \"String equality failed: \" ) ELSE CALL addAssertionFailureForParameters ( \"\" , expectedValue , actualValue , \"String equality failed: \" ) END IF END IF END SUBROUTINE assertEqualString !@mark - ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE assertEqualTwoLogicals ( expectedValue , actualValue , msg ) IMPLICIT NONE LOGICAL , INTENT ( in ) :: expectedValue , actualValue CHARACTER ( LEN =* ), OPTIONAL :: msg CHARACTER ( LEN = FT_ASSERTION_STRING_LENGTH ) :: expected , actual IF (. NOT . ASSOCIATED ( sharedManager )) THEN CALL initializeSharedAssertionsManager END IF sharedManager % numberOfTests_ = sharedManager % numberOfTests_ + 1 IF ( . NOT .( expectedValue . EQV . actualValue ) ) THEN WRITE ( expected , * ) expectedValue WRITE ( actual , * ) actualValue IF ( PRESENT ( msg ) ) THEN CALL addAssertionFailureForParameters ( msg , expected , actual , \"Logical equality failed: \" ) ELSE CALL addAssertionFailureForParameters ( msg , expected , actual , \"Logical equality failed: \" ) END IF END IF END SUBROUTINE assertEqualTwoLogicals END Module FTAssertions","tags":"","loc":"sourcefile/assert.f90.html","title":"Assert.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~comparisons.f90~~EfferentGraph sourcefile~comparisons.f90 Comparisons.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~comparisons.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~comparisons.f90~~AfferentGraph sourcefile~comparisons.f90 Comparisons.f90 sourcefile~assert.f90 Assert.f90 sourcefile~comparisons.f90->sourcefile~assert.f90 sourcefile~ftobjectlibrary.f90 FTObjectLibrary.f90 sourcefile~comparisons.f90->sourcefile~ftobjectlibrary.f90 sourcefile~assert.f90->sourcefile~ftobjectlibrary.f90 sourcefile~sparsematrixtests.f90 SparseMatrixTests.f90 sourcefile~assert.f90->sourcefile~sparsematrixtests.f90 sourcefile~dictionarytests.f90 DictionaryTests.f90 sourcefile~assert.f90->sourcefile~dictionarytests.f90 sourcefile~stackstests.f90 StacksTests.f90 sourcefile~assert.f90->sourcefile~stackstests.f90 sourcefile~hashtabletests.f90 HashTableTests.f90 sourcefile~assert.f90->sourcefile~hashtabletests.f90 sourcefile~valuedictionarytests.f90 ValueDictionaryTests.f90 sourcefile~assert.f90->sourcefile~valuedictionarytests.f90 sourcefile~linkedlisttests.f90 LinkedListTests.f90 sourcefile~assert.f90->sourcefile~linkedlisttests.f90 sourcefile~valueclasstests.f90 ValueClassTests.f90 sourcefile~assert.f90->sourcefile~valueclasstests.f90 sourcefile~multiindextabletests.f90 MultiIndexTableTests.f90 sourcefile~assert.f90->sourcefile~multiindextabletests.f90 sourcefile~exceptiontests.f90 ExceptionTests.f90 sourcefile~assert.f90->sourcefile~exceptiontests.f90 sourcefile~testsuitemanagerclass.f90 TestSuiteManagerClass.f90 sourcefile~assert.f90->sourcefile~testsuitemanagerclass.f90 sourcefile~mutablearraytests.f90 MutableArrayTests.f90 sourcefile~assert.f90->sourcefile~mutablearraytests.f90 sourcefile~testsuitemanagerclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~testmain.f90 TestMain.f90 sourcefile~testsuitemanagerclass.f90->sourcefile~testmain.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules ComparisonsModule Source Code Comparisons.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      Assert.f90 !      Created: February 21, 2013 10:02 AM !      By: David Kopriva ! !//////////////////////////////////////////////////////////////////////// ! !> Defines procedures that test equality of different kinds of arguments. !> Procedures defined here are USEd by the FTAssertions Module. ! Module ComparisonsModule USE ISO_FORTRAN_ENV USE FTOLConstants IMPLICIT NONE PRIVATE INTEGER , PARAMETER , PUBLIC :: ASSERT_SUCCESS = 0 , ASSERT_SIZE_DIFFERS = 1 INTEGER , PARAMETER , PUBLIC :: ASSERT_VALUES_DIFFER = 2 CHARACTER ( LEN = 21 ), PARAMETER :: ASSERT_SIZE_DIFFERS_NAME = \"Array sizes differ\" CHARACTER ( LEN = 21 ), PARAMETER :: ASSERT_VALUES_DIFFERS_NAME = \"Array elements differ\" CHARACTER ( LEN = 21 ), PARAMETER :: ASSERT_VALUES_OK_NAME = \"Arrays match\" CHARACTER ( LEN = 21 ), PARAMETER , PUBLIC :: compareCodeStrings ( 0 : 2 ) = [ ASSERT_VALUES_OK_NAME , & ASSERT_SIZE_DIFFERS_NAME ,& ASSERT_VALUES_DIFFERS_NAME ] INTERFACE isEqual MODULE PROCEDURE isEqualTwoIntegers MODULE PROCEDURE isEqualTwoIntegerArrays1D MODULE PROCEDURE isEqualTwoIntegerArrays2D MODULE PROCEDURE isWithinToleranceTwoReal MODULE PROCEDURE isWithinToleranceTwoRealArrays1D MODULE PROCEDURE isWithinToleranceTwoRealArrays2D MODULE PROCEDURE isWithinToleranceTwoDouble MODULE PROCEDURE isWithinToleranceTwoDoubleArrays1D MODULE PROCEDURE isWithinToleranceTwoDoubleArrays2D MODULE PROCEDURE isEqualString #ifdef _has_Quad MODULE PROCEDURE isWithinToleranceTwoQuad #endif END INTERFACE isEqual TYPE assertInfoArray1D CHARACTER ( LEN = 128 ) :: failureName INTEGER :: failureType LOGICAL , DIMENSION (:), ALLOCATABLE :: locations END TYPE assertInfoArray1D TYPE assertInfoArray2D CHARACTER ( LEN = 128 ) :: failureName INTEGER :: failureType LOGICAL , DIMENSION (:,:), ALLOCATABLE :: locations END TYPE assertInfoArray2D PUBLIC :: isEqual , assertInfoArray1D , assertInfoArray2D ! !     ======== CONTAINS !     ======== ! !@mark - ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION isTrue ( condition ) IMPLICIT NONE LOGICAL :: condition IF ( condition ) THEN isTrue = . true . ELSE isTrue = . false . END IF END FUNCTION isTrue ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION isFalse ( condition ) IMPLICIT NONE LOGICAL :: condition IF ( . NOT . condition ) THEN isFalse = . true . ELSE isFalse = . false . END IF END FUNCTION isFalse !@mark - ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION isEqualTwoIntegers ( i , j ) IMPLICIT NONE INTEGER , INTENT ( in ) :: i , j IF ( i == j ) THEN isEqualTwoIntegers = . true . ELSE isEqualTwoIntegers = . false . END IF END FUNCTION isEqualTwoIntegers ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION isEqualTwoIntegerArrays1D ( a , b , info ) IMPLICIT NONE INTEGER , INTENT ( in ) , DIMENSION (:) :: a , b TYPE ( assertInfoArray1D ), INTENT ( INOUT ), OPTIONAL :: info isEqualTwoIntegerArrays1D = . true . IF ( PRESENT ( info )) THEN info % failureType = ASSERT_SUCCESS info % failureName = ASSERT_VALUES_OK_NAME END IF IF ( SIZE ( a ) /= SIZE ( b ) ) THEN isEqualTwoIntegerArrays1D = . false . IF ( PRESENT ( info )) THEN info % failureType = ASSERT_SIZE_DIFFERS info % failureName = ASSERT_SIZE_DIFFERS_NAME END IF ELSE IF ( ANY ( a /= b )) THEN isEqualTwoIntegerArrays1D = . false . IF ( PRESENT ( info )) THEN info % failureType = ASSERT_VALUES_DIFFER info % failureName = ASSERT_VALUES_DIFFERS_NAME ALLOCATE ( info % locations ( SIZE ( a ))) info % locations = . true . WHERE ( a /= b ) info % locations = . false . END IF END IF END FUNCTION isEqualTwoIntegerArrays1D ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION isEqualTwoIntegerArrays2D ( a , b , info ) IMPLICIT NONE INTEGER , INTENT ( in ) , DIMENSION (:,:) :: a , b TYPE ( assertInfoArray2D ), INTENT ( INOUT ), OPTIONAL :: info isEqualTwoIntegerArrays2D = . true . IF ( PRESENT ( info )) THEN info % failureType = ASSERT_SUCCESS info % failureName = ASSERT_VALUES_OK_NAME END IF IF ( SIZE ( a ) /= SIZE ( b ) ) THEN isEqualTwoIntegerArrays2D = . false . IF ( PRESENT ( info )) THEN info % failureType = ASSERT_SIZE_DIFFERS info % failureName = ASSERT_SIZE_DIFFERS_NAME END IF ELSE IF ( ANY ( a /= b )) THEN isEqualTwoIntegerArrays2D = . false . IF ( PRESENT ( info )) THEN info % failureType = ASSERT_VALUES_DIFFER info % failureName = ASSERT_VALUES_DIFFERS_NAME ALLOCATE ( info % locations ( SIZE ( a , 1 ), SIZE ( a , 2 ))) info % locations = . true . WHERE ( a /= b ) info % locations = . false . END IF END IF END FUNCTION isEqualTwoIntegerArrays2D !@mark - ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION isWithinToleranceTwoReal ( x , y , tol ) IMPLICIT NONE REAL , INTENT ( in ) :: x , y , tol LOGICAL :: test IF ( x == 0.0e0 ) THEN test = ABS ( x - y ) <= tol ELSE test = ABS ( x - y ) <= tol * MAX ( ABS ( x ), ABS ( y )) END IF IF ( test ) THEN isWithinToleranceTwoReal = . true . ELSE isWithinToleranceTwoReal = . false . END IF END FUNCTION isWithinToleranceTwoReal ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION isWithinToleranceTwoRealArrays1D ( a , b , tol , code ) IMPLICIT NONE REAL , INTENT ( IN ), DIMENSION (:) :: a , b REAL , INTENT ( IN ) :: tol INTEGER , INTENT ( OUT ), OPTIONAL :: code isWithinToleranceTwoRealArrays1D = . true . IF ( PRESENT ( code )) code = ASSERT_SUCCESS IF ( SIZE ( a ) /= SIZE ( b ) ) THEN isWithinToleranceTwoRealArrays1D = . false . IF ( PRESENT ( code )) code = ASSERT_SIZE_DIFFERS ELSE IF ( ANY ( ABS ( a - b ) > tol * MAX ( ABS ( a ), ABS ( b )))) THEN isWithinToleranceTwoRealArrays1D = . false . IF ( PRESENT ( code )) code = ASSERT_VALUES_DIFFER END IF END FUNCTION isWithinToleranceTwoRealArrays1D ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION isWithinToleranceTwoRealArrays2D ( a , b , tol , code ) IMPLICIT NONE REAL , INTENT ( IN ), DIMENSION (:,:) :: a , b REAL , INTENT ( IN ) :: tol INTEGER , INTENT ( OUT ), OPTIONAL :: code isWithinToleranceTwoRealArrays2D = . true . IF ( PRESENT ( code )) code = ASSERT_SUCCESS IF ( SIZE ( a ) /= SIZE ( b ) ) THEN isWithinToleranceTwoRealArrays2D = . false . IF ( PRESENT ( code )) code = ASSERT_SIZE_DIFFERS ELSE IF ( ANY ( ABS ( a - b ) > tol * MAX ( ABS ( a ), ABS ( b )))) THEN isWithinToleranceTwoRealArrays2D = . false . IF ( PRESENT ( code )) code = ASSERT_VALUES_DIFFER END IF END FUNCTION isWithinToleranceTwoRealArrays2D !@mark - ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION isWithinToleranceTwoDouble ( x , y , tol ) IMPLICIT NONE DOUBLE PRECISION , INTENT ( in ) :: x , y , tol LOGICAL :: test IF ( x == 0.0 d0 ) THEN test = ABS ( x - y ) <= tol ELSE test = ABS ( x - y ) <= tol * MAX ( ABS ( x ), ABS ( y )) END IF IF ( test ) THEN isWithinToleranceTwoDouble = . true . ELSE isWithinToleranceTwoDouble = . false . END IF END FUNCTION isWithinToleranceTwoDouble ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION isWithinToleranceTwoDoubleArrays1D ( a , b , tol , code ) IMPLICIT NONE DOUBLE PRECISION , INTENT ( IN ), DIMENSION (:) :: a , b DOUBLE PRECISION , INTENT ( IN ) :: tol INTEGER , INTENT ( OUT ), OPTIONAL :: code isWithinToleranceTwoDoubleArrays1D = . true . IF ( PRESENT ( code )) code = ASSERT_SUCCESS IF ( SIZE ( a ) /= SIZE ( b ) ) THEN isWithinToleranceTwoDoubleArrays1D = . false . IF ( PRESENT ( code )) code = ASSERT_SIZE_DIFFERS ELSE IF ( ANY ( ABS ( a - b ) > tol * MAX ( ABS ( a ), ABS ( b )))) THEN isWithinToleranceTwoDoubleArrays1D = . false . IF ( PRESENT ( code )) code = ASSERT_VALUES_DIFFER END IF END FUNCTION isWithinToleranceTwoDoubleArrays1D ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION isWithinToleranceTwoDoubleArrays2D ( a , b , tol , code ) IMPLICIT NONE DOUBLE PRECISION , INTENT ( IN ), DIMENSION (:,:) :: a , b DOUBLE PRECISION , INTENT ( IN ) :: tol INTEGER , INTENT ( OUT ), OPTIONAL :: code isWithinToleranceTwoDoubleArrays2D = . true . code = ASSERT_SUCCESS IF ( SIZE ( a ) /= SIZE ( b ) ) THEN isWithinToleranceTwoDoubleArrays2D = . false . IF ( PRESENT ( code )) code = ASSERT_SIZE_DIFFERS ELSE IF ( ANY ( ABS ( a - b ) > tol * MAX ( ABS ( a ), ABS ( b )))) THEN isWithinToleranceTwoDoubleArrays2D = . false . IF ( PRESENT ( code )) code = ASSERT_VALUES_DIFFER END IF END FUNCTION isWithinToleranceTwoDoubleArrays2D !@mark - #ifdef _has_Quad ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION isWithinToleranceTwoQuad ( x , y , tol ) IMPLICIT NONE REAL ( KIND = SELECTED_REAL_KIND ( QUAD_DIGITS )), INTENT ( in ) :: x , y , tol LOGICAL :: test IF ( x == 0.0 d0 ) THEN test = ABS ( x - y ) <= tol ELSE test = ABS ( x - y ) <= tol * MAX ( ABS ( x ), ABS ( y )) END IF IF ( test ) THEN isWithinToleranceTwoQuad = . true . ELSE isWithinToleranceTwoQuad = . false . END IF END FUNCTION isWithinToleranceTwoQuad #endif !@mark - ! !//////////////////////////////////////////////////////////////////////// ! LOGICAL FUNCTION isEqualString ( s1 , s2 ) IMPLICIT NONE CHARACTER ( LEN =* ) :: s1 , s2 isEqualString = . true . IF ( TRIM ( s1 ) /= TRIM ( s2 ) ) THEN isEqualString = . false . END IF END FUNCTION isEqualString END Module ComparisonsModule","tags":"","loc":"sourcefile/comparisons.f90.html","title":"Comparisons.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~testsuitemanagerclass.f90~~EfferentGraph sourcefile~testsuitemanagerclass.f90 TestSuiteManagerClass.f90 sourcefile~assert.f90 Assert.f90 sourcefile~assert.f90->sourcefile~testsuitemanagerclass.f90 sourcefile~comparisons.f90 Comparisons.f90 sourcefile~comparisons.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90->sourcefile~comparisons.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~testsuitemanagerclass.f90~~AfferentGraph sourcefile~testsuitemanagerclass.f90 TestSuiteManagerClass.f90 sourcefile~ftobjectlibrary.f90 FTObjectLibrary.f90 sourcefile~testsuitemanagerclass.f90->sourcefile~ftobjectlibrary.f90 sourcefile~testmain.f90 TestMain.f90 sourcefile~testsuitemanagerclass.f90->sourcefile~testmain.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules TestSuiteManagerClass Source Code TestSuiteManagerClass.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      TestSuiteModule.f90 !      Created: February 21, 2013 11:21 AM !      By: David Kopriva ! !> The TestSuiteManager class defines methods to easily !> put together and run a suite of unit tests. !> !> !> The tests are managed by an instance of the !>**TestSuiteManager** class. It is designed to be used with minimal fuss. You !> !>- Initialize the test suite !>- Add test subroutines !>- Have the testSuiteManager perform the tests !>- Finalize the test suite manager !> !># Usage: # !> !>##Definition !> !>      TYPE(TestSuiteManager) :: testSuite !> !>##Initialization !>         call testSuite % init() !> !>##Creating a test ### !> !>   A test is a subroutine with interface !> !>         ABSTRACT INTERFACE !>            SUBROUTINE testSuiteSubroutine() !>            END SUBROUTINE testSuiteSubroutine !>         END INTERFACE !> !>   that (typically) includes unit test calls. You add !>   a test suite function by the add subroutine !> !>         CALL testSuite % addTestSubroutineWithName(SubroutineName, description) !> !>   where !> !> - SubroutineName = a subroutine with the interface as above, and !> - description = a CHARACTER(LEN=128) character string that names the test !> !>##Setting the output location ### !>   Set the unit to which the output is written by !> !>         CALL testSuite % setOutputUnit(iUnit) !> !>##Running tests ### !>   To run the tests call !> !>         CALL testSuite % performTests() OR !>         CALL testSuite % performTests(numFailed) !> !>##Finalizing the test suite ### !>   When done, call !> !>         CALL testSuite % finalize() ! !//////////////////////////////////////////////////////////////////////// ! Module TestSuiteManagerClass USE FTAssertions IMPLICIT NONE PRIVATE ABSTRACT INTERFACE SUBROUTINE testSuiteFunction () END SUBROUTINE testSuiteFunction END INTERFACE TYPE TestCaseRecord LOGICAL :: passed CHARACTER ( LEN = 128 ) :: testName TYPE ( FTAssertionsManager ) , POINTER :: assertionsManager PROCEDURE ( testSuiteFunction ), POINTER , NOPASS :: TestSubroutine TYPE ( TestCaseRecord ), POINTER :: next END TYPE TestCaseRecord TYPE , PUBLIC :: TestSuiteManager INTEGER :: numberOfTests INTEGER :: stdOut = 6 TYPE ( TestCaseRecord ), POINTER :: testCasesHead => NULL () TYPE ( TestCaseRecord ), POINTER :: testCasesTail => NULL () CONTAINS PROCEDURE :: init => initializeTestSuiteManager PROCEDURE :: finalize => finalizeTestSuiteManager PROCEDURE :: addTestSubroutineWithName PROCEDURE :: performTests PROCEDURE :: setOutputUnit END TYPE TestSuiteManager ! !     ======== CONTAINS !     ======== ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE initializeTestSuiteManager ( self ) IMPLICIT NONE CLASS ( TestSuiteManager ) :: self self % testCasesHead => NULL () self % testCasesTail => NULL () self % numberOfTests = 0 END SUBROUTINE initializeTestSuiteManager ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE setOutputUnit ( self , iUnit ) IMPLICIT NONE CLASS ( TestSuiteManager ) :: self INTEGER :: iUnit self % stdOut = iUnit END SUBROUTINE setOutputUnit ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE addTestSubroutineWithName ( self , testSubroutine , testName ) IMPLICIT NONE CLASS ( TestSuiteManager ) :: self EXTERNAL :: testSubroutine CHARACTER ( LEN =* ) :: testName TYPE ( TestCaseRecord ), POINTER :: newTestCase INTERFACE SUBROUTINE testSubroutine () END SUBROUTINE testSubroutine END INTERFACE ALLOCATE ( newTestCase ) newTestCase % testName = TRIM ( ADJUSTL ( testName )) newTestCase % TestSubroutine => testSubroutine newTestCase % next => NULL () newTestCase % passed = . TRUE . self % numberOfTests = self % numberOfTests + 1 IF ( ASSOCIATED ( self % testCasesHead ) ) THEN self % testCasesTail % next => newTestCase self % testCasesTail => newTestCase ELSE self % testCasesHead => newTestCase self % testCasesTail => newTestCase END IF END SUBROUTINE addTestSubroutineWithName ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE finalizeTestSuiteManager ( self ) IMPLICIT NONE CLASS ( TestSuiteManager ) :: self TYPE ( TestCaseRecord ), POINTER :: tmp , current IF ( . NOT . ASSOCIATED ( self % testCasesHead ) ) THEN RETURN END IF current => self % testCasesHead DO WHILE ( ASSOCIATED ( tmp )) tmp => current % next IF ( ASSOCIATED ( current % assertionsManager )) THEN DEALLOCATE ( current % assertionsManager ) END IF DEALLOCATE ( current ) current => tmp END DO self % testCasesHead => NULL () self % testCasesTail => NULL () self % numberOfTests = 0 END SUBROUTINE finalizeTestSuiteManager ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE performTests ( self , numberOfFailedTestsRet ) IMPLICIT NONE ! !         --------- !         Arguments !         --------- ! CLASS ( TestSuiteManager ) :: self INTEGER , OPTIONAL :: numberOfFailedTestsRet ! !         --------------- !         Local variables !         --------------- ! TYPE ( TestCaseRecord ) , POINTER :: current TYPE ( FTAssertionsManager ), POINTER :: sharedManager INTEGER :: maxMessageLength , numberOfFailedTests numberOfFailedTests = 0 maxMessageLength = 0 WRITE ( self % stdOut , * ) WRITE ( self % stdOut , * ) \"                   ////////////////////////////////\" WRITE ( self % stdOut , * ) \"                   ////    Begin Test Suites   ////\" WRITE ( self % stdOut , * ) \"                   ////////////////////////////////\" WRITE ( self % stdOut , * ) current => self % testCasesHead DO WHILE ( ASSOCIATED ( current )) CALL initializeSharedAssertionsManager sharedManager => sharedAssertionsManager () current % assertionsManager => sharedManager CALL current % TestSubroutine IF ( sharedManager % numberOfAssertionFailures () /= 0 ) THEN numberOfFailedTests = numberOfFailedTests + 1 current % passed = . FALSE . END IF CALL sharedManager % SummarizeAssertions ( current % testName , self % stdOut ) CALL detachSharedAssertionsManager maxMessageLength = MAX ( maxMessageLength , LEN_TRIM ( current % testName )) current => current % next END DO WRITE ( self % stdOut , * ) WRITE ( self % stdOut , * ) \"   **********************************************************\" WRITE ( self % stdOut , * ) \"                     Summary of failed test suites:\" WRITE ( self % stdOut , '(i6,A,i3)' ) numberOfFailedTests , \" suite(s) failed out of \" , self % numberOfTests WRITE ( self % stdOut , * ) \"   **********************************************************\" WRITE ( self % stdOut , * ) WRITE ( self % stdOut , * ) \"                   ////////////////////////////////////\" WRITE ( self % stdOut , * ) \"                   ////    Test Suites Completed   ////\" WRITE ( self % stdOut , * ) \"                   ////////////////////////////////////\" WRITE ( self % stdOut , * ) ! !         ------------------ !         Test matrix output !         ------------------ ! WRITE ( self % stdOut , * ) WRITE ( self % stdOut , * ) \"////////////////////////////////\" WRITE ( self % stdOut , * ) \"////   Test Status Matrix   ////\" WRITE ( self % stdOut , * ) \"////////////////////////////////\" WRITE ( self % stdOut , * ) current => self % testCasesHead DO WHILE ( ASSOCIATED ( current )) IF ( current % passed ) THEN WRITE ( self % stdOut , * ) current % testName ( 1 : maxMessageLength ), \" ... Passed\" ELSE WRITE ( self % stdOut , * ) current % testName ( 1 : maxMessageLength ), \" ... F A I L E D\" END IF current => current % next END DO IF ( PRESENT ( numberOfFailedTestsRet )) numberOfFailedTestsRet = numberOfFailedTests END SUBROUTINE performTests END Module TestSuiteManagerClass","tags":"","loc":"sourcefile/testsuitemanagerclass.f90.html","title":"TestSuiteManagerClass.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~testmain.f90~~EfferentGraph sourcefile~testmain.f90 TestMain.f90 sourcefile~testsuitemanagerclass.f90 TestSuiteManagerClass.f90 sourcefile~testsuitemanagerclass.f90->sourcefile~testmain.f90 sourcefile~assert.f90 Assert.f90 sourcefile~assert.f90->sourcefile~testsuitemanagerclass.f90 sourcefile~comparisons.f90 Comparisons.f90 sourcefile~comparisons.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90->sourcefile~comparisons.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs TestObjectsMain Source Code TestMain.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      Main.f90 !      Created: February 22, 2013 6:18 PM !      By: NocturnalAviationSoftware !! !//////////////////////////////////////////////////////////////////////// ! PROGRAM TestObjectsMain USE TestSuiteManagerClass IMPLICIT NONE TYPE ( TestSuiteManager ) :: testSuite INTEGER :: numberOfFailedTests EXTERNAL :: FTDictionaryClassTests EXTERNAL :: FTExceptionClassTests EXTERNAL :: FTValueClassTests EXTERNAL :: FTValueDictionaryClassTests EXTERNAL :: FTLinkedListClassTests EXTERNAL :: StackClassTests EXTERNAL :: MutableArrayClassTests EXTERNAL :: SparseMatrixTests EXTERNAL :: MultiIndexTableTests !      CALL setvbuf3f(6,2,0) !PGIFortran only ! !     ----- !     Setup !     ----- ! CALL testSuite % init () CALL testSuite % addTestSubroutineWithName ( FTValueClassTests , \"FTValueClass Tests\" ) CALL testSuite % addTestSubroutineWithName ( FTDictionaryClassTests , \"FTDictionaryClass Tests\" ) CALL testSuite % addTestSubroutineWithName ( FTValueDictionaryClassTests , \"FTValueDictionaryClass Tests\" ) CALL testSuite % addTestSubroutineWithName ( FTLinkedListClassTests , \"FTLinkedListClass Tests\" ) CALL testSuite % addTestSubroutineWithName ( StackClassTests , \"StackClass Tests\" ) CALL testSuite % addTestSubroutineWithName ( MutableArrayClassTests , \"Mutable Array Tests\" ) CALL testSuite % addTestSubroutineWithName ( FTExceptionClassTests , \"FTExceptionClass Tests\" ) CALL testSuite % addTestSubroutineWithName ( SparseMatrixTests , \"SparseMatrixClass Tests\" ) CALL testSuite % addTestSubroutineWithName ( MultiIndexTableTests , \"MultiIndexTable Tests\" ) ! !     ------------- !     Run the tests !     ------------- ! CALL testSuite % performTests () ! !     ------- !     Cleanup !     ------- ! CALL testSuite % finalize () END PROGRAM TestObjectsMain","tags":"","loc":"sourcefile/testmain.f90.html","title":"TestMain.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~dictionarytests.f90~~EfferentGraph sourcefile~dictionarytests.f90 DictionaryTests.f90 sourcefile~assert.f90 Assert.f90 sourcefile~assert.f90->sourcefile~dictionarytests.f90 sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~ftvalueclass.f90->sourcefile~dictionarytests.f90 sourcefile~ftdictionaryclass.f90 FTDictionaryClass.f90 sourcefile~ftdictionaryclass.f90->sourcefile~dictionarytests.f90 sourcefile~comparisons.f90 Comparisons.f90 sourcefile~comparisons.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90->sourcefile~ftvalueclass.f90 sourcefile~ftolconstants.f90->sourcefile~comparisons.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftvalueclass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 var pansourcefiledictionarytestsf90EfferentGraph = svgPanZoom('#sourcefiledictionarytestsf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Subroutines FTDictionaryClassTests Source Code DictionaryTests.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      DictionaryTests.f90 !      Created: January 29, 2013 9:37 AM !      By: David Kopriva ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE FTDictionaryClassTests USE FTDictionaryClass USE FTValueClass USE FTAssertions IMPLICIT NONE TYPE ( FTDictionary ) :: dict CLASS ( FTObject ) , POINTER :: obj CLASS ( FTValue ) , POINTER :: v CLASS ( FTMutableObjectArray ) , POINTER :: storedObjects CHARACTER ( LEN = FTDICT_KWD_STRING_LENGTH ), POINTER :: storedKeys (:) CHARACTER ( LEN = FTDICT_KWD_STRING_LENGTH ), DIMENSION ( 4 ) :: keys = [ \"first \" , \"second\" , \"third \" , \"fourth\" ] CHARACTER ( LEN = FTDICT_KWD_STRING_LENGTH ), DIMENSION ( 4 ) :: values = [ \"one  \" , \"two  \" , \"three\" , \"four \" ] CHARACTER ( LEN = FTDICT_KWD_STRING_LENGTH ) :: s , msg , storedKey , sExpected , sActual INTEGER :: i CALL dict % initWithSize ( 64 ) ! !        ---------------------- !        Check empty dictionary !        ---------------------- ! CALL FTAssertEqual ( expectedValue = 0 , & actualValue = dict % COUNT (), & msg = \"Empty dictionary count\" ) obj => dict % objectForKey ( keys ( 1 )) CALL FTAssert ( test = . NOT . ASSOCIATED ( obj ), msg = \"No object for empty dictionary\" ) ! !        ----------------------------------------- !        Add the keys and values to the dictionary !        ----------------------------------------- ! DO i = 1 , 4 ALLOCATE ( v ) CALL v % initWithValue ( values ( i )) obj => v CALL dict % addObjectForKey ( obj , keys ( i )) CALL release ( v ) CALL FTAssertEqual ( 1 , v % refCount (), \"Reference Counting: Addition of object and release\" ) CALL FTAssertEqual ( i , dict % count (), \"Adding to dictionary object count\" ) END DO ! !        ------------------ !        Get them back out !        ------------------ ! DO i = 1 , 4 obj => dict % objectForKey ( keys ( i )) v => valueFromObject ( obj ) IF ( ASSOCIATED ( v ) ) THEN s = v % stringValue ( FTDICT_KWD_STRING_LENGTH ) CALL FTAssertEqual ( values ( i ), s , \"Value for key in dictionary class\" ) ELSE msg = \"Value for key \" // TRIM ( values ( i )) // \" not of correct type\" CALL FTAssert (. false ., msg ) END IF END DO ! !        ------------------------- !        Find the keys and objects !        ------------------------- ! storedKeys => dict % AllKeys () storedObjects => dict % AllObjects () DO i = 1 , 4 storedKey = storedKeys ( i ) obj => dict % objectForKey ( storedKey ) v => valueFromObject ( obj ) sExpected = v % stringValue ( FTDICT_KWD_STRING_LENGTH ) obj => storedObjects % objectAtIndex ( indx = i ) v => valueFromObject ( obj ) sActual = v % stringValue ( FTDICT_KWD_STRING_LENGTH ) CALL FTAssertEqual ( sExpected , sActual , \"String for stored key\" ) END DO ! !        ---------------------- !        Check inquiry routines !        ---------------------- ! CALL FTAssert ( dict % containsKey ( \"first\" ) , msg = \"dictionary contains key\" ) CALL FTAssert ( . NOT . dict % containsKey ( \"bob\" ), msg = \"dictionary doesn't contain key\" ) ! !        --------------- !        Clean up memory !        --------------- ! DEALLOCATE ( storedKeys ) CALL release ( storedObjects ) CALL dict % destruct () END SUBROUTINE FTDictionaryClassTests","tags":"","loc":"sourcefile/dictionarytests.f90.html","title":"DictionaryTests.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~exceptiontests.f90~~EfferentGraph sourcefile~exceptiontests.f90 ExceptionTests.f90 sourcefile~ftvaluedictionaryclass.f90 FTValueDictionaryClass.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~exceptiontests.f90 sourcefile~ftexceptionclass.f90 FTExceptionClass.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftexceptionclass.f90->sourcefile~exceptiontests.f90 sourcefile~assert.f90 Assert.f90 sourcefile~assert.f90->sourcefile~exceptiontests.f90 sourcefile~ftdictionaryclass.f90 FTDictionaryClass.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftvaluedictionaryclass.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~ftvalueclass.f90->sourcefile~ftvaluedictionaryclass.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftvalueclass.f90 sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftstackclass.f90 FTStackClass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftstackclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90->sourcefile~ftvalueclass.f90 sourcefile~comparisons.f90 Comparisons.f90 sourcefile~ftolconstants.f90->sourcefile~comparisons.f90 sourcefile~ftstackclass.f90->sourcefile~ftexceptionclass.f90 sourcefile~comparisons.f90->sourcefile~assert.f90 var pansourcefileexceptiontestsf90EfferentGraph = svgPanZoom('#sourcefileexceptiontestsf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules ExceptionWrapper Subroutines subroutineThatThrowsError FTExceptionClassTests Source Code ExceptionTests.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      FTExceptionTests.f90 !      Created: February 6, 2013 6:16 PM !      By: NocturnalAviationSoftware ! !//////////////////////////////////////////////////////////////////////// ! MODULE ExceptionWrapper CONTAINS FUNCTION testException () USE FTExceptionClass USE FTValueDictionaryClass IMPLICIT NONE CLASS ( FTException ) , POINTER :: testException CLASS ( FTValueDictionary ), POINTER :: userDictionary CLASS ( FTDictionary ) , POINTER :: ptr REAL :: r = 3.1416 ALLOCATE ( userDictionary ) CALL userDictionary % initWithSize ( 64 ) CALL userDictionary % addValueForKey ( \"An error has occurred\" , \"message\" ) CALL userDictionary % addValueForKey ( r , \"value\" ) ALLOCATE ( testException ) ptr => userDictionary CALL testException % initFTException ( FT_ERROR_FATAL , & exceptionName = \"FTTestException\" , & infoDictionary = ptr ) CALL release ( userDictionary ) END FUNCTION testException END MODULE ExceptionWrapper ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE subroutineThatThrowsError USE SharedExceptionManagerModule USE FTExceptionClass USE ExceptionWrapper IMPLICIT NONE CLASS ( FTException ) , POINTER :: exception exception => testException () CALL throw ( exception ) CALL release ( exception ) END SUBROUTINE subroutineThatThrowsError ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE FTExceptionClassTests USE FTValueDictionaryClass USE SharedExceptionManagerModule USE FTAssertions IMPLICIT NONE CLASS ( FTException ) , POINTER :: e CLASS ( FTDictionary ) , POINTER :: d CLASS ( FTValueDictionary ), POINTER :: userDictionary REAL :: r CHARACTER ( LEN = FTDICT_KWD_STRING_LENGTH ) :: msg REAL :: singleTol = 2 * EPSILON ( 1.0e0 ) CALL initializeFTExceptions CALL subroutineThatThrowsError IF ( catch ( \"FTTestException\" ) ) THEN e => errorObject () d => e % infoDictionary () userDictionary => valueDictionaryFromDictionary ( dict = d ) msg = userDictionary % stringValueForKey ( \"message\" , FTDICT_KWD_STRING_LENGTH ) CALL FTAssertEqual ( \"An error has occurred\" , msg , \"String for key: message\" ) r = userDictionary % realValueForKey ( \"value\" ) CALL FTAssertEqual ( 3.1416 , r , singleTol , \"Value for key: value\" ) END IF CALL destructFTExceptions END SUBROUTINE FTExceptionClassTests","tags":"","loc":"sourcefile/exceptiontests.f90.html","title":"ExceptionTests.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~hashtabletests.f90~~EfferentGraph sourcefile~hashtabletests.f90 HashTableTests.f90 sourcefile~assert.f90 Assert.f90 sourcefile~assert.f90->sourcefile~hashtabletests.f90 sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~ftvalueclass.f90->sourcefile~hashtabletests.f90 sourcefile~comparisons.f90 Comparisons.f90 sourcefile~comparisons.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90->sourcefile~ftvalueclass.f90 sourcefile~ftolconstants.f90->sourcefile~comparisons.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftvalueclass.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Subroutines HashTableTests Source Code HashTableTests.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      HashTableTests.f90 !      Created: July 29, 2013 2:17 PM !      By: David Kopriva ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE HashTableTests USE FTValueClass USE FTAssertions USE FTHashTableClass IMPLICIT NONE ! !        -------------------------------- !        We will store values in a matrix !        -------------------------------- ! CLASS ( FTValue ) , POINTER :: v CLASS ( FTValue ) , POINTER :: vTest CLASS ( FTObject ), POINTER :: obj TYPE ( FTHashTable ) :: hashTable INTEGER :: i , j , N INTEGER :: h1 , h2 LOGICAL :: t ! !        ------------------------------------- !        initialize a table with four elements !        ------------------------------------- ! N = 4 CALL hashTable % initWithSize ( 4 ) CALL FTAssertEqual ( N , hashTable % hashTableSize (), \"Table size size\" ) obj => hashTable % objectForKeys ( 2 , 3 ) CALL FTAssertEqual (. FALSE ., ASSOCIATED ( obj ), \"Empty table test\" ) ! !        --------------------------------------------------------- !        Add an object to the table, retrieve it and then destroy !        the table !        --------------------------------------------------------- ! ALLOCATE ( v ) CALL v % initWithValue ( 42 ) obj => v CALL hashTable % addObjectForKeys ( obj , 2 , 3 ) CALL FTAssertEqual ( 2 , v % refcount (), \"Add object to table reference count\" ) t = hashTable % containsKeys ( 2 , 3 ) CALL FTAssertEqual (. TRUE ., t , \"contains value for key\" ) obj => hashTable % objectforKeys ( 2 , 3 ) vTest => valueFromObject ( obj ) CALL FTAssertEqual ( 42 , vTest % integerValue (), \"Table entry retrieval\" ) CALL hashTable % destruct () CALL FTAssertEqual ( 1 , v % refCount (), \"Table release object refCount\" ) CALL release ( v ) ! !        --------------------------------------------- !        Now create a hash table with a lot of entries !        --------------------------------------------- ! CALL hashTable % initWithSize ( 4 ) DO j = 1 , N DO i = 1 , N h1 = Hash1 ([ i , j ]) h2 = Hash2 ([ i , j ]) ALLOCATE ( v ) CALL v % initWithValue ( i + j ) obj => v CALL hashTable % addObjectForKeys ( obj , h1 , h2 ) CALL release ( v ) END DO END DO ! !        ------------ !        Get them out !        ------------ ! DO j = 1 , N DO i = 1 , N h1 = Hash1 ([ i , j ]) h2 = Hash2 ([ i , j ]) obj => hashTable % objectForKeys ( h1 , h2 ) vTest => valueFromObject ( obj ) CALL FTAssertEqual ( 1 , vTest % refCount (), \"Table add refCount\" ) CALL FTAssertEqual ( i + j , vTest % integerValue (), \"Table entry value\" ) END DO END DO CALL vTest % retain () CALL FTAssertEqual ( 2 , vTest % refCount (), \"Retain refCount\" ) CALL hashTable % destruct () CALL FTAssertEqual ( 1 , vTest % refCount (), \"Table release object refCount\" ) CALL release ( vTest ) IF ( ASSOCIATED ( vTest ) ) THEN CALL FTAssert (. FALSE ., \"Release object count\" ) END IF END SUBROUTINE HashTableTests","tags":"","loc":"sourcefile/hashtabletests.f90.html","title":"HashTableTests.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~linkedlisttests.f90~~EfferentGraph sourcefile~linkedlisttests.f90 LinkedListTests.f90 sourcefile~assert.f90 Assert.f90 sourcefile~assert.f90->sourcefile~linkedlisttests.f90 sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~linkedlisttests.f90 sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~ftvalueclass.f90->sourcefile~linkedlisttests.f90 sourcefile~comparisons.f90 Comparisons.f90 sourcefile~comparisons.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90->sourcefile~ftvalueclass.f90 sourcefile~ftolconstants.f90->sourcefile~comparisons.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftvalueclass.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Subroutines FTLinkedListClassTests basicTests testAppendingLists TestDeletingObjects Source Code LinkedListTests.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      FTLinkedListUnitTests.f90 !      Created: January 15, 2013 5:25 PM !      By: David Kopriva ! !      Create a linked list of FTValue objects. The class can store !      any objects inheriting from FTObject. For instance, one could !      have a linked list whose first record is a linked list and second !      is a value. ! !      The FTLinkedListIterator class, used for stepping through a linked !      list, is also and tested demonstrated here. ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE FTLinkedListClassTests IMPLICIT NONE ! !        ------------ !        Basic tests !        ------------ ! CALL basicTests ! !        -------------------------------------- !        Do more with deleting objects in lists !        -------------------------------------- ! CALL TestDeletingObjects ! !        --------------------------------- !        Now test appending lists to lists !        --------------------------------- ! CALL testAppendingLists END SUBROUTINE FTLinkedListClassTests ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE basicTests USE FTAssertions USE FTValueClass USE FTLinkedListClass USE FTLinkedListIteratorClass IMPLICIT NONE ! !        ------------------------------------------------------ !        r1,r2,r3 are three object pointers to be stored in the !        linked list !        ------------------------------------------------------ ! CLASS ( FTValue ), POINTER :: r1 , r2 , r3 ! !        ------------------------------------------------------------ !        We need a pointer of the base class type to pass to the list !        ------------------------------------------------------------ ! CLASS ( FTObject ), POINTER :: objectPtr ! !        ------------------------------------------------- !        Here we will define the list as a pointer, but it !        can be a non-pointer, too, like the iterator. !        ------------------------------------------------- ! CLASS ( FTLinkedList ) , POINTER :: list CLASS ( FTLinkedListIterator ), POINTER :: iterator INTEGER :: i REAL :: singleTol = 2 * EPSILON ( 1.0e0 ) ! !        ------------------------------------------------------- !        Allocate and initialize the linked list. Remember that !        init initializes the object with reference count of one !        and ownership to this calling subroutine. !        ------------------------------------------------------- ! ALLOCATE ( list ) CALL list % init () ! !        -------------------------------------------------------------------------- !        Test Reference counting. !           Retaining an object implies that this subroutine wants to !           share ownership of an object. (In fact, it already does, so the retain !           is redundant.) !           Releasing an object implies that the caller releases its share of !           the object. Note that, because of the init call, we still own the !           object after the retain+release. Finally, remember to balance init/retains !           and releases: init + # retains = # releases !        -------------------------------------------------------------------------- ! CALL FTAssertEqual ( 1 , list % refCount (), \"Reference counting: Initial object refCount\" ) CALL list % retain () CALL FTAssertEqual ( 2 , list % refCount (), \"Reference counting: Test retain\" ) CALL release ( list ) CALL FTAssertEqual ( 1 , list % refCount (), \"Reference counting: test release\" ) ! !        --------------------------------------------------------------------------------- !        A linked list that is just initialized has no items in it, so its COUNT is zero. !        --------------------------------------------------------------------------------- ! CALL FTAssertEqual ( 0 , list % COUNT (), \"Initial list size\" ) ! !        ------------------------------------------------------------------ !        Add some items to the linked list. !        As we add items the list's count increases. !        Also, the list takes a share of ownership of the object added !        so the reference count of the object is increased. Once we !        add an object to the list, we may not need it anymore, in which case !        we reliquish our share of the ownership by releasing it. We should !        check to see if the object needs to be deallocated for safety. ! !        The first item that we add is an FTValueObject that represents an !        integer. !        ------------------------------------------------------------------ ! ALLOCATE ( r1 ) CALL r1 % initWithValue ( 1 ) objectPtr => r1 CALL list % add ( objectPtr ) CALL FTAssertEqual ( 1 , list % COUNT (), \"List size after adding one object\" ) ! CALL FTAssertEqual ( 2 , r1 % refCount (),& \"Reference counting: Stored object should have reference count increased\" ) CALL release ( r1 ) CALL FTAssertEqual ( 1 , objectPtr % refCount (),& \"Reference counting: Stored object should have reference count decreased\" ) ! !        --------------------------------------------------------------------- !        The second item in the list is an FTValueObject that stores a string. !        We will use r2 later in the subroutine, so we don't give up ownership !        at this time. !        --------------------------------------------------------------------- ! ALLOCATE ( r2 ) CALL r2 % initWithValue ( \"r2 is a string\" ) objectPtr => r2 CALL list % add ( objectPtr ) CALL FTAssertEqual ( 2 , list % COUNT (), \"List size after adding second object\" ) ! !        ------------------------------------- !        The final object we add stores a real !        ------------------------------------- ! ALLOCATE ( r3 ) CALL r3 % initWithValue ( 3.14 ) objectPtr => r3 CALL list % add ( objectPtr ) CALL FTAssertEqual ( 3 , list % COUNT (), \"List size after adding third object\" ) CALL release ( r3 ) ! !        --------------------------------------------------------------------------------- !        Check integrity of stored objects. We iterate !        through the linked list with an iterator. The !        iterator is initialized with the list, which !        is why we have defined the list as a pointer. !        Note that the init function gives us ownership !        of the iterator, and the iterator takes an ownership !        stake in the list. When we get to the end of this subroutine, !        since we are the sole owner of the iterator (we could check with  % shouldDestruct), !        we must destruct the iterator. Since the iterator is the sole owner of !        the list after we release it, it will destruct the list. !        --------------------------------------------------------------------------------- ! ALLOCATE ( iterator ) CALL iterator % initWithFTLinkedList ( list ) CALL FTAssertEqual ( 2 , list % refCount (), \"Ref count increase on addition of list to iterator\" ) ! !        ------------------------------------------- !        Iterate through the list from the beginning !        ------------------------------------------- ! CALL iterator % setToStart () !(This is automatically done in the init) i = 1 DO WHILE (. NOT . iterator % isAtEnd () ) ! !           -------------------------------------------------------------------------- !           Get a pointer to the iterator's current object. Just pointing does not !           imply ownership, so if we wanted to save the reference to the object after !           destructing the iterator and list, we'd have to retain it. !           -------------------------------------------------------------------------- ! objectPtr => iterator % object () SELECT TYPE ( v => objectPtr ) TYPE IS ( FTValue ) SELECT CASE ( i ) CASE ( 1 ) CALL FTAssertEqual ( 1 , v % integerValue (), \"First item is integer value\" ) CASE ( 2 ) CALL FTAssertEqual ( \"r2 is a string\" , v % stringValue ( 14 ), \"Second item is string value\" ) CASE ( 3 ) CALL FTAssertEqual ( 3.14 , v % realValue (), singleTol , \"Third item in list is real value\" ) END SELECT CLASS DEFAULT CALL FTAssert (. false ., \"Unknown type stored in linked list\" ) END SELECT CALL iterator % moveToNext () i = i + 1 END DO ! !        --------------------------------------------------- !        Delete the object r2 from the list !        The number of items should be decreased by one, and !        what were r1 and r3 should still be there. !        --------------------------------------------------- ! objectPtr => r2 CALL list % remove ( objectPtr ) CALL FTAssertEqual ( 2 , list % COUNT (), \"List has two objects after removing one\" ) CALL FTAssertEqual ( 1 , r2 % refCount (), msg = \"Refcount after removing object\" ) CALL iterator % setToStart () i = 1 DO WHILE (. NOT . iterator % isAtEnd ()) objectPtr => iterator % object () SELECT TYPE ( v => objectPtr ) TYPE IS ( FTValue ) SELECT CASE ( i ) CASE ( 1 ) CALL FTAssertEqual ( 1 , v % integerValue (), \"First item in list doesn't have proper value\" ) CASE ( 3 ) CALL FTAssertEqual ( 3.14 , v % realValue (), singleTol , \"third item in list doesn't have proper value\" ) END SELECT CLASS DEFAULT CALL FTAssert (. false ., \"Known type stored in linked list\" ) END SELECT CALL iterator % moveToNext () i = i + 1 END DO ! !        ------------------------------------------------------ !        By releasing an object we promise not to reference it. !        Otherwise, it is possible to get an undefined pointer. !        ------------------------------------------------------ ! CALL release ( list ) CALL FTAssertEqual ( 1 , list % refCount (), \"Ref count decrease on release\" ) ! !        ------------------------------------------------------------------- !        Normally we would now check if the list should be deallocated. But !        since we know that it's refCount = 1, we won't and simply nullify !        the pointer. Note that the list itself is retained by the iterator. !        ------------------------------------------------------------------- ! list => NULL () ! !        ------------------------------------------------------------------------------ !        Clean up iterator. Its refCount, since we know we are the only owners, should !        cause it to be destructed. On release, the iterator will deallocate the list !        since it is the last owner. !        ------------------------------------------------------------------------------ ! CALL release ( iterator ) ! !        -------------------------------------------------------------------------- !        At this point, the iterator should not have a linked list associated with !        it. Check to make sure. !        -------------------------------------------------------------------------- ! !         list => iterator % linkedList() !         test = ASSOCIATED(list) !         CALL FTAssert(.NOT.test,\"List pointer nullified\") END SUBROUTINE basicTests ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE testAppendingLists USE FTAssertions USE FTValueClass USE FTLinkedListClass USE FTLinkedListIteratorClass IMPLICIT NONE ! CLASS ( FTValue ) , POINTER :: v CLASS ( FTObject ) , POINTER :: objectPtr CLASS ( FTLinkedList ) , POINTER :: list1 , list2 CLASS ( FTMutableObjectArray ), POINTER :: array CLASS ( FTLinkedListIterator ), POINTER :: iterator INTEGER :: j , N ALLOCATE ( iterator ) ! !        ---------------------------------------------- !        Create the two lists that will be concatenated !        ---------------------------------------------- ! ALLOCATE ( list1 , list2 ) CALL list1 % init () CALL list2 % init () ! !        ----------------------------- !        Add some objects to the lists !        ----------------------------- ! DO j = 1 , 5 ALLOCATE ( v ) CALL v % initWithValue ( j ) objectPtr => v CALL list1 % add ( objectPtr ) CALL release ( v ) END DO DO j = 6 , 10 ALLOCATE ( v ) CALL v % initWithValue ( j ) objectPtr => v CALL list2 % add ( objectPtr ) CALL release ( v ) END DO ! !        ----------------------------------- !        Add the elements of list2 to list 1 !        ----------------------------------- ! CALL list1 % addObjectsFromList ( list2 ) CALL FTAssertEqual ( 10 , list1 % COUNT (), \"Append list increases list size\" ) ! !        ------------------------------------------- !        See that the new list contains the old one. !        Note that objects are owned by both lists. !        ------------------------------------------- ! CALL iterator % initWithFTLinkedList ( list1 ) j = 1 DO WHILE (. NOT . iterator % isAtEnd ()) v => valueFromObject ( iterator % object ()) CALL FTAssertEqual ( j , v % integerValue (), \"Item value stored properly\" ) IF ( j >= 6 ) THEN objectPtr => iterator % object () CALL FTAssertEqual ( 2 , objectPtr % refCount (), \"Records owned by two lists\" ) END IF CALL iterator % moveToNext () j = j + 1 END DO ! !        -------------------------------------------------- !        Now delete the list2. Its contents should still be !        in list1 !        -------------------------------------------------- ! CALL release ( list2 ) CALL FTAssertEqual (. TRUE ., . NOT . ASSOCIATED ( list2 ), \"List has only one owner and should deallocate on release\" ) ! !        -------------------------------------------------- !        List1 should have its contents plus the other list !        with refCount 1 !        -------------------------------------------------- ! CALL iterator % setToStart () j = 1 DO WHILE (. NOT . iterator % isAtEnd ()) v => valueFromObject ( iterator % object ()) CALL FTAssertEqual ( j , v % integerValue (), \"Item value stored properly afer release of added list\" ) CALL FTAssertEqual ( 1 , v % refCount (), \"Item value pointed to by list refCount\" ) objectPtr => iterator % object () CALL FTAssertEqual ( 1 , objectPtr % refCount (), \"Objects owned by one list\" ) CALL iterator % moveToNext () j = j + 1 END DO ! !        ------------------------------------- !        Create an object array from the list. !        ------------------------------------- ! array => list1 % allObjects () DO j = 1 , array % COUNT () v => valueFromObject ( array % objectAtIndex ( j )) CALL FTAssertEqual ( j , v % integerValue (), \"Item value stored in array created from list\" ) objectPtr => array % objectAtIndex ( j ) CALL FTAssertEqual ( 2 , objectPtr % refCount (), \"Objects owned by one list and one array\" ) END DO CALL release ( array ) CALL FTAssert ( test = . NOT . ASSOCIATED ( array ), msg = \"Array unreferenced\" ) ! !        ------------------------------------------- !        Now reverse the list and iterate through it !        ------------------------------------------- ! CALL list1 % reverse () N = list1 % COUNT () j = N CALL iterator % setToStart DO WHILE (. NOT . iterator % isAtEnd ()) v => valueFromObject ( iterator % object ()) CALL FTAssertEqual ( j , v % integerValue (), \"Item value stored properly afer release of added list\" ) CALL FTAssertEqual ( 1 , v % refCount (), \"Item value pointed to by list refCount\" ) objectPtr => iterator % object () CALL FTAssertEqual ( 1 , objectPtr % refCount (), \"Objects owned by one list\" ) CALL iterator % moveToNext () j = j - 1 END DO ! !        -------- !        Clean up !        -------- ! CALL release ( list1 ) CALL release ( iterator ) END SUBROUTINE testAppendingLists ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE TestDeletingObjects USE FTLinkedListClass USE FTLinkedListIteratorClass USE FTValueClass USE FTAssertions IMPLICIT NONE ! !        ----------------------------------------------- !        Add a number of objects to a list and then test !        out removing them !        ----------------------------------------------- ! CLASS ( FTValue ) , POINTER :: v CLASS ( FTObject ) , POINTER :: obj CLASS ( FTLinkedList ) , POINTER :: list CLASS ( FTLinkedListRecord ), POINTER :: recordPtr CLASS ( FTLinkedListIterator ), POINTER :: iterator INTEGER :: j ! !        ---------------------------------------------- !        Create the two lists that will be concatenated !        ---------------------------------------------- ! ALLOCATE ( list ) CALL list % init () ! !        ----------------------------- !        Add some objects to the lists !        ----------------------------- ! DO j = 1 , 6 ALLOCATE ( v ) CALL v % initWithValue ( j ) obj => v CALL list % add ( obj ) CALL release ( v ) END DO ! !        ------------------------------------------------------------ !        Create an iterator on the list and remove an \"interior\" item !        ------------------------------------------------------------ ! ALLOCATE ( iterator ) CALL iterator % initwithFTLinkedList ( list ) ! !        --------------- !        Delete the tail !        --------------- ! CALL iterator % setToStart () j = 1 DO WHILE ( . NOT . iterator % isAtEnd () ) IF ( j == 6 ) THEN v => valueFromObject ( iterator % object ()) CALL FTAssertEqual ( 6 , v % integerValue (), \"Value of object to be deleted\" ) CALL iterator % removeCurrentRecord () END IF CALL iterator % moveToNext () j = j + 1 END DO CALL FTAssertEqual ( 5 , list % COUNT (), \"Count after deletion of tail object\" ) !! !!        ----------------------- !!        Delete the third record !!        ----------------------- !! CALL iterator % setToStart () j = 1 DO WHILE ( . NOT . iterator % isAtEnd () ) IF ( j == 3 ) THEN v => valueFromObject ( iterator % object ()) CALL FTAssertEqual ( 3 , v % integerValue (), \"Value of object to be deleted\" ) CALL iterator % removeCurrentRecord () EXIT END IF CALL iterator % moveToNext () j = j + 1 END DO CALL FTAssertEqual ( 4 , list % COUNT (), \"Count after deletion of middle object\" ) v => valueFromObject ( iterator % object ()) CALL FTAssertEqual ( 4 , v % integerValue (), \"Value of current object after deleting\" ) ! !        --------------------------------- !        Make sure connections are correct !        --------------------------------- ! recordPtr => iterator % currentRecord () v => valueFromObject ( recordPtr % previous % recordObject ) CALL FTAssertEqual ( 2 , v % integerValue (), \"Value of previous object after deleting\" ) v => valueFromObject ( recordPtr % next % recordObject ) CALL FTAssertEqual ( 5 , v % integerValue (), \"Value of next object after deleting\" ) ! !        ----------------------- !        Delete the first record !        ----------------------- ! CALL iterator % setToStart () CALL iterator % removeCurrentRecord () CALL FTAssertEqual ( 3 , list % COUNT (), \"count after deleting head\" ) v => valueFromObject ( iterator % object ()) CALL FTAssertEqual ( 2 , v % integerValue (), \"Value of current head after deleting\" ) ! !        -------- !        Clean up !        -------- ! CALL release ( iterator ) CALL release ( list ) END SUBROUTINE TestDeletingObjects","tags":"","loc":"sourcefile/linkedlisttests.f90.html","title":"LinkedListTests.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~multiindextabletests.f90~~EfferentGraph sourcefile~multiindextabletests.f90 MultiIndexTableTests.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~multiindextabletests.f90 sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftvalueclass.f90 sourcefile~ftmultiindextable.f90 FTMultiIndexTable.f90 sourcefile~ftobjectclass.f90->sourcefile~ftmultiindextable.f90 sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 sourcefile~assert.f90 Assert.f90 sourcefile~assert.f90->sourcefile~multiindextabletests.f90 sourcefile~ftvalueclass.f90->sourcefile~multiindextabletests.f90 sourcefile~ftmultiindextable.f90->sourcefile~multiindextabletests.f90 sourcefile~comparisons.f90 Comparisons.f90 sourcefile~comparisons.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90->sourcefile~ftvalueclass.f90 sourcefile~ftolconstants.f90->sourcefile~comparisons.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftmultiindextable.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 var pansourcefilemultiindextabletestsf90EfferentGraph = svgPanZoom('#sourcefilemultiindextabletestsf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Subroutines MultiIndexTableTests Source Code MultiIndexTableTests.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      MultiIndexTableTests.f90 !      Created: May 27, 2015 at 5:46 PM !      By: David Kopriva ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE MultiIndexTableTests USE FTAssertions USE FTObjectClass USE FTValueClass USE FTMultiIndexTableClass IMPLICIT NONE INTEGER :: e CLASS ( FTValue ) , POINTER :: v CLASS ( FTObject ), POINTER :: obj TYPE ( FTMultiIndexTable ) :: table INTEGER , DIMENSION ( 3 ) :: unsorted3 = [ 5 , 3 , 1 ] INTEGER , DIMENSION ( 3 ) :: sorted3 = [ 1 , 3 , 5 ] INTEGER , DIMENSION ( 4 ) :: unsorted4 = [ 7 , 5 , 3 , 1 ] INTEGER , DIMENSION ( 4 ) :: sorted4 = [ 1 , 3 , 5 , 7 ] INTEGER , DIMENSION ( 5 ) :: unsorted5 = [ 9 , 7 , 5 , 3 , 1 ] INTEGER , DIMENSION ( 5 ) :: sorted5 = [ 1 , 3 , 5 , 7 , 9 ] CHARACTER ( LEN = 5 ) :: strs ( 4 ) = [ \"one  \" , \"two  \" , \"three\" , \"four \" ] CHARACTER ( LEN = 5 ) :: str INTEGER , DIMENSION ( 4 , 4 ) :: keys INTEGER :: j LOGICAL :: test ! !        ---------------------- !        Test sorting procedure !        ---------------------- ! CALL sortKeysAscending ( keys = unsorted3 ) e = MAXVAL ( ABS ( unsorted3 - sorted3 )) CALL FTAssertEqual ( expectedValue = 0 , actualValue = e , msg = \"Sort of length three array\" ) CALL sortKeysAscending ( keys = unsorted4 ) e = MAXVAL ( ABS ( unsorted4 - sorted4 )) CALL FTAssertEqual ( expectedValue = 0 , actualValue = e , msg = \"Sort of length four array\" ) CALL sortKeysAscending ( keys = unsorted5 ) e = MAXVAL ( ABS ( unsorted5 - sorted5 )) CALL FTAssertEqual ( expectedValue = 0 , actualValue = e , msg = \"Sort of length five array\" ) ! !        ----------------- !        Create Test table !        ----------------- ! keys (:, 1 ) = [ 1 , 3 , 5 , 6 ] keys (:, 2 ) = [ 5 , 3 , 2 , 1 ] keys (:, 3 ) = [ 3 , 6 , 8 , 9 ] keys (:, 4 ) = [ 4 , 6 , 7 , 2 ] CALL table % initWithSize ( N = 10 ) ! Says first item of the multiIndex array is at most 10 ! !        ----------------------- !        Add values to the table !        ----------------------- ! DO j = 1 , 4 ALLOCATE ( v ) CALL v % initWithValue ( strs ( j )) obj => v CALL table % addObjectForKeys ( obj = obj , keys = keys (:, j )) CALL release ( v ) END DO ! !        --------------------------- !        Test if keys exist in table !        --------------------------- ! DO j = 1 , 4 test = table % containsKeys ( keys (:, j )) CALL FTAssert ( test , msg = \"Keys found in table\" ) END DO ! !        ------------------------------- !        Retrieve objects from the table !        ------------------------------- ! DO j = 1 , 4 v => valueFromObject ( table % objectForKeys ( keys (:, j ))) str = v % stringValue ( 5 ) CALL FTAssertEqual ( expectedValue = strs ( j ), actualValue = str , msg = \"object retrieval\" ) END DO CALL table % destruct () END SUBROUTINE MultiIndexTableTests","tags":"","loc":"sourcefile/multiindextabletests.f90.html","title":"MultiIndexTableTests.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~mutablearraytests.f90~~EfferentGraph sourcefile~mutablearraytests.f90 MutableArrayTests.f90 sourcefile~assert.f90 Assert.f90 sourcefile~assert.f90->sourcefile~mutablearraytests.f90 sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~ftvalueclass.f90->sourcefile~mutablearraytests.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~mutablearraytests.f90 sourcefile~comparisons.f90 Comparisons.f90 sourcefile~comparisons.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90->sourcefile~ftvalueclass.f90 sourcefile~ftolconstants.f90->sourcefile~comparisons.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftvalueclass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Subroutines MutableArrayClassTests Source Code MutableArrayTests.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      MutableArrayTests.f90 !      Created: June 12, 2013 10:46 AM !      By: David Kopriva ! !      This subroutine tests and shows how to use the FTMutableObjectArray !      class. ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE MutableArrayClassTests USE FTAssertions USE FTMutableObjectArrayClass USE FTValueClass IMPLICIT NONE ! !        ------------ !        Declarations !        ------------ ! CLASS ( FTMutableObjectArray ), POINTER :: array INTEGER :: i INTEGER , DIMENSION ( 10 ) :: values = [( i , i = 1 , 10 )] INTEGER , DIMENSION ( 10 ) :: modifiedValues = [ 1 , 2 , 3 , 4 , 22 , 6 , 7 , 9 , 10 , 11 ] CLASS ( FTObject ), POINTER :: obj CLASS ( FTValue ) , POINTER :: v ! !        ------------------------------------------------------------ !        Initialize an empty array with an initial size of 10 objects !        ------------------------------------------------------------ ! ALLOCATE ( array ) CALL array % initwithsize ( 10 ) CALL FTAssertEqual ( 0 , array % COUNT (), \"Initial array count\" ) ! !        -------------------------------------------------------- !        Add objects to the array !        Normally we should check the deallocation status !        when we release an object, but we know we have just !        added it to the array, so the array will have ownership. !        Ditto on any releases below. !        -------------------------------------------------------- ! DO i = 1 , 10 ALLOCATE ( v ) CALL v % initwithValue ( values ( i )) obj => v CALL array % addObject ( obj ) CALL FTAssertEqual ( 2 , v % refCount (), \"Adding object adds ownership\" ) CALL release ( v ) END DO CALL FTAssertEqual ( 10 , array % COUNT (), \"Number of objects in array is equal to number of objects added\" ) ! !        ----------------------------- !        Check the values in the array !        ----------------------------- ! !         CALL array % printDescription(6) ! To print the array, if desired. DO i = 1 , 10 obj => array % objectAtIndex ( i ) ! Get the object v => valueFromObject ( obj ) ! Convert it to a value. CALL FTAssert ( test = ASSOCIATED ( v ), msg = \"Object not found at index\" ) IF ( ASSOCIATED ( v ) ) THEN CALL FTAssertEqual ( values ( i ), v % integerValue (), \"Object values\" ) END IF END DO ! !        --------------------------------------------------- !        Replace the object at index 5 !        The object that was there will be deallocated since !        its sole owner is the array. !        --------------------------------------------------- ! ALLOCATE ( v ) CALL v % initwithValue ( 22 ) obj => v CALL array % replaceObjectAtIndexWithObject ( 5 , obj ) CALL FTAssertEqual ( 2 , v % refCount (), \"Replacement refCount\" ) CALL release ( v ) ! !        ---------------------- !        Get the replaced value !        ---------------------- ! obj => array % objectAtIndex ( 5 ) v => valueFromObject ( obj = obj ) CALL FTAssertEqual ( 22 , v % integerValue (), \"Replacement value\" ) CALL FTAssertEqual ( 1 , v % refCount (), \"Refcount after main release\" ) ! !        ------------------------------------------ !        Add another value - this should reallocate !        ------------------------------------------ ! ALLOCATE ( v ) CALL v % initWithValue ( 11 ) obj => v CALL array % addObject ( obj ) CALL release ( v ) CALL FTAssertEqual ( 11 , array % COUNT (), \"Number of objects in array is increased\" ) CALL FTAssertEqual ( 20 , array % allocatedSize (), \"Memory increased by chunk size\" ) ! !        ----------------------------------------------- !        Remove an item from the array. For this test we !        will keep ownership of the item to make sure !        that it is removed properly. !        ----------------------------------------------- ! obj => array % objectAtIndex ( 8 ) CALL obj % retain () CALL array % removeObjectAtIndex ( 8 ) CALL FTAssertEqual ( 10 , array % COUNT (), \"Item deleted count\" ) CALL FTAssertEqual ( 1 , obj % refcount (), \"Refcount after removal\" ) CALL releaseFTObject ( obj ) IF ( . NOT . ASSOCIATED ( obj ) ) THEN CALL FTAssert (. true ., \"Object properly deallocated\" ) ELSE CALL FTAssert (. FALSE ., \"Object properly deallocated\" ) END IF ! !        ----------------------------------- !        Check the values in the array again !        ----------------------------------- ! DO i = 1 , 10 obj => array % objectAtIndex ( i ) v => valueFromObject ( obj ) CALL FTAssertEqual ( modifiedValues ( i ), v % integerValue (), \"Object values after deletion\" ) END DO ! !        ------------------------------------------------------------- !        Release array contents !        ------------------------------------------------------------- ! CALL release ( array ) END SUBROUTINE MutableArrayClassTests","tags":"","loc":"sourcefile/mutablearraytests.f90.html","title":"MutableArrayTests.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~sparsematrixtests.f90~~EfferentGraph sourcefile~sparsematrixtests.f90 SparseMatrixTests.f90 sourcefile~assert.f90 Assert.f90 sourcefile~assert.f90->sourcefile~sparsematrixtests.f90 sourcefile~ftsparsematrixclass.f90 FTSparseMatrixClass.f90 sourcefile~ftsparsematrixclass.f90->sourcefile~sparsematrixtests.f90 sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~ftvalueclass.f90->sourcefile~sparsematrixtests.f90 sourcefile~comparisons.f90 Comparisons.f90 sourcefile~comparisons.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90->sourcefile~ftvalueclass.f90 sourcefile~ftolconstants.f90->sourcefile~comparisons.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftsparsematrixclass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftvalueclass.f90 sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftsparsematrixclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 var pansourcefilesparsematrixtestsf90EfferentGraph = svgPanZoom('#sourcefilesparsematrixtestsf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Subroutines SparseMatrixTests Source Code SparseMatrixTests.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      SparseMatrixTests.f90 !      Created: July 29, 2013 2:17 PM !      By: David Kopriva ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE SparseMatrixTests USE FTValueClass USE FTAssertions USE FTSparseMatrixClass IMPLICIT NONE ! !        -------------------------------- !        We will store values in a matrix !        -------------------------------- ! CLASS ( FTValue ) , POINTER :: v CLASS ( FTValue ) , POINTER :: vTest CLASS ( FTObject ), POINTER :: obj TYPE ( FTSparseMatrix ) :: SparseMatrix INTEGER :: i , j , N INTEGER :: h1 , h2 LOGICAL :: t ! !        ------------------------------------- !        initialize a table with four elements !        ------------------------------------- ! N = 4 CALL SparseMatrix % initWithSize ( 4 ) CALL FTAssertEqual ( N , SparseMatrix % SparseMatrixSize (), \"Table size size\" ) obj => SparseMatrix % objectForKeys ( 2 , 3 ) CALL FTAssertEqual (. FALSE ., ASSOCIATED ( obj ), \"Empty table test\" ) ! !        --------------------------------------------------------- !        Add an object to the table, retrieve it and then destroy !        the table !        --------------------------------------------------------- ! ALLOCATE ( v ) CALL v % initWithValue ( 42 ) obj => v CALL SparseMatrix % addObjectForKeys ( obj , 2 , 3 ) CALL FTAssertEqual ( 2 , v % refcount (), \"Add object to table reference count\" ) t = SparseMatrix % containsKeys ( 2 , 3 ) CALL FTAssertEqual (. TRUE ., t , \"contains value for key\" ) obj => SparseMatrix % objectforKeys ( 2 , 3 ) vTest => valueFromObject ( obj ) CALL FTAssertEqual ( 42 , vTest % integerValue (), \"Table entry retrieval\" ) CALL SparseMatrix % destruct () CALL FTAssertEqual ( 1 , v % refCount (), \"Table release object refCount\" ) CALL release ( v ) ! !        --------------------------------------------- !        Now create a hash table with a lot of entries !        --------------------------------------------- ! CALL SparseMatrix % initWithSize ( 4 ) DO j = 1 , N DO i = 1 , N h1 = Hash1 ([ i , j ]) h2 = Hash2 ([ i , j ]) ALLOCATE ( v ) CALL v % initWithValue ( i + j ) obj => v CALL SparseMatrix % addObjectForKeys ( obj , h1 , h2 ) CALL release ( v ) END DO END DO ! !        ------------ !        Get them out !        ------------ ! DO j = 1 , N DO i = 1 , N h1 = Hash1 ([ i , j ]) h2 = Hash2 ([ i , j ]) obj => SparseMatrix % objectForKeys ( h1 , h2 ) vTest => valueFromObject ( obj ) CALL FTAssertEqual ( 1 , vTest % refCount (), \"Table add refCount\" ) CALL FTAssertEqual ( i + j , vTest % integerValue (), \"Table entry value\" ) END DO END DO CALL vTest % retain () CALL FTAssertEqual ( 2 , vTest % refCount (), \"Retain refCount\" ) CALL SparseMatrix % destruct () CALL FTAssertEqual ( 1 , vTest % refCount (), \"Table release object refCount\" ) CALL release ( v ) IF ( ASSOCIATED ( v ) ) THEN CALL FTAssert (. FALSE ., \"Release object count\" ) END IF END SUBROUTINE SparseMatrixTests","tags":"","loc":"sourcefile/sparsematrixtests.f90.html","title":"SparseMatrixTests.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~stackstests.f90~~EfferentGraph sourcefile~stackstests.f90 StacksTests.f90 sourcefile~assert.f90 Assert.f90 sourcefile~assert.f90->sourcefile~stackstests.f90 sourcefile~ftstackclass.f90 FTStackClass.f90 sourcefile~ftstackclass.f90->sourcefile~stackstests.f90 sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~ftvalueclass.f90->sourcefile~stackstests.f90 sourcefile~comparisons.f90 Comparisons.f90 sourcefile~comparisons.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90->sourcefile~ftvalueclass.f90 sourcefile~ftolconstants.f90->sourcefile~comparisons.f90 sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftstackclass.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftvalueclass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 var pansourcefilestackstestsf90EfferentGraph = svgPanZoom('#sourcefilestackstestsf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules StackUnitTestsModule Subroutines StackClassTests Source Code StacksTests.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      StacksTests.f90 !      Created: January 28, 2013 10:11 AM !      By: David Kopriva ! !//////////////////////////////////////////////////////////////////////// ! Module StackUnitTestsModule IMPLICIT NONE CONTAINS ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE testStackInit ( stack ) USE FTAssertions USE FTStackClass IMPLICIT NONE CLASS ( FTStack ) , POINTER :: stack ! CALL FTAssert ( test = ASSOCIATED ( stack ), msg = \"testStackPush: Stack not associated. Abort Test\" ) IF ( . NOT . ASSOCIATED ( stack )) RETURN CALL stack % init () CALL FTAssertEqual ( 1 , stack % refCount (), \"testStackInit: Initial reference count\" ) CALL FTAssertEqual ( 0 , stack % count (), \"testStackInit: initial size\" ) END SUBROUTINE testStackInit ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE testStackPush ( stack ) USE FTAssertions USE FTStackClass USE FTValueClass IMPLICIT NONE CLASS ( FTStack ) , POINTER :: stack CLASS ( FTValue ) , POINTER :: r1 CLASS ( FTObject ), POINTER :: objectPtr CLASS ( FTValue ) , POINTER :: rPeek CALL FTAssert ( test = ASSOCIATED ( stack ), msg = \"testStackPush: Stack not associated. Abort Test.\" ) ALLOCATE ( r1 ) CALL r1 % initWithValue ( 3.14 d0 ) objectPtr => r1 CALL stack % push ( objectPtr ) CALL FTAssertEqual ( 1 , stack % COUNT (), \"testStackPush: Initial push reference count\" ) CALL FTAssertEqual ( 2 , r1 % refCount () , \"testStackPush: Reference count on stored object\" ) CALL release ( r1 ) CALL FTAssertEqual ( 1 , r1 % refCount (), \"testStackPush: Release on stored object\" ) objectPtr => stack % peek () rPeek => valueFromObject ( objectPtr ) CALL FTAssertEqual ( expectedValue = 3.14 d0 , & actualValue = rPeek % doublePrecisionValue () , & tol = 1.0 d - 12 , & msg = \"testStackPush: Value of stored object\" ) END SUBROUTINE testStackPush END Module StackUnitTestsModule ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE StackClassTests USE FTAssertions USE FTStackClass USE FTValueClass USE StackUnitTestsModule IMPLICIT NONE CLASS ( FTStack ) , POINTER :: stack CLASS ( FTValue ) , POINTER :: r1 , r2 , r3 CLASS ( FTObject ), POINTER :: objectPtr ! !        --------------- !        Initializations !        --------------- ! ALLOCATE ( stack ) CALL testStackInit ( stack ) ! !        ------------ !        Add an entry !        ------------ ! CALL testStackPush ( stack ) ! !        ------------ !        Second entry !        ------------ ! ALLOCATE ( r2 ) CALL r2 % initWithValue ( \"r2 is a string\" ) objectPtr => r2 CALL stack % push ( objectPtr ) CALL release ( r2 ) CALL FTAssertEqual ( 2 , stack % count (), \"StackClassTests: Stack size after second push\" ) ! !        ----------- !        Third entry !        ----------- ! ALLOCATE ( r3 ) CALL r3 % initWithValue ( 17 ) objectPtr => r3 CALL stack % push ( objectPtr ) CALL FTAssertEqual ( 3 , stack % COUNT (), \"StackClassTests: Stack size after third push\" ) CALL release ( r3 ) ! !        ------------ !        Peek and pop !        ------------ ! objectPtr => stack % peek () SELECT TYPE ( objectPtr ) TYPE is ( FTValue ) CALL FTAssertEqual ( 17 , objectPtr % integerValue (),& \"StackClassTests: Interger value stored at top of stack\" ) CLASS DEFAULT PRINT * , \"uncaught cast in stack object\" END SELECT CALL stack % pop ( objectPtr ) SELECT TYPE ( objectPtr ) TYPE is ( FTValue ) CALL FTAssertEqual ( 17 , objectPtr % integerValue (),& \"StackClassTests: Incorrect integervalue popped from top of stack\" ) CLASS DEFAULT CALL FTAssert (. false ., \"StackClassTests: UnKnown type stored in linked list\" ) END SELECT CALL FTAssertEqual ( 2 , stack % COUNT (), \"StackClassTests: Stack count after popping\" ) ! !        ------------------------ !        Finish up with the stack !        ------------------------ ! CALL release ( stack ) END SUBROUTINE StackClassTests","tags":"","loc":"sourcefile/stackstests.f90.html","title":"StacksTests.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~valueclasstests.f90~~EfferentGraph sourcefile~valueclasstests.f90 ValueClassTests.f90 sourcefile~assert.f90 Assert.f90 sourcefile~assert.f90->sourcefile~valueclasstests.f90 sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~ftvalueclass.f90->sourcefile~valueclasstests.f90 sourcefile~comparisons.f90 Comparisons.f90 sourcefile~comparisons.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90->sourcefile~ftvalueclass.f90 sourcefile~ftolconstants.f90->sourcefile~comparisons.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftvalueclass.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Subroutines FTValueClassTests Source Code ValueClassTests.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      FTValueClassTests.f90 !      Created: January 15, 2013 5:13 PM !      By: David Kopriva ! !     Demonstrate and test the components of !     the FTValue class. An FTValue is a wrapper !     to a !         double precision !         real !         logical !         string of length FTVALUE_STRING_LENGTH !         integer ! !     These values can then be stored in one of the collection !     classes. ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE FTValueClassTests USE FTValueClass USE FTAssertions IMPLICIT NONE ! !        ------------------------------------------------------- !        FTValue is the class to test here and the instance is v !        It will be a pointer if it is to be added to a !        container. !        ------------------------------------------------------- ! CLASS ( FTValue ), POINTER :: v ! !        ------------------------------------------- !        Some values to convert into FTValue objects !        ------------------------------------------- ! REAL :: r = 3.14 , x REAL ( KIND = KIND ( 1.0 d0 )) :: d , dd INTEGER :: i = 666 , j CHARACTER ( LEN = :), ALLOCATABLE :: s DOUBLE PRECISION :: doubleTol = 2 * EPSILON ( 1.0 d0 ) REAL :: singleTol = 2 * EPSILON ( 1.0e0 ) ! !        -------------------------------------------- !        Create an object storing a real value !        init*** returns an FTObject with ownership !        given to this calling routine (refCount =1). !        -------------------------------------------- ! ALLOCATE ( v ) CALL v % initWithValue ( r ) ! !        ---------------------------------------------------------------------------------- !        Description returns a string that represents an object. Here it is just !        the number represented as a string, but for more complex objects like linked lists !        it could be abitrarily complicated !        ---------------------------------------------------------------------------------- ! s = v % description () ! !        ----------------------------- !        Test to make sure it is right !        ----------------------------- ! CALL FTAssertEqual ( \"3.140000\" , s ( 1 : 8 ), \"Compare description for real value\" ) ! !        -------------------------- !        Also test the string value !        -------------------------- ! s = v % stringValue ( 8 ) CALL FTAssertEqual ( \"3.140000\" , s ( 1 : 8 ), \"Compare string value for real value\" ) ! !        -------------------------------------------------------------------------- !        Test Reference counting. !           Retaining an object implies that this routine wants to !           share ownership of an object. (In fact, it already does, so the retain !           is redundant.) !           Releasing an object implies that the caller releases its share of !           the object. Note that, because of the init call, we still own the !           object after the retain+release. !        -------------------------------------------------------------------------- ! CALL FTAssertEqual ( 1 , v % refCount (), \"Reference counting: Initial object refCount\" ) CALL v % retain () CALL FTAssertEqual ( 2 , v % refCount (), \"Reference counting: Retain count increase\" ) CALL release ( v ) CALL FTAssertEqual ( 1 , v % refCount (), \"Reference counting: retain count decrease\" ) ! !        ----------------------------------------------------------------- !        Test storage of the real value. An FTObject can return any one of !        the basic variable types, appropriately modified. Make sure that !        each is correct. !        ---------------------------------------------------------------- ! CALL FTAssertEqual ( 3.14 , v % realValue (), singleTol , \"Real storage to real\" ) CALL FTAssertEqual ( 3 , v % integerValue (), \"Integer return for real object\" ) CALL FTAssertEqual ( DBLE ( 3.14 ), v % doublePrecisionValue (), doubleTol , \"Double return for real object\" ) s = v % stringValue ( 8 ) CALL FTAssertEqual ( \"3.140000\" , s ( 1 : 8 ), \"String return for real object\" ) CALL FTAssertEqual (. true ., v % logicalValue (), \"Logical return for real object\" ) ! !        ---------------------------------------------------------------- !        Destruction. !        ---------------------------------------------------------------- ! CALL release ( v ) CALL FTAssert ( test = . NOT . ASSOCIATED ( v ), msg = \"Final release deletes object 1\" ) ! !        -------------------------------------- !        Now do the same with an integer number !        -------------------------------------- ! ALLOCATE ( v ) CALL v % initWithValue ( i ) CALL FTAssertEqual ( 66 6.0 , v % realValue (), singleTol , \"Integer storage to real\" ) CALL FTAssertEqual ( 666 , v % integerValue (), \"Integer storage to integer\" ) CALL FTAssertEqual ( DBLE ( 66 6.0 ), v % doublePrecisionValue (), doubleTol , \"Integer storage to double\" ) CALL FTAssertEqual ( \"666\" , v % stringValue ( 3 ), \"Integer storage to string\" ) CALL FTAssertEqual (. true ., v % logicalValue (), \"Integer storage to logical\" ) ! !        ------------------------------------------ !        We are done with this value, so release it !        ------------------------------------------ ! CALL release ( v ) CALL FTAssert ( test = . NOT . ASSOCIATED ( v ), msg = \"Final release deletes object 2\" ) ! !        ------------------------------- !        Store a double precision number !        ------------------------------- ! d = 1.0 d0 / 3.0 d0 ALLOCATE ( v ) CALL v % initWithValue ( d ) CALL FTAssertEqual ( REAL ( d ), v % realValue (), singleTol , \"Double storage to real\" ) CALL FTAssertEqual ( 0 , v % integerValue (), \"Double storage to integer\" ) CALL FTAssertEqual ( d , v % doublePrecisionValue (), doubleTol , \"Double storage to double\" ) s = v % stringValue ( 16 ) CALL FTAssertEqual ( \"0.33333333333333\" , s ( 1 : 16 ), \"Double storage to string\" ) CALL FTAssertEqual (. true ., v % logicalValue (), \"Double storage to logical\" ) ! !        ----------------------------------------------- !        We are done with this value, too, so release it !        ----------------------------------------------- ! CALL release ( v ) CALL FTAssert ( test = . NOT . ASSOCIATED ( v ), msg = \"Final release deletes object 3\" ) ! !        --------------------------------------------------- !        Lastly, save a string and read it as numeric values !        --------------------------------------------------- ! ALLOCATE ( v ) CALL v % initWithValue ( \"3.14\" ) x = v % realValue () CALL FTAssertEqual ( 3.14e0 , x , singleTol , \"String storage to real\" ) CALL release ( v ) CALL FTAssert ( test = . NOT . ASSOCIATED ( v ), msg = \"Final release deletes object 4\" ) ALLOCATE ( v ) CALL v % initWithValue ( \"3567\" ) j = v % integerValue () CALL FTAssertEqual ( 3567 , j , \"String storage to integer\" ) CALL release ( v ) CALL FTAssert ( test = . NOT . ASSOCIATED ( v ), msg = \"Final release deletes object 5\" ) ALLOCATE ( v ) CALL v % initWithValue ( \"3.141592653589793\" ) dd = v % doublePrecisionValue () CALL FTAssertEqual ( 3.141592653589793 d0 , dd , doubleTol , \"String storage to real\" ) CALL release ( v ) CALL FTAssert ( test = . NOT . ASSOCIATED ( v ), msg = \"Final release deletes object 6\" ) END SUBROUTINE FTValueClassTests","tags":"","loc":"sourcefile/valueclasstests.f90.html","title":"ValueClassTests.f90 – FTObjectLibrary"},{"text":"This File Depends On sourcefile~~valuedictionarytests.f90~~EfferentGraph sourcefile~valuedictionarytests.f90 ValueDictionaryTests.f90 sourcefile~ftvaluedictionaryclass.f90 FTValueDictionaryClass.f90 sourcefile~ftvaluedictionaryclass.f90->sourcefile~valuedictionarytests.f90 sourcefile~assert.f90 Assert.f90 sourcefile~assert.f90->sourcefile~valuedictionarytests.f90 sourcefile~ftdictionaryclass.f90 FTDictionaryClass.f90 sourcefile~ftdictionaryclass.f90->sourcefile~ftvaluedictionaryclass.f90 sourcefile~ftvalueclass.f90 FTValueClass.f90 sourcefile~ftvalueclass.f90->sourcefile~ftvaluedictionaryclass.f90 sourcefile~ftobjectclass.f90 FTObjectClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftvalueclass.f90 sourcefile~ftlinkedlistclass.f90 FTLinkedListClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftobjectarrayclass.f90 FTObjectArrayClass.f90 sourcefile~ftobjectclass.f90->sourcefile~ftobjectarrayclass.f90 sourcefile~ftlinkedlistclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftdictionaryclass.f90 sourcefile~ftobjectarrayclass.f90->sourcefile~ftlinkedlistclass.f90 sourcefile~ftolconstants.f90 FTOLConstants.f90 sourcefile~ftolconstants.f90->sourcefile~assert.f90 sourcefile~ftolconstants.f90->sourcefile~ftvalueclass.f90 sourcefile~comparisons.f90 Comparisons.f90 sourcefile~ftolconstants.f90->sourcefile~comparisons.f90 sourcefile~comparisons.f90->sourcefile~assert.f90 var pansourcefilevaluedictionarytestsf90EfferentGraph = svgPanZoom('#sourcefilevaluedictionarytestsf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Subroutines FTValueDictionaryClassTests Source Code ValueDictionaryTests.f90 Source Code ! !//////////////////////////////////////////////////////////////////////// ! !      FTValueDicitonaryTests.f90 !      Created: February 6, 2013 9:41 AM !      By: David Kopriva ! !//////////////////////////////////////////////////////////////////////// ! SUBROUTINE FTValueDictionaryClassTests USE FTValueDictionaryClass USE FTAssertions IMPLICIT NONE TYPE ( FTValueDictionary ) :: dict ! !        ----------------------- !        Example values and keys !        ----------------------- ! CHARACTER ( LEN = FTDICT_KWD_STRING_LENGTH ), DIMENSION ( 4 ) :: keys = [ \"first \" , \"second\" , \"third \" , \"fourth\" ] INTEGER , DIMENSION ( 4 ) :: intValues = [ 1 , 2 , 3 , 4 ] REAL , DIMENSION ( 4 ) :: realValues = [ 1.1 , 2.1 , 3.1 , 4.1 ] CHARACTER ( LEN = FTDICT_KWD_STRING_LENGTH ), DIMENSION ( 4 ) :: stringValues = [ '1' , '2' , '3' , '4' ] INTEGER :: i , s REAL :: x CHARACTER ( LEN = FTDICT_KWD_STRING_LENGTH ) :: sValue ! !        ------------------------------------------------------- !        Initialize the dictionary. We set it up with !        64 elements. The size should be large enough !        so that there are not a lot of name collisions, but not !        so big as to use up massive amounts of memory. The size !        should be a power of two. !        ------------------------------------------------------- ! CALL dict % initWithSize ( 64 ) ! !        ----------------------------------------- !        Add the keys and values to the dictionary !        ----------------------------------------- ! DO i = 1 , 4 CALL dict % addValueForKey ( intValues ( i ), keys ( i )) END DO ! !        ------------------ !        Get them back out !        ------------------ ! DO i = 1 , 4 s = dict % integerValueForKey ( keys ( i )) CALL FTAssertEqual ( s , intValues ( i ), \"Value for key as integer \" ) END DO ! !        ----------------------- !        Get them out as strings !        ----------------------- ! DO i = 1 , 4 sValue = dict % stringValueForKey ( keys ( i ), 8 ) CALL FTAssertEqual ( sValue , stringValues ( i ), \"Value for key as string \" ) END DO ! !        ------------------------------------------------------------ !        The dictionary is not a pointer, so we need only !        to call destruct for it to release (and here, deallocate) its !        objects !        ------------------------------------------------------------ ! CALL dict % destruct () ! !        --------------------- !        Redo with real values !        --------------------- ! CALL dict % initWithSize ( 64 ) ! !        ----------------------------------------- !        Add the keys and values to the dictionary !        ----------------------------------------- ! DO i = 1 , 4 CALL dict % addValueForKey ( realValues ( i ), keys ( i )) END DO ! !        ------------------ !        Get them back out !        ------------------ ! DO i = 1 , 4 x = dict % realValueForKey ( keys ( i )) CALL FTAssertEqual ( x , realValues ( i ), 2 * EPSILON ( x ), \"Value for key as real \" ) END DO ! !        ----------------------- !        Check superclass method !        ----------------------- ! CALL FTAssert ( dict % containsKey ( \"first\" ) , msg = \"dictionary contains key\" ) CALL FTAssert (. NOT . dict % containsKey ( \"bob\" ), msg = \"dictionary does not contain key\" ) ! !        ------------------------------------------------------------ !        The dictionary is not a pointer, so we need only !        to call release for it to release (and here, deallocate) its !        objects !        ------------------------------------------------------------ ! CALL dict % destruct () END SUBROUTINE FTValueDictionaryClassTests","tags":"","loc":"sourcefile/valuedictionarytests.f90.html","title":"ValueDictionaryTests.f90 – FTObjectLibrary"},{"text":"type, public, EXTENDS(FTObject) :: Calculator Type-Bound Procedures init destruct clear enterOperation enterValue enter readDisplay Type-Bound Procedures procedure, public :: init => initCalculator private subroutine initCalculator(self) Arguments Type Intent Optional Attributes Name class( Calculator ) :: self procedure, public :: destruct => destructCalculator private subroutine destructCalculator(self) Arguments Type Intent Optional Attributes Name class( Calculator ) :: self procedure, public :: clear => clearCalculator private subroutine clearCalculator(self) Arguments Type Intent Optional Attributes Name class( Calculator ) :: self procedure, public :: enterOperation private subroutine enterOperation(self, op) Arguments Type Intent Optional Attributes Name class( Calculator ) :: self character(len=*) :: op procedure, public :: enterValue private subroutine enterValue(self, v) Arguments Type Intent Optional Attributes Name class( Calculator ) :: self real(kind=FT_DOUBLE_PRECISION_KIND) :: v generic, public :: enter => enterOperation , enterValue private subroutine enterOperation(self, op) Arguments Type Intent Optional Attributes Name class( Calculator ) :: self character(len=*) :: op private subroutine enterValue(self, v) Arguments Type Intent Optional Attributes Name class( Calculator ) :: self real(kind=FT_DOUBLE_PRECISION_KIND) :: v procedure, public :: readDisplay private function readDisplay(self) result(r) Arguments Type Intent Optional Attributes Name class( Calculator ) :: self Return Value real(kind=FT_DOUBLE_PRECISION_KIND)","tags":"","loc":"type/calculator.html","title":"Calculator – FTObjectLibrary "},{"text":"type, public, EXTENDS(FTObject) :: FTData Type-Bound Procedures initWithDataOfType storedData className Type-Bound Procedures procedure, public :: initWithDataOfType public subroutine initWithDataOfType (self, genericData, dataType) Arguments Type Intent Optional Attributes Name class( FTData ) :: self character(len=1) :: genericData (:) character(len=*) :: dataType procedure, public :: storedData public function storedData (self) result(d) Arguments Type Intent Optional Attributes Name class( FTData ) :: self Return Value character(len=1)\n  (SIZE(self%dataStorage)) procedure, public :: className => dataClassName public function dataClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTData ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH)","tags":"","loc":"type/ftdata.html","title":"FTData – FTObjectLibrary "},{"text":"type, public, EXTENDS(FTObject) :: FTKeyObjectPair type~~ftkeyobjectpair~~InheritsGraph type~ftkeyobjectpair FTKeyObjectPair FTObject FTObject FTObject->type~ftkeyobjectpair valueObject Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables keyString valueObject Type-Bound Procedures initWithObjectAndKey destruct description printDescription key object Components Type Visibility Attributes Name Initial character(len=FTDICT_KWD_STRING_LENGTH), public :: keyString class(FTObject), public, POINTER :: valueObject => NULL() Type-Bound Procedures procedure, public :: initWithObjectAndKey public subroutine initWithObjectAndKey (self, v, key) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ) :: self class(FTObject), POINTER :: v character(len=*) :: key procedure, public :: destruct => destructFTKeyObjectPair public subroutine destructFTKeyObjectPair (self) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ) :: self procedure, public :: description => FTKeyObjectPairDescription public function FTKeyObjectPairDescription (self) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ) :: self Return Value character(len=DESCRIPTION_CHARACTER_LENGTH) procedure, public :: printDescription => printFTKeyObjectPairDescription public subroutine printFTKeyObjectPairDescription (self, iUnit) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ) :: self integer :: iUnit procedure, public :: key public function key (self) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ) :: self Return Value character(len=FTDICT_KWD_STRING_LENGTH) procedure, public :: object public function object (self) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ) :: self Return Value class(FTObject),\n  POINTER","tags":"","loc":"type/ftkeyobjectpair.html","title":"FTKeyObjectPair – FTObjectLibrary "},{"text":"type, public, EXTENDS(FTObject) :: FTDictionary type~~ftdictionary~~InheritsGraph type~ftdictionary FTDictionary FTLinkedList FTLinkedList FTLinkedList->type~ftdictionary entries Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables numberOfEntries isCaseSensitive entries Type-Bound Procedures initWithSize init setCaseSensitive caseSensitive allKeys allObjects destruct addObjectForKey description printDescription objectForKey containsKey className COUNT Components Type Visibility Attributes Name Initial integer, public :: numberOfEntries logical, public :: isCaseSensitive type(FTLinkedList), public, DIMENSION(:), POINTER :: entries => NULL() Type-Bound Procedures procedure, public :: initWithSize public subroutine initWithSize (self, sze) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self integer, intent(in) :: sze procedure, public :: init public subroutine init (self) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self procedure, public :: setCaseSensitive public subroutine setCaseSensitive (self, bool) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self logical :: bool procedure, public :: caseSensitive public function caseSensitive (self) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Return Value logical procedure, public :: allKeys => AllKeys public function AllKeys (self) result(keys) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Return Value character(len=FTDICT_KWD_STRING_LENGTH),\n  POINTER, (:) procedure, public :: allObjects => AllObjects public function AllObjects (self) result(objectArray) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Return Value class(FTMutableObjectArray),\n  POINTER procedure, public :: destruct => destructFTDictionary public subroutine destructFTDictionary (self) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self procedure, public :: addObjectForKey public subroutine addObjectForKey (self, object, key) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self class(FTObject), POINTER :: object character(len=*) :: key procedure, public :: description => FTDictionaryDescription public function FTDictionaryDescription (self) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Return Value character(len=DESCRIPTION_CHARACTER_LENGTH) procedure, public :: printDescription => printFTDictionaryDescription public subroutine printFTDictionaryDescription (self, iUnit) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self integer :: iUnit procedure, public :: objectForKey public function objectForKey (self, key) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self character(len=*) :: key Return Value class(FTObject),\n  POINTER procedure, public :: containsKey public function containsKey (self, key) result(r) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self character(len=*) :: key Return Value logical procedure, public :: className => dictionaryClassName public function dictionaryClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH) procedure, public :: COUNT public function COUNT (self) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Return Value integer","tags":"","loc":"type/ftdictionary.html","title":"FTDictionary – FTObjectLibrary "},{"text":"type, public, EXTENDS(FTObject) :: FTException Type-Bound Procedures initFTException initWarningException initFatalException initAssertionFailureException destruct setInfoDictionary infoDictionary exceptionName severity printDescription className Type-Bound Procedures procedure, public :: initFTException public subroutine initFTException (self, severity, exceptionName, infoDictionary) The main initializer for the class Arguments Type Intent Optional Attributes Name class( FTException ) :: self integer :: severity character(len=*) :: exceptionName class(FTDictionary), optional POINTER :: infoDictionary procedure, public :: initWarningException public subroutine initWarningException (self, msg) A convenience initializer for a warning error \nthat includes the key \"message\" in the\ninfoDictionary. Use this initializer as an \nexample of how to write one's own exception. Arguments Type Intent Optional Attributes Name class( FTException ) :: self character(len=*) :: msg procedure, public :: initFatalException public subroutine initFatalException (self, msg) A convenience initializer for a fatal error \nthat includes the key \"message\" in the\ninfoDictionary.Use this initializer as an \nexample of how to write one's own exception. Arguments Type Intent Optional Attributes Name class( FTException ) :: self character(len=*) :: msg procedure, public :: initAssertionFailureException public subroutine initAssertionFailureException (self, msg, expectedValueObject, ObservedValueObject, level) A convenience initializer for an assertion error \nthat includes the keys: Arguments Type Intent Optional Attributes Name class( FTException ) :: self character(len=*) :: msg class(FTValue), POINTER :: expectedValueObject class(FTValue), POINTER :: ObservedValueObject integer :: level procedure, public :: destruct => destructException public subroutine destructException (self) The destructor for the class. Do not call this direectly. Call\nthe release() procedure instead Arguments Type Intent Optional Attributes Name class( FTException ) :: self procedure, public :: setInfoDictionary public subroutine setInfoDictionary (self, dict) Sets and retains the exception infoDictionary Arguments Type Intent Optional Attributes Name class( FTException ) :: self class(FTDictionary), POINTER :: dict procedure, public :: infoDictionary public function infoDictionary (self) Returns the exception's infoDictionary. Does\nnot transfer ownership/reference count is \nunchanged. Arguments Type Intent Optional Attributes Name class( FTException ) :: self Return Value class(FTDictionary),\n  POINTER procedure, public :: exceptionName public function exceptionName (self) Returns the string representing the name set\nfor the exception. Arguments Type Intent Optional Attributes Name class( FTException ) :: self Return Value character(len=ERROR_MSG_STRING_LENGTH) procedure, public :: severity public function severity (self) Returns the severity level of the exception. Arguments Type Intent Optional Attributes Name class( FTException ) :: self Return Value integer procedure, public :: printDescription => printFTExceptionDescription public subroutine printFTExceptionDescription (self, iUnit) A basic printing of the exception and the info\nheld in the infoDicitonary. Arguments Type Intent Optional Attributes Name class( FTException ) :: self integer :: iUnit procedure, public :: className => exceptionClassName public function exceptionClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTException ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH)","tags":"","loc":"type/ftexception.html","title":"FTException – FTObjectLibrary "},{"text":"type, public, EXTENDS(FTObject) :: FTLinkedListRecord type~~ftlinkedlistrecord~~InheritsGraph type~ftlinkedlistrecord FTLinkedListRecord type~ftlinkedlistrecord->type~ftlinkedlistrecord next, previous FTObject FTObject FTObject->type~ftlinkedlistrecord recordObject Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables recordObject next previous Type-Bound Procedures initWithObject destruct printDescription className Components Type Visibility Attributes Name Initial class(FTObject), public, POINTER :: recordObject => NULL() class( FTLinkedListRecord ), public, POINTER :: next => NULL() class( FTLinkedListRecord ), public, POINTER :: previous => NULL() Type-Bound Procedures procedure, public :: initWithObject public subroutine initWithObject (self, obj) Arguments Type Intent Optional Attributes Name class( FTLinkedListRecord ) :: self class(FTObject), POINTER :: obj procedure, public :: destruct => destructFTLinkedListRecord public subroutine destructFTLinkedListRecord (self) Arguments Type Intent Optional Attributes Name class( FTLinkedListRecord ) :: self procedure, public :: printDescription => printFTLinkedRecordDescription public subroutine printFTLinkedRecordDescription (self, iUnit) Arguments Type Intent Optional Attributes Name class( FTLinkedListRecord ) :: self integer :: iUnit procedure, public :: className => llRecordClassName public function llRecordClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTLinkedListRecord ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH)","tags":"","loc":"type/ftlinkedlistrecord.html","title":"FTLinkedListRecord – FTObjectLibrary "},{"text":"type, public, EXTENDS(FTObject) :: FTLinkedList type~~ftlinkedlist~~InheritsGraph type~ftlinkedlist FTLinkedList FTLinkedListRecord FTLinkedListRecord FTLinkedListRecord->type~ftlinkedlist head, tail Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables head tail nRecords isCircular_ Type-Bound Procedures init add remove reverse removeRecord destruct count description printDescription className allObjects removeAllObjects addObjectsFromList makeCircular isCircular insertObjectAfterRecord insertObjectAfterObject Components Type Visibility Attributes Name Initial class(FTLinkedListRecord), public, POINTER :: head => NULL() class(FTLinkedListRecord), public, POINTER :: tail => NULL() integer, public :: nRecords logical, public :: isCircular_ Type-Bound Procedures procedure, public :: init => initFTLinkedList public subroutine initFTLinkedList (self) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self procedure, public :: add public subroutine add (self, obj) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class(FTObject), POINTER :: obj procedure, public :: remove => removeObject public subroutine removeObject (self, obj) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class(FTObject), POINTER :: obj procedure, public :: reverse => reverseLinkedList public subroutine reverseLinkedList (self) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self procedure, public :: removeRecord => removeLinkedListRecord public subroutine removeLinkedListRecord (self, listRecord) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class(FTLinkedListRecord), POINTER :: listRecord procedure, public :: destruct => destructFTLinkedList public subroutine destructFTLinkedList (self) It is automatically called by release(). Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self procedure, public :: count => numberOfRecords public function numberOfRecords (self) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Return Value integer procedure, public :: description => FTLinkedListDescription public function FTLinkedListDescription (self) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Return Value character(len=DESCRIPTION_CHARACTER_LENGTH) procedure, public :: printDescription => printFTLinkedListDescription public subroutine printFTLinkedListDescription (self, iUnit) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self integer :: iUnit procedure, public :: className => linkedListClassName public function linkedListClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH) procedure, public :: allObjects => allLinkedListObjects public function allLinkedListObjects (self) result(array) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Return Value class(FTMutableObjectArray),\n  POINTER procedure, public :: removeAllObjects => removeAllLinkedListObjects public subroutine removeAllLinkedListObjects (self) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self procedure, public :: addObjectsFromList public subroutine addObjectsFromList (self, list) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class( FTLinkedList ), POINTER :: list procedure, public :: makeCircular public subroutine makeCircular (self, circular) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self logical :: circular procedure, public :: isCircular public function isCircular (self) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Return Value logical procedure, public :: insertObjectAfterRecord public subroutine insertObjectAfterRecord (self, obj, after) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class(FTObject), POINTER :: obj class(FTLinkedListRecord), POINTER :: after procedure, public :: insertObjectAfterObject public subroutine insertObjectAfterObject (self, obj, after) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class(FTObject), POINTER :: obj class(FTObject), POINTER :: after","tags":"","loc":"type/ftlinkedlist.html","title":"FTLinkedList – FTObjectLibrary "},{"text":"type, public, EXTENDS(FTObject) :: FTLinkedListIterator type~~ftlinkedlistiterator~~InheritsGraph type~ftlinkedlistiterator FTLinkedListIterator FTLinkedList FTLinkedList FTLinkedList->type~ftlinkedlistiterator list FTLinkedListRecord FTLinkedListRecord FTLinkedListRecord->type~ftlinkedlistiterator current Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables list current Type-Bound Procedures init initWithFTLinkedList destruct isAtEnd object currentRecord linkedList className setLinkedList setToStart moveToNext removeCurrentRecord Components Type Visibility Attributes Name Initial class(FTLinkedList), public, POINTER :: list => NULL() class(FTLinkedListRecord), public, POINTER :: current => NULL() Type-Bound Procedures procedure, public :: init => initEmpty public subroutine initEmpty (self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self procedure, public :: initWithFTLinkedList public subroutine initWithFTLinkedList (self, list) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self class(FTLinkedList), POINTER :: list procedure, public :: destruct => destructIterator public subroutine destructIterator (self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self procedure, public :: isAtEnd => FTLinkedListIsAtEnd public function FTLinkedListIsAtEnd (self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Return Value logical procedure, public :: object => FTLinkedListObject public function FTLinkedListObject (self) result(o) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Return Value class(FTObject),\n  POINTER procedure, public :: currentRecord => FTLinkedListCurrentRecord public function FTLinkedListCurrentRecord (self) result(o) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Return Value class(FTLinkedListRecord),\n  POINTER procedure, public :: linkedList => returnLinkedList public function returnLinkedList (self) result(o) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Return Value class(FTLinkedList),\n  POINTER procedure, public :: className => linkedListIteratorClassName public function linkedListIteratorClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH) procedure, public :: setLinkedList public subroutine setLinkedList (self, list) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self class(FTLinkedList), POINTER :: list procedure, public :: setToStart public subroutine setToStart (self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self procedure, public :: moveToNext public subroutine moveToNext (self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self procedure, public :: removeCurrentRecord public subroutine removeCurrentRecord (self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self","tags":"","loc":"type/ftlinkedlistiterator.html","title":"FTLinkedListIterator – FTObjectLibrary "},{"text":"type, public, EXTENDS(FTObject) :: MultiIndexMatrixData type~~multiindexmatrixdata~~InheritsGraph type~multiindexmatrixdata MultiIndexMatrixData FTObject FTObject FTObject->type~multiindexmatrixdata object Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables key object Type-Bound Procedures initWithObjectAndKeys destruct Components Type Visibility Attributes Name Initial integer, public, ALLOCATABLE :: key (:) class(FTObject), public, POINTER :: object Type-Bound Procedures procedure, public :: initWithObjectAndKeys public subroutine initWithObjectAndKeys (self, object, key) Arguments Type Intent Optional Attributes Name class( MultiIndexMatrixData ) :: self class(FTObject), POINTER :: object integer :: key (:) procedure, public :: destruct => destructMultiIndexMatrixData public subroutine destructMultiIndexMatrixData (self) Arguments Type Intent Optional Attributes Name class( MultiIndexMatrixData ) :: self","tags":"","loc":"type/multiindexmatrixdata.html","title":"MultiIndexMatrixData – FTObjectLibrary "},{"text":"type, public, EXTENDS(FTObject) :: FTMultiIndexTable type~~ftmultiindextable~~InheritsGraph type~ftmultiindextable FTMultiIndexTable FTLinkedList FTLinkedList FTLinkedList->type~ftmultiindextable table Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables table Type-Bound Procedures initWithSize destruct containsKeys addObjectForKeys objectForKeys printDescription MultiIndexTableSize Components Type Visibility Attributes Name Initial class(FTLinkedList), public, DIMENSION(:), ALLOCATABLE :: table Type-Bound Procedures procedure, public :: initWithSize => initMultiIndexTableWithSize public subroutine initMultiIndexTableWithSize (self, N) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self integer :: N procedure, public :: destruct => destructMultiIndexTable public subroutine destructMultiIndexTable (self) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self procedure, public :: containsKeys => MultiIndexTableContainsKeys public function MultiIndexTableContainsKeys (self, keys) result(r) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self integer :: keys (:) Return Value logical procedure, public :: addObjectForKeys => addObjectToMultiIndexTableForKeys public subroutine addObjectToMultiIndexTableForKeys (self, obj, keys) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self class(FTObject), POINTER :: obj integer :: keys (:) procedure, public :: objectForKeys => objectInMultiIndexTableForKeys public function objectInMultiIndexTableForKeys (self, keys) result(r) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self integer :: keys (:) Return Value class(FTObject),\n  POINTER procedure, public :: printDescription => printMultiIndexTableDescription public subroutine printMultiIndexTableDescription (self, iUnit) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self integer :: iUnit procedure, public :: MultiIndexTableSize public function MultiIndexTableSize (self) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self Return Value integer","tags":"","loc":"type/ftmultiindextable.html","title":"FTMultiIndexTable – FTObjectLibrary "},{"text":"type, public, EXTENDS(FTObject) :: FTMutableObjectArray Type-Bound Procedures initWithSize destruct addObject replaceObjectAtIndexWithObject removeObjectAtIndex objectAtIndex printDescription className setChunkSize chunkSize COUNT allocatedSize Type-Bound Procedures procedure, public :: initWithSize => initObjectArrayWithSize public subroutine initObjectArrayWithSize (self, arraySize) Designated initializer. Initializes the amount of storage, but\n the array remains empty. Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self integer :: arraySize procedure, public :: destruct => destructObjectArray public subroutine destructObjectArray (self) Destructor for the class. This is called automatically when the\n reference count reaches zero. Do not call this yourself. Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self procedure, public :: addObject => addObjectToArray public subroutine addObjectToArray (self, obj) Add an object to the end of the array Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self class(FTObject), POINTER :: obj procedure, public :: replaceObjectAtIndexWithObject public subroutine replaceObjectAtIndexWithObject (self, indx, replacement) Replace an object at the index indx Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self integer :: indx class(FTObject), POINTER :: replacement procedure, public :: removeObjectAtIndex public subroutine removeObjectAtIndex (self, indx) Remove an object at the index indx Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self integer :: indx procedure, public :: objectAtIndex public function objectAtIndex (self, indx) result(obj) Access the object at the index indx Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self integer :: indx Return Value class(FTObject),\n  POINTER procedure, public :: printDescription => printArray public subroutine printArray (self, iUnit) Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self integer :: iUnit procedure, public :: className => arrayClassName public function arrayClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH) procedure, public :: setChunkSize public subroutine setChunkSize (self, chunkSize) Set the number of items to be added when the array needs to be re-sized Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self integer :: chunkSize procedure, public :: chunkSize public function chunkSize (self) Returns the number of items to be added when the array needs to be re-sized Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self Return Value integer procedure, public :: COUNT => numberOfItems public function numberOfItems (self) Generic name: count Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self Return Value integer procedure, public :: allocatedSize public function allocatedSize (self) Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self Return Value integer","tags":"","loc":"type/ftmutableobjectarray.html","title":"FTMutableObjectArray – FTObjectLibrary "},{"text":"type, public :: FTObject Type-Bound Procedures init destruct description printDescription className copy retain isUnreferenced refCount Type-Bound Procedures procedure, public :: init => initFTObject public subroutine initFTObject (self) Generic Name: init() Arguments Type Intent Optional Attributes Name class( FTObject ) :: self procedure, public :: destruct => destructFTObject public subroutine destructFTObject (self) Generic Name: destruct() Arguments Type Intent Optional Attributes Name class( FTObject ) :: self procedure, public :: description => FTObjectDescription public function FTObjectDescription (self) Returns a character string of length DESCRIPTION_CHARACTER_LENGTH that\n    represents the object. the base class implementation returns an empty\n    string. Note that if the description is too long, the expected string\n    will be trunctated. In general, one wants to use printDescription. Arguments Type Intent Optional Attributes Name class( FTObject ) :: self Return Value character(len=DESCRIPTION_CHARACTER_LENGTH) procedure, public :: printDescription => printFTObjectDescription public subroutine printFTObjectDescription (self, iUnit) Generic Name: printDescription() Arguments Type Intent Optional Attributes Name class( FTObject ) :: self integer :: iUnit procedure, public :: className public function className (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTObject ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH) procedure, public, NON_OVERRIDABLE :: copy => copyFTObject private function copyFTObject(self) result(copy) Base class implemetation of the assignment function. Call this from\n    within any subclasses copy assignment function. All FTObject's \n    implementation does is set\n    the reference count to one, implying no additional ownwership to the \n    caller that is creating the copy. Arguments Type Intent Optional Attributes Name class( FTObject ), intent(in) :: self Return Value class( FTObject ),\n  POINTER procedure, public, NON_OVERRIDABLE :: retain => retainFTObject public subroutine retainFTObject (self) Retain increases the reference count by one and implies ownership\n  to the caller.\n  ### Usage:\n        CALL obj\\ % retain() Arguments Type Intent Optional Attributes Name class( FTObject ) :: self procedure, public, NON_OVERRIDABLE :: isUnreferenced public function isUnreferenced (self) Arguments Type Intent Optional Attributes Name class( FTObject ) :: self Return Value logical procedure, public, NON_OVERRIDABLE :: refCount public function refCount (self) Returns the reference count for the object. Normally this is done\n    only for debugging purposes. Arguments Type Intent Optional Attributes Name class( FTObject ) :: self Return Value integer","tags":"","loc":"type/ftobject.html","title":"FTObject – FTObjectLibrary "},{"text":"type, public, EXTENDS(FTObject) :: MatrixData type~~matrixdata~~InheritsGraph type~matrixdata MatrixData FTObject FTObject FTObject->type~matrixdata object Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables key object Type-Bound Procedures initWithObjectAndKey destruct Components Type Visibility Attributes Name Initial integer, public :: key class(FTObject), public, POINTER :: object Type-Bound Procedures procedure, public :: initWithObjectAndKey public subroutine initWithObjectAndKey (self, object, key) Arguments Type Intent Optional Attributes Name class( MatrixData ) :: self class(FTObject), POINTER :: object integer :: key procedure, public :: destruct => destructMatrixData public subroutine destructMatrixData (self) Arguments Type Intent Optional Attributes Name class( MatrixData ) :: self","tags":"","loc":"type/matrixdata.html","title":"MatrixData – FTObjectLibrary "},{"text":"type, public, EXTENDS(FTObject) :: FTSparseMatrix type~~ftsparsematrix~~InheritsGraph type~ftsparsematrix FTSparseMatrix type~ftlinkedlistptr FTLinkedListPtr type~ftlinkedlistptr->type~ftsparsematrix table FTLinkedList FTLinkedList FTLinkedList->type~ftlinkedlistptr list Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables table Type-Bound Procedures initWithSize destruct containsKeys addObjectForKeys objectForKeys SparseMatrixSize Components Type Visibility Attributes Name Initial type(FTLinkedListPtr), public, DIMENSION(:), ALLOCATABLE :: table Type-Bound Procedures procedure, public :: initWithSize => initSparseMatrixWithSize public subroutine initSparseMatrixWithSize (self, N) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ) :: self integer :: N procedure, public :: destruct => destructSparseMatrix public subroutine destructSparseMatrix (self) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ) :: self procedure, public :: containsKeys => SparseMatrixContainsKeys public function SparseMatrixContainsKeys (self, i, j) result(r) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ) :: self integer :: i integer :: j Return Value logical procedure, public :: addObjectForKeys => addObjectToSparseMatrixForKeys public subroutine addObjectToSparseMatrixForKeys (self, obj, i, j) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ) :: self class(FTObject), POINTER :: obj integer :: i integer :: j procedure, public :: objectForKeys => objectInSparseMatrixForKeys public function objectInSparseMatrixForKeys (self, i, j) result(r) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ) :: self integer :: i integer :: j Return Value class(FTObject),\n  POINTER procedure, public :: SparseMatrixSize public function SparseMatrixSize (self) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ) :: self Return Value integer","tags":"","loc":"type/ftsparsematrix.html","title":"FTSparseMatrix – FTObjectLibrary "},{"text":"type, public, EXTENDS(FTLinkedList) :: FTStack Type-Bound Procedures init printDescription className push pop peek Type-Bound Procedures procedure, public :: init => initFTStack public subroutine initFTStack (self) Public, generic name: init() Arguments Type Intent Optional Attributes Name class( FTStack ) :: self procedure, public :: printDescription => printStackDescription public subroutine printStackDescription (self, iUnit) Arguments Type Intent Optional Attributes Name class( FTStack ) :: self integer :: iUnit procedure, public :: className => stackClassName public function stackClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTStack ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH) procedure, public :: push public subroutine push (self, obj) Arguments Type Intent Optional Attributes Name class( FTStack ) :: self class(FTObject), POINTER :: obj procedure, public :: pop public subroutine pop (self, p) Arguments Type Intent Optional Attributes Name class( FTStack ) :: self class(FTObject), POINTER :: p procedure, public :: peek public function peek (self) Arguments Type Intent Optional Attributes Name class( FTStack ) :: self Return Value class(FTObject),\n  POINTER","tags":"","loc":"type/ftstack.html","title":"FTStack – FTObjectLibrary "},{"text":"type, public, EXTENDS(FTObject) :: FTValue Type-Bound Procedures initWithValue initWithValue destruct realValue doublePrecisionValue quadValue stringValue logicalValue integerValue description printDescription className Type-Bound Procedures generic, public :: initWithValue => initWithReal, initWithDoublePrecision, initWithString, initWithLogical, initWithInteger public subroutine initWithReal (self, v) Public, generic name: initwithValue() Arguments Type Intent Optional Attributes Name class( FTValue ) :: self real :: v public subroutine initWithDoublePrecision (self, v) Public, generic name: initwithValue() Arguments Type Intent Optional Attributes Name class( FTValue ) :: self doubleprecision :: v public subroutine initWithString (self, v) Public, generic name: initwithValue() Arguments Type Intent Optional Attributes Name class( FTValue ) :: self character(len=*) :: v public subroutine initWithLogical (self, v) Public, generic name: initwithValue() Arguments Type Intent Optional Attributes Name class( FTValue ) :: self logical :: v public subroutine initWithInteger (self, v) Public, generic name: initwithValue() Arguments Type Intent Optional Attributes Name class( FTValue ) :: self integer :: v generic, public :: initWithValue => initWithQuad public subroutine initWithQuad (self, v) Public, generic name: initwithValue() Arguments Type Intent Optional Attributes Name class( FTValue ) :: self real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)) :: v procedure, public :: destruct => destructValue public subroutine destructValue (self) Public, generic name: destruct() Arguments Type Intent Optional Attributes Name class( FTValue ) :: self procedure, public :: realValue public function realValue (self) Get the real value stored in the object, or convert the value\n in the object to a real if it is of a different type. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value real procedure, public :: doublePrecisionValue public function doublePrecisionValue (self) Get the double precision value stored in the object, or convert the value\n in the object to a double precision if it is of a different type. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value doubleprecision procedure, public :: quadValue public function quadValue (self) Get the double precision value stored in the object, or convert the value\n in the object to a double precision if it is of a different type. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value doubleprecision procedure, public :: stringValue public function stringValue (self, requestedLength) result(s) Get the string value of length requestedLength stored in the object, or \n convert the value\n in the object to a string of that length if it is of a different type. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self integer :: requestedLength Return Value character(len=requestedLength) procedure, public :: logicalValue public function logicalValue (self) Get the logical value stored in the object, or convert the value\n in the object to a logical if it is of a different type. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value logical procedure, public :: integerValue public function integerValue (self) Get the integer value stored in the object, or convert the value\n in the object to an integer if it is of a different type. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value integer procedure, public :: description => FTValueDescription public function FTValueDescription (self) Returns the description of the value. In this case, it returns the \n stringValue() of the object. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value character(len=DESCRIPTION_CHARACTER_LENGTH) procedure, public :: printDescription => printValueDescription public subroutine printValueDescription (self, iUnit) Prints the description of the value to unit iUnit. In this case, it prints the stringValue() of the object. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self integer :: iUnit procedure, public :: className => valueClassName public function valueClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH)","tags":"","loc":"type/ftvalue.html","title":"FTValue – FTObjectLibrary "},{"text":"type, public, EXTENDS(FTDictionary) :: FTValueDictionary Type-Bound Procedures addValueForKey addValueForKey realValueForKey doublePrecisionValueForKey quadValueForKey integerValueForKey stringValueForKey logicalValueForKey className Type-Bound Procedures generic, public :: addValueForKey => addRealValueForKey, addDoublePrecisionValueForKey, addIntegerValueForKey, addStringValueForKey, addLogicalValueForKey public subroutine addRealValueForKey (self, r, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self real :: r character(len=*) :: key public subroutine addDoublePrecisionValueForKey (self, r, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self double precision :: r character(len=*) :: key public subroutine addIntegerValueForKey (self, i, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self integer :: i character(len=*) :: key public subroutine addStringValueForKey (self, s, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: s character(len=*) :: key public subroutine addLogicalValueForKey (self, l, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self logical :: l character(len=*) :: key generic, public :: addValueForKey => addQuadValueForKey public subroutine addQuadValueForKey (self, r, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)) :: r character(len=*) :: key procedure, public :: realValueForKey public function realValueForKey (self, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: key Return Value real procedure, public :: doublePrecisionValueForKey public function doublePrecisionValueForKey (self, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: key Return Value doubleprecision procedure, public :: quadValueForKey public function quadValueForKey (self, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: key Return Value real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)) procedure, public :: integerValueForKey public function integerValueForKey (self, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: key Return Value integer procedure, public :: stringValueForKey public function stringValueForKey (self, key, requestedLength) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: key integer :: requestedLength Return Value character(len=requestedLength) procedure, public :: logicalValueForKey public function logicalValueForKey (self, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: key Return Value logical procedure, public :: className => valueDictionaryClassName public function valueDictionaryClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH)","tags":"","loc":"type/ftvaluedictionary.html","title":"FTValueDictionary – FTObjectLibrary "},{"text":"type, public :: FTAssertionsManager Type-Bound Procedures init finalize numberOfAssertionFailures numberOfAssertions summarizeAssertions Type-Bound Procedures procedure, public :: init private subroutine init(self) Arguments Type Intent Optional Attributes Name class( FTAssertionsManager ) :: self procedure, public :: finalize private subroutine finalize(self) Arguments Type Intent Optional Attributes Name class( FTAssertionsManager ) :: self procedure, public :: numberOfAssertionFailures public function numberOfAssertionFailures (self) Arguments Type Intent Optional Attributes Name class( FTAssertionsManager ) :: self Return Value integer procedure, public :: numberOfAssertions public function numberOfAssertions (self) Arguments Type Intent Optional Attributes Name class( FTAssertionsManager ) :: self Return Value integer procedure, public :: summarizeAssertions private subroutine summarizeAssertions(self, title, iUnit) Arguments Type Intent Optional Attributes Name class( FTAssertionsManager ) :: self character(len=*) :: title integer :: iUnit","tags":"","loc":"type/ftassertionsmanager.html","title":"FTAssertionsManager – FTObjectLibrary "},{"text":"type, public :: assertInfoArray1D Variables failureName failureType locations Components Type Visibility Attributes Name Initial character(len=128), public :: failureName integer, public :: failureType logical, public, DIMENSION(:), ALLOCATABLE :: locations","tags":"","loc":"type/assertinfoarray1d.html","title":"assertInfoArray1D – FTObjectLibrary "},{"text":"type, public :: assertInfoArray2D Variables failureName failureType locations Components Type Visibility Attributes Name Initial character(len=128), public :: failureName integer, public :: failureType logical, public, DIMENSION(:,:), ALLOCATABLE :: locations","tags":"","loc":"type/assertinfoarray2d.html","title":"assertInfoArray2D – FTObjectLibrary "},{"text":"type, public :: TestSuiteManager type~~testsuitemanager~~InheritsGraph type~testsuitemanager TestSuiteManager type~testcaserecord TestCaseRecord type~testcaserecord->type~testsuitemanager testCasesHead, testCasesTail type~testcaserecord->type~testcaserecord next FTAssertionsManager FTAssertionsManager FTAssertionsManager->type~testcaserecord assertionsManager Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables numberOfTests stdOut testCasesHead testCasesTail Type-Bound Procedures init finalize addTestSubroutineWithName performTests setOutputUnit Components Type Visibility Attributes Name Initial integer, public :: numberOfTests integer, public :: stdOut = 6 type(TestCaseRecord), public, POINTER :: testCasesHead => NULL() type(TestCaseRecord), public, POINTER :: testCasesTail => NULL() Type-Bound Procedures procedure, public :: init => initializeTestSuiteManager private subroutine initializeTestSuiteManager(self) Arguments Type Intent Optional Attributes Name class( TestSuiteManager ) :: self procedure, public :: finalize => finalizeTestSuiteManager private subroutine finalizeTestSuiteManager(self) Arguments Type Intent Optional Attributes Name class( TestSuiteManager ) :: self procedure, public :: addTestSubroutineWithName private subroutine addTestSubroutineWithName(self, testSubroutine, testName) Arguments Type Intent Optional Attributes Name class( TestSuiteManager ) :: self public subroutine testSubroutine() Arguments None character(len=*) :: testName procedure, public :: performTests private subroutine performTests(self, numberOfFailedTestsRet) Arguments Type Intent Optional Attributes Name class( TestSuiteManager ) :: self integer, optional :: numberOfFailedTestsRet procedure, public :: setOutputUnit private subroutine setOutputUnit(self, iUnit) Arguments Type Intent Optional Attributes Name class( TestSuiteManager ) :: self integer :: iUnit","tags":"","loc":"type/testsuitemanager.html","title":"TestSuiteManager – FTObjectLibrary "},{"text":"function b3hs_hash_key_jenkins(key, range) result(code) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: key integer, intent(in) :: range Return Value integer","tags":"","loc":"proc/b3hs_hash_key_jenkins.html","title":"b3hs_hash_key_jenkins – FTObjectLibrary"},{"text":"subroutine FTDictionaryClassTests() Uses: FTDictionaryClass FTValueClass FTAssertions proc~~ftdictionaryclasstests~~UsesGraph proc~ftdictionaryclasstests FTDictionaryClassTests module~ftassertions FTAssertions module~ftassertions->proc~ftdictionaryclasstests module~ftdictionaryclass FTDictionaryClass module~ftdictionaryclass->proc~ftdictionaryclasstests module~ftvalueclass FTValueClass module~ftvalueclass->proc~ftdictionaryclasstests module~comparisonsmodule ComparisonsModule module~comparisonsmodule->module~ftassertions iso_fortran_env iso_fortran_env iso_fortran_env->module~ftassertions iso_fortran_env->module~ftvalueclass iso_fortran_env->module~comparisonsmodule module~ftolconstants FTOLConstants module~ftolconstants->module~ftassertions module~ftolconstants->module~ftvalueclass module~ftolconstants->module~comparisonsmodule module~ftkeyobjectpairclass FTKeyObjectPairClass module~ftkeyobjectpairclass->module~ftdictionaryclass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftmutableobjectarrayclass->module~ftdictionaryclass module~ftlinkedlistclass FTLinkedListClass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistclass->module~ftdictionaryclass module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistclass->module~ftlinkedlistiteratorclass module~ftlinkedlistiteratorclass->module~ftdictionaryclass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftvalueclass module~ftobjectclass->module~ftkeyobjectpairclass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftobjectclass->module~ftlinkedlistrecordclass module~ftlinkedlistrecordclass->module~ftlinkedlistclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass var panprocftdictionaryclasstestsUsesGraph = svgPanZoom('#procftdictionaryclasstestsUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Arguments None Calls proc~~ftdictionaryclasstests~~CallsGraph proc~ftdictionaryclasstests FTDictionaryClassTests proc~objectforkey objectForKey proc~ftdictionaryclasstests->proc~objectforkey destruct destruct proc~ftdictionaryclasstests->destruct objectatindex objectatindex proc~ftdictionaryclasstests->objectatindex proc~ftassert FTAssert proc~ftdictionaryclasstests->proc~ftassert proc~addobjectforkey addObjectForKey proc~ftdictionaryclasstests->proc~addobjectforkey refcount refcount proc~ftdictionaryclasstests->refcount interface~release release proc~ftdictionaryclasstests->interface~release proc~allkeys AllKeys proc~ftdictionaryclasstests->proc~allkeys interface~ftassertequal FTAssertEqual proc~ftdictionaryclasstests->interface~ftassertequal proc~initwithsize initWithSize proc~ftdictionaryclasstests->proc~initwithsize proc~valuefromobject valueFromObject proc~ftdictionaryclasstests->proc~valuefromobject proc~stringvalue stringValue proc~ftdictionaryclasstests->proc~stringvalue proc~containskey containsKey proc~ftdictionaryclasstests->proc~containskey initwithvalue initwithvalue proc~ftdictionaryclasstests->initwithvalue proc~allobjects AllObjects proc~ftdictionaryclasstests->proc~allobjects proc~objectforkeyinlist objectForKeyInList proc~objectforkey->proc~objectforkeyinlist entries entries proc~objectforkey->entries proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~ftassert->proc~initializesharedassertionsmanager proc~addobjectforkey->entries proc~add add proc~addobjectforkey->proc~add proc~initwithobjectandkey initWithObjectAndKey proc~addobjectforkey->proc~initwithobjectandkey proc~releaseftvalue releaseFTValue interface~release->proc~releaseftvalue proc~allkeys->entries proc~key key proc~allkeys->proc~key proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad interface~ftassertequal->proc~assertwithintolerancetwoquad proc~initwithsize->entries proc~init init proc~initwithsize->proc~init proc~containskey->proc~objectforkey proc~allobjects->proc~initwithsize proc~allobjects->entries proc~object object proc~allobjects->proc~object proc~allobjects->proc~key addobject addobject proc~allobjects->addobject proc~objectforkeyinlist->proc~object proc~initwithobject initWithObject proc~add->proc~initwithobject init init proc~initwithobject->init retain retain proc~initwithobject->retain proc~releaseftobject releaseFTObject proc~releaseftvalue->proc~releaseftobject proc~releaseftobject->destruct printdescription printdescription proc~releaseftobject->printdescription proc~assertwithintolerancetwoquad->proc~initializesharedassertionsmanager interface~isequal isEqual proc~assertwithintolerancetwoquad->interface~isequal proc~init->proc~initwithsize var panprocftdictionaryclasstestsCallsGraph = svgPanZoom('#procftdictionaryclasstestsCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/ftdictionaryclasstests.html","title":"FTDictionaryClassTests – FTObjectLibrary"},{"text":"subroutine subroutineThatThrowsError() Uses: SharedExceptionManagerModule FTExceptionClass ExceptionWrapper proc~~subroutinethatthrowserror~~UsesGraph proc~subroutinethatthrowserror subroutineThatThrowsError module~sharedexceptionmanagermodule SharedExceptionManagerModule module~sharedexceptionmanagermodule->proc~subroutinethatthrowserror module~ftexceptionclass FTExceptionClass module~ftexceptionclass->proc~subroutinethatthrowserror module~ftexceptionclass->module~sharedexceptionmanagermodule module~exceptionwrapper ExceptionWrapper module~exceptionwrapper->proc~subroutinethatthrowserror module~ftstackclass FTStackClass module~ftstackclass->module~ftexceptionclass module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistiteratorclass->module~ftexceptionclass module~ftdictionaryclass FTDictionaryClass module~ftlinkedlistiteratorclass->module~ftdictionaryclass module~ftdictionaryclass->module~ftexceptionclass module~ftvaluedictionaryclass FTValueDictionaryClass module~ftdictionaryclass->module~ftvaluedictionaryclass module~ftvaluedictionaryclass->module~ftexceptionclass module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistclass->module~ftstackclass module~ftlinkedlistclass->module~ftlinkedlistiteratorclass module~ftlinkedlistclass->module~ftdictionaryclass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftmutableobjectarrayclass->module~ftdictionaryclass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftlinkedlistrecordclass->module~ftlinkedlistclass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftobjectclass->module~ftlinkedlistrecordclass module~ftkeyobjectpairclass FTKeyObjectPairClass module~ftobjectclass->module~ftkeyobjectpairclass module~ftvalueclass FTValueClass module~ftobjectclass->module~ftvalueclass module~ftkeyobjectpairclass->module~ftdictionaryclass module~ftvalueclass->module~ftvaluedictionaryclass iso_fortran_env iso_fortran_env iso_fortran_env->module~ftvaluedictionaryclass iso_fortran_env->module~ftvalueclass module~ftolconstants FTOLConstants module~ftolconstants->module~ftvalueclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass var panprocsubroutinethatthrowserrorUsesGraph = svgPanZoom('#procsubroutinethatthrowserrorUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Arguments None Calls proc~~subroutinethatthrowserror~~CallsGraph proc~subroutinethatthrowserror subroutineThatThrowsError proc~testexception testException proc~subroutinethatthrowserror->proc~testexception proc~throw throw proc~subroutinethatthrowserror->proc~throw interface~release~3 release proc~subroutinethatthrowserror->interface~release~3 proc~initftexception initFTException proc~testexception->proc~initftexception interface~release~2 release proc~testexception->interface~release~2 initwithsize initwithsize proc~testexception->initwithsize addvalueforkey addvalueforkey proc~testexception->addvalueforkey push push proc~throw->push proc~initializeftexceptions initializeFTExceptions proc~throw->proc~initializeftexceptions proc~releaseftexception releaseFTException interface~release~3->proc~releaseftexception proc~setinfodictionary setInfoDictionary proc~initftexception->proc~setinfodictionary proc~init init proc~initftexception->proc~init proc~releaseftvaluedictionary releaseFTValueDictionary interface~release~2->proc~releaseftvaluedictionary proc~releasememberdictionary releaseMemberDictionary proc~setinfodictionary->proc~releasememberdictionary retain retain proc~setinfodictionary->retain proc~initwithsize initWithSize proc~init->proc~initwithsize releaseftobject releaseftobject proc~releasememberdictionary->releaseftobject proc~initwithsize->proc~init entries entries proc~initwithsize->entries proc~releaseftvaluedictionary->releaseftobject init init proc~initializeftexceptions->init proc~releaseftexception->releaseftobject var panprocsubroutinethatthrowserrorCallsGraph = svgPanZoom('#procsubroutinethatthrowserrorCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~subroutinethatthrowserror~~CalledByGraph proc~subroutinethatthrowserror subroutineThatThrowsError proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~subroutinethatthrowserror Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/subroutinethatthrowserror.html","title":"subroutineThatThrowsError – FTObjectLibrary"},{"text":"subroutine FTExceptionClassTests() Uses: FTValueDictionaryClass SharedExceptionManagerModule FTAssertions proc~~ftexceptionclasstests~~UsesGraph proc~ftexceptionclasstests FTExceptionClassTests module~ftvaluedictionaryclass FTValueDictionaryClass module~ftvaluedictionaryclass->proc~ftexceptionclasstests module~ftexceptionclass FTExceptionClass module~ftvaluedictionaryclass->module~ftexceptionclass module~ftassertions FTAssertions module~ftassertions->proc~ftexceptionclasstests module~sharedexceptionmanagermodule SharedExceptionManagerModule module~sharedexceptionmanagermodule->proc~ftexceptionclasstests module~ftvalueclass FTValueClass module~ftvalueclass->module~ftvaluedictionaryclass iso_fortran_env iso_fortran_env iso_fortran_env->module~ftvaluedictionaryclass iso_fortran_env->module~ftassertions iso_fortran_env->module~ftvalueclass module~comparisonsmodule ComparisonsModule iso_fortran_env->module~comparisonsmodule module~ftdictionaryclass FTDictionaryClass module~ftdictionaryclass->module~ftvaluedictionaryclass module~ftdictionaryclass->module~ftexceptionclass module~ftolconstants FTOLConstants module~ftolconstants->module~ftassertions module~ftolconstants->module~ftvalueclass module~ftolconstants->module~comparisonsmodule module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftvalueclass module~ftkeyobjectpairclass FTKeyObjectPairClass module~ftobjectclass->module~ftkeyobjectpairclass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftobjectclass->module~ftlinkedlistrecordclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass module~ftkeyobjectpairclass->module~ftdictionaryclass module~ftmutableobjectarrayclass->module~ftdictionaryclass module~ftlinkedlistclass FTLinkedListClass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistclass->module~ftdictionaryclass module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistclass->module~ftlinkedlistiteratorclass module~ftstackclass FTStackClass module~ftlinkedlistclass->module~ftstackclass module~ftlinkedlistiteratorclass->module~ftdictionaryclass module~ftlinkedlistiteratorclass->module~ftexceptionclass module~ftlinkedlistrecordclass->module~ftlinkedlistclass module~comparisonsmodule->module~ftassertions module~ftexceptionclass->module~sharedexceptionmanagermodule module~ftstackclass->module~ftexceptionclass var panprocftexceptionclasstestsUsesGraph = svgPanZoom('#procftexceptionclasstestsUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Arguments None Calls proc~~ftexceptionclasstests~~CallsGraph proc~ftexceptionclasstests FTExceptionClassTests interface~ftassertequal FTAssertEqual proc~ftexceptionclasstests->interface~ftassertequal proc~realvalueforkey realValueForKey proc~ftexceptionclasstests->proc~realvalueforkey proc~errorobject errorObject proc~ftexceptionclasstests->proc~errorobject proc~destructftexceptions destructFTExceptions proc~ftexceptionclasstests->proc~destructftexceptions infodictionary infodictionary proc~ftexceptionclasstests->infodictionary interface~catch catch proc~ftexceptionclasstests->interface~catch proc~subroutinethatthrowserror subroutineThatThrowsError proc~ftexceptionclasstests->proc~subroutinethatthrowserror proc~valuedictionaryfromdictionary valueDictionaryFromDictionary proc~ftexceptionclasstests->proc~valuedictionaryfromdictionary proc~initializeftexceptions initializeFTExceptions proc~ftexceptionclasstests->proc~initializeftexceptions proc~stringvalueforkey stringValueForKey proc~ftexceptionclasstests->proc~stringvalueforkey proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad interface~ftassertequal->proc~assertwithintolerancetwoquad proc~objectforkey objectForKey proc~realvalueforkey->proc~objectforkey proc~valuefromobject valueFromObject proc~realvalueforkey->proc~valuefromobject proc~realvalue realValue proc~realvalueforkey->proc~realvalue proc~errorobject->proc~initializeftexceptions proc~destructftexceptions->interface~catch interface~release~3 release proc~destructftexceptions->interface~release~3 printdescription printdescription proc~destructftexceptions->printdescription proc~subroutinethatthrowserror->interface~release~3 proc~testexception testException proc~subroutinethatthrowserror->proc~testexception proc~throw throw proc~subroutinethatthrowserror->proc~throw init init proc~initializeftexceptions->init proc~stringvalueforkey->proc~objectforkey proc~stringvalueforkey->proc~valuefromobject proc~stringvalue stringValue proc~stringvalueforkey->proc~stringvalue interface~isequal isEqual proc~assertwithintolerancetwoquad->interface~isequal proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~assertwithintolerancetwoquad->proc~initializesharedassertionsmanager proc~objectforkeyinlist objectForKeyInList proc~objectforkey->proc~objectforkeyinlist entries entries proc~objectforkey->entries proc~object object proc~objectforkeyinlist->proc~object proc~releaseftexception releaseFTException interface~release~3->proc~releaseftexception releaseftobject releaseftobject proc~releaseftexception->releaseftobject proc~initftexception initFTException proc~testexception->proc~initftexception interface~release~2 release proc~testexception->interface~release~2 initwithsize initwithsize proc~testexception->initwithsize addvalueforkey addvalueforkey proc~testexception->addvalueforkey proc~throw->proc~initializeftexceptions push push proc~throw->push proc~setinfodictionary setInfoDictionary proc~initftexception->proc~setinfodictionary proc~init init proc~initftexception->proc~init proc~releaseftvaluedictionary releaseFTValueDictionary interface~release~2->proc~releaseftvaluedictionary proc~releasememberdictionary releaseMemberDictionary proc~setinfodictionary->proc~releasememberdictionary retain retain proc~setinfodictionary->retain proc~initwithsize initWithSize proc~init->proc~initwithsize proc~releasememberdictionary->releaseftobject proc~initwithsize->entries proc~initwithsize->proc~init proc~releaseftvaluedictionary->releaseftobject var panprocftexceptionclasstestsCallsGraph = svgPanZoom('#procftexceptionclasstestsCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/ftexceptionclasstests.html","title":"FTExceptionClassTests – FTObjectLibrary"},{"text":"subroutine HashTableTests() Uses: FTValueClass FTAssertions FTHashTableClass proc~~hashtabletests~~UsesGraph proc~hashtabletests HashTableTests module~ftassertions FTAssertions module~ftassertions->proc~hashtabletests module~ftvalueclass FTValueClass module~ftvalueclass->proc~hashtabletests FTHashTableClass FTHashTableClass FTHashTableClass->proc~hashtabletests module~comparisonsmodule ComparisonsModule module~comparisonsmodule->module~ftassertions iso_fortran_env iso_fortran_env iso_fortran_env->module~ftassertions iso_fortran_env->module~ftvalueclass iso_fortran_env->module~comparisonsmodule module~ftolconstants FTOLConstants module~ftolconstants->module~ftassertions module~ftolconstants->module~ftvalueclass module~ftolconstants->module~comparisonsmodule module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftvalueclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Arguments None Calls proc~~hashtabletests~~CallsGraph proc~hashtabletests HashTableTests interface~ftassertequal FTAssertEqual proc~hashtabletests->interface~ftassertequal destruct destruct proc~hashtabletests->destruct retain retain proc~hashtabletests->retain proc~integervalue integerValue proc~hashtabletests->proc~integervalue refcount refcount proc~hashtabletests->refcount interface~release release proc~hashtabletests->interface~release containskeys containskeys proc~hashtabletests->containskeys hashtablesize hashtablesize proc~hashtabletests->hashtablesize hash1 hash1 proc~hashtabletests->hash1 proc~ftassert FTAssert proc~hashtabletests->proc~ftassert objectforkeys objectforkeys proc~hashtabletests->objectforkeys addobjectforkeys addobjectforkeys proc~hashtabletests->addobjectforkeys initwithvalue initwithvalue proc~hashtabletests->initwithvalue hash2 hash2 proc~hashtabletests->hash2 initwithsize initwithsize proc~hashtabletests->initwithsize proc~valuefromobject valueFromObject proc~hashtabletests->proc~valuefromobject proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad interface~ftassertequal->proc~assertwithintolerancetwoquad proc~releaseftvalue releaseFTValue interface~release->proc~releaseftvalue proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~ftassert->proc~initializesharedassertionsmanager interface~isequal isEqual proc~assertwithintolerancetwoquad->interface~isequal proc~assertwithintolerancetwoquad->proc~initializesharedassertionsmanager proc~releaseftobject releaseFTObject proc~releaseftvalue->proc~releaseftobject proc~releaseftobject->destruct printdescription printdescription proc~releaseftobject->printdescription var panprochashtabletestsCallsGraph = svgPanZoom('#prochashtabletestsCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/hashtabletests.html","title":"HashTableTests – FTObjectLibrary"},{"text":"subroutine FTLinkedListClassTests() Arguments None Calls proc~~ftlinkedlistclasstests~~CallsGraph proc~ftlinkedlistclasstests FTLinkedListClassTests proc~basictests basicTests proc~ftlinkedlistclasstests->proc~basictests proc~testdeletingobjects TestDeletingObjects proc~ftlinkedlistclasstests->proc~testdeletingobjects proc~testappendinglists testAppendingLists proc~ftlinkedlistclasstests->proc~testappendinglists interface~release~4 release proc~basictests->interface~release~4 remove remove proc~basictests->remove retain retain proc~basictests->retain interface~ftassertequal FTAssertEqual proc~basictests->interface~ftassertequal init init proc~basictests->init proc~movetonext moveToNext proc~basictests->proc~movetonext proc~add add proc~basictests->proc~add proc~integervalue integerValue proc~basictests->proc~integervalue proc~ftassert FTAssert proc~basictests->proc~ftassert proc~stringvalue stringValue proc~basictests->proc~stringvalue proc~settostart setToStart proc~basictests->proc~settostart refcount refcount proc~basictests->refcount initwithvalue initwithvalue proc~basictests->initwithvalue object object proc~basictests->object proc~initwithftlinkedlist initWithFTLinkedList proc~basictests->proc~initwithftlinkedlist proc~realvalue realValue proc~basictests->proc~realvalue isatend isatend proc~basictests->isatend proc~testdeletingobjects->interface~ftassertequal proc~testdeletingobjects->init proc~testdeletingobjects->proc~movetonext proc~testdeletingobjects->proc~add proc~testdeletingobjects->proc~integervalue proc~testdeletingobjects->proc~settostart proc~testdeletingobjects->initwithvalue proc~testdeletingobjects->object proc~testdeletingobjects->proc~initwithftlinkedlist proc~testdeletingobjects->isatend currentrecord currentrecord proc~testdeletingobjects->currentrecord interface~release release proc~testdeletingobjects->interface~release proc~removecurrentrecord removeCurrentRecord proc~testdeletingobjects->proc~removecurrentrecord proc~valuefromobject valueFromObject proc~testdeletingobjects->proc~valuefromobject proc~testappendinglists->interface~release~4 proc~testappendinglists->interface~ftassertequal proc~testappendinglists->init proc~testappendinglists->proc~movetonext proc~testappendinglists->proc~add proc~testappendinglists->proc~integervalue proc~testappendinglists->proc~ftassert proc~testappendinglists->proc~settostart proc~testappendinglists->refcount proc~testappendinglists->initwithvalue proc~testappendinglists->object proc~testappendinglists->proc~initwithftlinkedlist proc~testappendinglists->isatend proc~testappendinglists->proc~valuefromobject allobjects allobjects proc~testappendinglists->allobjects objectatindex objectatindex proc~testappendinglists->objectatindex reverse reverse proc~testappendinglists->reverse proc~addobjectsfromlist addObjectsFromList proc~testappendinglists->proc~addobjectsfromlist proc~releaseftlinkedlistiterator releaseFTLinkedListIterator interface~release~4->proc~releaseftlinkedlistiterator proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad interface~ftassertequal->proc~assertwithintolerancetwoquad proc~initwithobject initWithObject proc~add->proc~initwithobject proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~ftassert->proc~initializesharedassertionsmanager proc~initwithftlinkedlist->init proc~initwithftlinkedlist->proc~settostart proc~setlinkedlist setLinkedList proc~initwithftlinkedlist->proc~setlinkedlist releaseftobject releaseftobject proc~releaseftlinkedlistiterator->releaseftobject interface~isequal isEqual proc~assertwithintolerancetwoquad->interface~isequal proc~assertwithintolerancetwoquad->proc~initializesharedassertionsmanager proc~initwithobject->retain proc~initwithobject->init proc~setlinkedlist->retain proc~setlinkedlist->proc~settostart proc~releasememberlist releaseMemberList proc~setlinkedlist->proc~releasememberlist proc~releasememberlist->releaseftobject proc~releaseftvalue releaseFTValue interface~release->proc~releaseftvalue removerecord removerecord proc~removecurrentrecord->removerecord proc~releaseftobject releaseFTObject proc~releaseftvalue->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct proc~addobjectsfromlist->proc~add proc~iscircular isCircular proc~addobjectsfromlist->proc~iscircular proc~makecircular makeCircular proc~addobjectsfromlist->proc~makecircular var panprocftlinkedlistclasstestsCallsGraph = svgPanZoom('#procftlinkedlistclasstestsCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/ftlinkedlistclasstests.html","title":"FTLinkedListClassTests – FTObjectLibrary"},{"text":"subroutine basicTests() Uses: FTAssertions FTValueClass FTLinkedListClass FTLinkedListIteratorClass proc~~basictests~~UsesGraph proc~basictests basicTests module~ftassertions FTAssertions module~ftassertions->proc~basictests module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistiteratorclass->proc~basictests module~ftvalueclass FTValueClass module~ftvalueclass->proc~basictests module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistclass->proc~basictests module~ftlinkedlistclass->module~ftlinkedlistiteratorclass module~comparisonsmodule ComparisonsModule module~comparisonsmodule->module~ftassertions iso_fortran_env iso_fortran_env iso_fortran_env->module~ftassertions iso_fortran_env->module~ftvalueclass iso_fortran_env->module~comparisonsmodule module~ftolconstants FTOLConstants module~ftolconstants->module~ftassertions module~ftolconstants->module~ftvalueclass module~ftolconstants->module~comparisonsmodule module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftvalueclass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftobjectclass->module~ftlinkedlistrecordclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistrecordclass->module~ftlinkedlistclass var panprocbasictestsUsesGraph = svgPanZoom('#procbasictestsUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Arguments None Calls proc~~basictests~~CallsGraph proc~basictests basicTests interface~release~4 release proc~basictests->interface~release~4 remove remove proc~basictests->remove retain retain proc~basictests->retain interface~ftassertequal FTAssertEqual proc~basictests->interface~ftassertequal init init proc~basictests->init proc~movetonext moveToNext proc~basictests->proc~movetonext proc~add add proc~basictests->proc~add proc~integervalue integerValue proc~basictests->proc~integervalue proc~ftassert FTAssert proc~basictests->proc~ftassert proc~stringvalue stringValue proc~basictests->proc~stringvalue proc~settostart setToStart proc~basictests->proc~settostart refcount refcount proc~basictests->refcount initwithvalue initwithvalue proc~basictests->initwithvalue object object proc~basictests->object proc~initwithftlinkedlist initWithFTLinkedList proc~basictests->proc~initwithftlinkedlist proc~realvalue realValue proc~basictests->proc~realvalue isatend isatend proc~basictests->isatend proc~releaseftlinkedlistiterator releaseFTLinkedListIterator interface~release~4->proc~releaseftlinkedlistiterator proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad interface~ftassertequal->proc~assertwithintolerancetwoquad proc~initwithobject initWithObject proc~add->proc~initwithobject proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~ftassert->proc~initializesharedassertionsmanager proc~initwithftlinkedlist->init proc~initwithftlinkedlist->proc~settostart proc~setlinkedlist setLinkedList proc~initwithftlinkedlist->proc~setlinkedlist releaseftobject releaseftobject proc~releaseftlinkedlistiterator->releaseftobject interface~isequal isEqual proc~assertwithintolerancetwoquad->interface~isequal proc~assertwithintolerancetwoquad->proc~initializesharedassertionsmanager proc~initwithobject->retain proc~initwithobject->init proc~setlinkedlist->retain proc~setlinkedlist->proc~settostart proc~releasememberlist releaseMemberList proc~setlinkedlist->proc~releasememberlist proc~releasememberlist->releaseftobject var panprocbasictestsCallsGraph = svgPanZoom('#procbasictestsCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~basictests~~CalledByGraph proc~basictests basicTests proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~basictests Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/basictests.html","title":"basicTests – FTObjectLibrary"},{"text":"subroutine testAppendingLists() Uses: FTAssertions FTValueClass FTLinkedListClass FTLinkedListIteratorClass proc~~testappendinglists~~UsesGraph proc~testappendinglists testAppendingLists module~ftassertions FTAssertions module~ftassertions->proc~testappendinglists module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistiteratorclass->proc~testappendinglists module~ftvalueclass FTValueClass module~ftvalueclass->proc~testappendinglists module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistclass->proc~testappendinglists module~ftlinkedlistclass->module~ftlinkedlistiteratorclass module~comparisonsmodule ComparisonsModule module~comparisonsmodule->module~ftassertions iso_fortran_env iso_fortran_env iso_fortran_env->module~ftassertions iso_fortran_env->module~ftvalueclass iso_fortran_env->module~comparisonsmodule module~ftolconstants FTOLConstants module~ftolconstants->module~ftassertions module~ftolconstants->module~ftvalueclass module~ftolconstants->module~comparisonsmodule module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftvalueclass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftobjectclass->module~ftlinkedlistrecordclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistrecordclass->module~ftlinkedlistclass var panproctestappendinglistsUsesGraph = svgPanZoom('#proctestappendinglistsUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Arguments None Calls proc~~testappendinglists~~CallsGraph proc~testappendinglists testAppendingLists interface~ftassertequal FTAssertEqual proc~testappendinglists->interface~ftassertequal allobjects allobjects proc~testappendinglists->allobjects objectatindex objectatindex proc~testappendinglists->objectatindex isatend isatend proc~testappendinglists->isatend proc~add add proc~testappendinglists->proc~add init init proc~testappendinglists->init reverse reverse proc~testappendinglists->reverse interface~release~4 release proc~testappendinglists->interface~release~4 proc~integervalue integerValue proc~testappendinglists->proc~integervalue refcount refcount proc~testappendinglists->refcount proc~ftassert FTAssert proc~testappendinglists->proc~ftassert proc~valuefromobject valueFromObject proc~testappendinglists->proc~valuefromobject initwithvalue initwithvalue proc~testappendinglists->initwithvalue proc~addobjectsfromlist addObjectsFromList proc~testappendinglists->proc~addobjectsfromlist proc~movetonext moveToNext proc~testappendinglists->proc~movetonext proc~initwithftlinkedlist initWithFTLinkedList proc~testappendinglists->proc~initwithftlinkedlist proc~settostart setToStart proc~testappendinglists->proc~settostart object object proc~testappendinglists->object proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad interface~ftassertequal->proc~assertwithintolerancetwoquad proc~initwithobject initWithObject proc~add->proc~initwithobject proc~releaseftlinkedlistiterator releaseFTLinkedListIterator interface~release~4->proc~releaseftlinkedlistiterator proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~ftassert->proc~initializesharedassertionsmanager proc~addobjectsfromlist->proc~add proc~iscircular isCircular proc~addobjectsfromlist->proc~iscircular proc~makecircular makeCircular proc~addobjectsfromlist->proc~makecircular proc~initwithftlinkedlist->init proc~initwithftlinkedlist->proc~settostart proc~setlinkedlist setLinkedList proc~initwithftlinkedlist->proc~setlinkedlist interface~isequal isEqual proc~assertwithintolerancetwoquad->interface~isequal proc~assertwithintolerancetwoquad->proc~initializesharedassertionsmanager proc~initwithobject->init retain retain proc~initwithobject->retain releaseftobject releaseftobject proc~releaseftlinkedlistiterator->releaseftobject proc~setlinkedlist->proc~settostart proc~setlinkedlist->retain proc~releasememberlist releaseMemberList proc~setlinkedlist->proc~releasememberlist proc~releasememberlist->releaseftobject var panproctestappendinglistsCallsGraph = svgPanZoom('#proctestappendinglistsCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~testappendinglists~~CalledByGraph proc~testappendinglists testAppendingLists proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~testappendinglists Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/testappendinglists.html","title":"testAppendingLists – FTObjectLibrary"},{"text":"subroutine TestDeletingObjects() Uses: FTLinkedListClass FTLinkedListIteratorClass FTValueClass FTAssertions proc~~testdeletingobjects~~UsesGraph proc~testdeletingobjects TestDeletingObjects module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistiteratorclass->proc~testdeletingobjects module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistclass->proc~testdeletingobjects module~ftlinkedlistclass->module~ftlinkedlistiteratorclass module~ftassertions FTAssertions module~ftassertions->proc~testdeletingobjects module~ftvalueclass FTValueClass module~ftvalueclass->proc~testdeletingobjects module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftlinkedlistrecordclass->module~ftlinkedlistclass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftvalueclass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftobjectclass->module~ftlinkedlistrecordclass module~comparisonsmodule ComparisonsModule module~comparisonsmodule->module~ftassertions iso_fortran_env iso_fortran_env iso_fortran_env->module~ftassertions iso_fortran_env->module~ftvalueclass iso_fortran_env->module~comparisonsmodule module~ftolconstants FTOLConstants module~ftolconstants->module~ftassertions module~ftolconstants->module~ftvalueclass module~ftolconstants->module~comparisonsmodule ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass var panproctestdeletingobjectsUsesGraph = svgPanZoom('#proctestdeletingobjectsUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. -----------------------\n    Delete the third record\n    ----------------------- Arguments None Calls proc~~testdeletingobjects~~CallsGraph proc~testdeletingobjects TestDeletingObjects proc~add add proc~testdeletingobjects->proc~add isatend isatend proc~testdeletingobjects->isatend currentrecord currentrecord proc~testdeletingobjects->currentrecord object object proc~testdeletingobjects->object init init proc~testdeletingobjects->init interface~release release proc~testdeletingobjects->interface~release interface~ftassertequal FTAssertEqual proc~testdeletingobjects->interface~ftassertequal proc~removecurrentrecord removeCurrentRecord proc~testdeletingobjects->proc~removecurrentrecord proc~settostart setToStart proc~testdeletingobjects->proc~settostart proc~initwithftlinkedlist initWithFTLinkedList proc~testdeletingobjects->proc~initwithftlinkedlist initwithvalue initwithvalue proc~testdeletingobjects->initwithvalue proc~integervalue integerValue proc~testdeletingobjects->proc~integervalue proc~movetonext moveToNext proc~testdeletingobjects->proc~movetonext proc~valuefromobject valueFromObject proc~testdeletingobjects->proc~valuefromobject proc~initwithobject initWithObject proc~add->proc~initwithobject proc~releaseftvalue releaseFTValue interface~release->proc~releaseftvalue proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad interface~ftassertequal->proc~assertwithintolerancetwoquad removerecord removerecord proc~removecurrentrecord->removerecord proc~initwithftlinkedlist->init proc~initwithftlinkedlist->proc~settostart proc~setlinkedlist setLinkedList proc~initwithftlinkedlist->proc~setlinkedlist proc~initwithobject->init retain retain proc~initwithobject->retain proc~releaseftobject releaseFTObject proc~releaseftvalue->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct interface~isequal isEqual proc~assertwithintolerancetwoquad->interface~isequal proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~assertwithintolerancetwoquad->proc~initializesharedassertionsmanager proc~setlinkedlist->proc~settostart proc~setlinkedlist->retain proc~releasememberlist releaseMemberList proc~setlinkedlist->proc~releasememberlist releaseftobject releaseftobject proc~releasememberlist->releaseftobject var panproctestdeletingobjectsCallsGraph = svgPanZoom('#proctestdeletingobjectsCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~testdeletingobjects~~CalledByGraph proc~testdeletingobjects TestDeletingObjects proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~testdeletingobjects Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/testdeletingobjects.html","title":"TestDeletingObjects – FTObjectLibrary"},{"text":"subroutine MultiIndexTableTests() Uses: FTAssertions FTObjectClass FTValueClass FTMultiIndexTableClass proc~~multiindextabletests~~UsesGraph proc~multiindextabletests MultiIndexTableTests module~ftassertions FTAssertions module~ftassertions->proc~multiindextabletests module~ftmultiindextableclass FTMultiIndexTableClass module~ftmultiindextableclass->proc~multiindextabletests module~ftvalueclass FTValueClass module~ftvalueclass->proc~multiindextabletests module~ftobjectclass FTObjectClass module~ftobjectclass->proc~multiindextabletests module~ftobjectclass->module~ftmultiindextableclass module~ftobjectclass->module~ftvalueclass module~ftmultiindextabledata FTMultiIndexTableData module~ftobjectclass->module~ftmultiindextabledata module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftobjectclass->module~ftlinkedlistrecordclass module~comparisonsmodule ComparisonsModule module~comparisonsmodule->module~ftassertions iso_fortran_env iso_fortran_env iso_fortran_env->module~ftassertions iso_fortran_env->module~ftvalueclass iso_fortran_env->module~comparisonsmodule module~ftolconstants FTOLConstants module~ftolconstants->module~ftassertions module~ftolconstants->module~ftvalueclass module~ftolconstants->module~comparisonsmodule module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistclass->module~ftmultiindextableclass module~ftmultiindextabledata->module~ftmultiindextableclass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistrecordclass->module~ftlinkedlistclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass var panprocmultiindextabletestsUsesGraph = svgPanZoom('#procmultiindextabletestsUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Arguments None Calls proc~~multiindextabletests~~CallsGraph proc~multiindextabletests MultiIndexTableTests interface~ftassertequal FTAssertEqual proc~multiindextabletests->interface~ftassertequal objectforkeys objectforkeys proc~multiindextabletests->objectforkeys interface~release~5 release proc~multiindextabletests->interface~release~5 destruct destruct proc~multiindextabletests->destruct containskeys containskeys proc~multiindextabletests->containskeys proc~sortkeysascending sortKeysAscending proc~multiindextabletests->proc~sortkeysascending proc~stringvalue stringValue proc~multiindextabletests->proc~stringvalue proc~valuefromobject valueFromObject proc~multiindextabletests->proc~valuefromobject addobjectforkeys addobjectforkeys proc~multiindextabletests->addobjectforkeys initwithvalue initwithvalue proc~multiindextabletests->initwithvalue initwithsize initwithsize proc~multiindextabletests->initwithsize proc~ftassert FTAssert proc~multiindextabletests->proc~ftassert proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad interface~ftassertequal->proc~assertwithintolerancetwoquad proc~releaseftmultiindextable releaseFTMultiIndexTable interface~release~5->proc~releaseftmultiindextable proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~ftassert->proc~initializesharedassertionsmanager interface~isequal isEqual proc~assertwithintolerancetwoquad->interface~isequal proc~assertwithintolerancetwoquad->proc~initializesharedassertionsmanager proc~releaseftobject releaseFTObject proc~releaseftmultiindextable->proc~releaseftobject proc~releaseftobject->destruct printdescription printdescription proc~releaseftobject->printdescription var panprocmultiindextabletestsCallsGraph = svgPanZoom('#procmultiindextabletestsCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/multiindextabletests.html","title":"MultiIndexTableTests – FTObjectLibrary"},{"text":"subroutine MutableArrayClassTests() Uses: FTAssertions FTMutableObjectArrayClass FTValueClass proc~~mutablearrayclasstests~~UsesGraph proc~mutablearrayclasstests MutableArrayClassTests module~ftassertions FTAssertions module~ftassertions->proc~mutablearrayclasstests module~ftvalueclass FTValueClass module~ftvalueclass->proc~mutablearrayclasstests module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftmutableobjectarrayclass->proc~mutablearrayclasstests module~comparisonsmodule ComparisonsModule module~comparisonsmodule->module~ftassertions iso_fortran_env iso_fortran_env iso_fortran_env->module~ftassertions iso_fortran_env->module~ftvalueclass iso_fortran_env->module~comparisonsmodule module~ftolconstants FTOLConstants module~ftolconstants->module~ftassertions module~ftolconstants->module~ftvalueclass module~ftolconstants->module~comparisonsmodule module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftvalueclass module~ftobjectclass->module~ftmutableobjectarrayclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Arguments None Calls proc~~mutablearrayclasstests~~CallsGraph proc~mutablearrayclasstests MutableArrayClassTests interface~ftassertequal FTAssertEqual proc~mutablearrayclasstests->interface~ftassertequal proc~ftassert FTAssert proc~mutablearrayclasstests->proc~ftassert addobject addobject proc~mutablearrayclasstests->addobject refcount refcount proc~mutablearrayclasstests->refcount proc~removeobjectatindex removeObjectAtIndex proc~mutablearrayclasstests->proc~removeobjectatindex releaseftobject releaseftobject proc~mutablearrayclasstests->releaseftobject interface~release release proc~mutablearrayclasstests->interface~release proc~allocatedsize allocatedSize proc~mutablearrayclasstests->proc~allocatedsize proc~integervalue integerValue proc~mutablearrayclasstests->proc~integervalue proc~valuefromobject valueFromObject proc~mutablearrayclasstests->proc~valuefromobject proc~objectatindex objectAtIndex proc~mutablearrayclasstests->proc~objectatindex initwithvalue initwithvalue proc~mutablearrayclasstests->initwithvalue retain retain proc~mutablearrayclasstests->retain initwithsize initwithsize proc~mutablearrayclasstests->initwithsize proc~replaceobjectatindexwithobject replaceObjectAtIndexWithObject proc~mutablearrayclasstests->proc~replaceobjectatindexwithobject proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad interface~ftassertequal->proc~assertwithintolerancetwoquad proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~ftassert->proc~initializesharedassertionsmanager array array proc~removeobjectatindex->array proc~releaseftobject releaseFTObject proc~removeobjectatindex->proc~releaseftobject proc~releaseftvalue releaseFTValue interface~release->proc~releaseftvalue proc~objectatindex->array proc~replaceobjectatindexwithobject->retain proc~replaceobjectatindexwithobject->array proc~replaceobjectatindexwithobject->proc~releaseftobject interface~isequal isEqual proc~assertwithintolerancetwoquad->interface~isequal proc~assertwithintolerancetwoquad->proc~initializesharedassertionsmanager printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct proc~releaseftvalue->proc~releaseftobject var panprocmutablearrayclasstestsCallsGraph = svgPanZoom('#procmutablearrayclasstestsCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/mutablearrayclasstests.html","title":"MutableArrayClassTests – FTObjectLibrary"},{"text":"subroutine SparseMatrixTests() Uses: FTValueClass FTAssertions FTSparseMatrixClass proc~~sparsematrixtests~~UsesGraph proc~sparsematrixtests SparseMatrixTests module~ftassertions FTAssertions module~ftassertions->proc~sparsematrixtests module~ftvalueclass FTValueClass module~ftvalueclass->proc~sparsematrixtests module~ftsparsematrixclass FTSparseMatrixClass module~ftsparsematrixclass->proc~sparsematrixtests module~comparisonsmodule ComparisonsModule module~comparisonsmodule->module~ftassertions iso_fortran_env iso_fortran_env iso_fortran_env->module~ftassertions iso_fortran_env->module~ftvalueclass iso_fortran_env->module~comparisonsmodule module~ftolconstants FTOLConstants module~ftolconstants->module~ftassertions module~ftolconstants->module~ftvalueclass module~ftolconstants->module~comparisonsmodule module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftvalueclass module~ftobjectclass->module~ftsparsematrixclass module~ftsparsematrixdata FTSparseMatrixData module~ftobjectclass->module~ftsparsematrixdata module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftobjectclass->module~ftlinkedlistrecordclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass module~ftsparsematrixdata->module~ftsparsematrixclass module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistclass->module~ftsparsematrixclass module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistclass->module~ftlinkedlistiteratorclass module~ftlinkedlistiteratorclass->module~ftsparsematrixclass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistrecordclass->module~ftlinkedlistclass var panprocsparsematrixtestsUsesGraph = svgPanZoom('#procsparsematrixtestsUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Arguments None Calls proc~~sparsematrixtests~~CallsGraph proc~sparsematrixtests SparseMatrixTests interface~ftassertequal FTAssertEqual proc~sparsematrixtests->interface~ftassertequal destruct destruct proc~sparsematrixtests->destruct interface~release~6 release proc~sparsematrixtests->interface~release~6 proc~integervalue integerValue proc~sparsematrixtests->proc~integervalue proc~sparsematrixsize SparseMatrixSize proc~sparsematrixtests->proc~sparsematrixsize containskeys containskeys proc~sparsematrixtests->containskeys proc~hash2 Hash2 proc~sparsematrixtests->proc~hash2 proc~hash1 Hash1 proc~sparsematrixtests->proc~hash1 refcount refcount proc~sparsematrixtests->refcount proc~ftassert FTAssert proc~sparsematrixtests->proc~ftassert objectforkeys objectforkeys proc~sparsematrixtests->objectforkeys addobjectforkeys addobjectforkeys proc~sparsematrixtests->addobjectforkeys initwithvalue initwithvalue proc~sparsematrixtests->initwithvalue retain retain proc~sparsematrixtests->retain initwithsize initwithsize proc~sparsematrixtests->initwithsize proc~valuefromobject valueFromObject proc~sparsematrixtests->proc~valuefromobject proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad interface~ftassertequal->proc~assertwithintolerancetwoquad proc~releaseftsparsematrix releaseFTSparseMatrix interface~release~6->proc~releaseftsparsematrix proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~ftassert->proc~initializesharedassertionsmanager interface~isequal isEqual proc~assertwithintolerancetwoquad->interface~isequal proc~assertwithintolerancetwoquad->proc~initializesharedassertionsmanager proc~releaseftobject releaseFTObject proc~releaseftsparsematrix->proc~releaseftobject proc~releaseftobject->destruct printdescription printdescription proc~releaseftobject->printdescription var panprocsparsematrixtestsCallsGraph = svgPanZoom('#procsparsematrixtestsCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/sparsematrixtests.html","title":"SparseMatrixTests – FTObjectLibrary"},{"text":"subroutine StackClassTests() Uses: FTAssertions FTStackClass FTValueClass StackUnitTestsModule proc~~stackclasstests~~UsesGraph proc~stackclasstests StackClassTests module~ftassertions FTAssertions module~ftassertions->proc~stackclasstests module~ftvalueclass FTValueClass module~ftvalueclass->proc~stackclasstests module~stackunittestsmodule StackUnitTestsModule module~stackunittestsmodule->proc~stackclasstests module~ftstackclass FTStackClass module~ftstackclass->proc~stackclasstests module~comparisonsmodule ComparisonsModule module~comparisonsmodule->module~ftassertions iso_fortran_env iso_fortran_env iso_fortran_env->module~ftassertions iso_fortran_env->module~ftvalueclass iso_fortran_env->module~comparisonsmodule module~ftolconstants FTOLConstants module~ftolconstants->module~ftassertions module~ftolconstants->module~ftvalueclass module~ftolconstants->module~comparisonsmodule module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftvalueclass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftobjectclass->module~ftlinkedlistrecordclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistclass->module~ftstackclass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistrecordclass->module~ftlinkedlistclass var panprocstackclasstestsUsesGraph = svgPanZoom('#procstackclasstestsUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Arguments None Calls proc~~stackclasstests~~CallsGraph proc~stackclasstests StackClassTests interface~ftassertequal FTAssertEqual proc~stackclasstests->interface~ftassertequal proc~teststackinit testStackInit proc~stackclasstests->proc~teststackinit proc~ftassert FTAssert proc~stackclasstests->proc~ftassert interface~release release proc~stackclasstests->interface~release proc~teststackpush testStackPush proc~stackclasstests->proc~teststackpush proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad interface~ftassertequal->proc~assertwithintolerancetwoquad proc~teststackinit->interface~ftassertequal proc~teststackinit->proc~ftassert init init proc~teststackinit->init refcount refcount proc~teststackinit->refcount proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~ftassert->proc~initializesharedassertionsmanager proc~releaseftvalue releaseFTValue interface~release->proc~releaseftvalue proc~teststackpush->interface~ftassertequal proc~teststackpush->proc~ftassert proc~teststackpush->interface~release proc~teststackpush->refcount proc~doubleprecisionvalue doublePrecisionValue proc~teststackpush->proc~doubleprecisionvalue proc~push push proc~teststackpush->proc~push proc~peek peek proc~teststackpush->proc~peek initwithvalue initwithvalue proc~teststackpush->initwithvalue proc~valuefromobject valueFromObject proc~teststackpush->proc~valuefromobject interface~isequal isEqual proc~assertwithintolerancetwoquad->interface~isequal proc~assertwithintolerancetwoquad->proc~initializesharedassertionsmanager proc~releaseftobject releaseFTObject proc~releaseftvalue->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct initwithobject initwithobject proc~push->initwithobject var panprocstackclasstestsCallsGraph = svgPanZoom('#procstackclasstestsCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/stackclasstests.html","title":"StackClassTests – FTObjectLibrary"},{"text":"subroutine FTValueClassTests() Uses: FTValueClass FTAssertions proc~~ftvalueclasstests~~UsesGraph proc~ftvalueclasstests FTValueClassTests module~ftassertions FTAssertions module~ftassertions->proc~ftvalueclasstests module~ftvalueclass FTValueClass module~ftvalueclass->proc~ftvalueclasstests module~comparisonsmodule ComparisonsModule module~comparisonsmodule->module~ftassertions iso_fortran_env iso_fortran_env iso_fortran_env->module~ftassertions iso_fortran_env->module~ftvalueclass iso_fortran_env->module~comparisonsmodule module~ftolconstants FTOLConstants module~ftolconstants->module~ftassertions module~ftolconstants->module~ftvalueclass module~ftolconstants->module~comparisonsmodule module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftvalueclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Arguments None Calls proc~~ftvalueclasstests~~CallsGraph proc~ftvalueclasstests FTValueClassTests interface~ftassertequal FTAssertEqual proc~ftvalueclasstests->interface~ftassertequal retain retain proc~ftvalueclasstests->retain proc~doubleprecisionvalue doublePrecisionValue proc~ftvalueclasstests->proc~doubleprecisionvalue proc~integervalue integerValue proc~ftvalueclasstests->proc~integervalue refcount refcount proc~ftvalueclasstests->refcount interface~release release proc~ftvalueclasstests->interface~release proc~logicalvalue logicalValue proc~ftvalueclasstests->proc~logicalvalue description description proc~ftvalueclasstests->description proc~stringvalue stringValue proc~ftvalueclasstests->proc~stringvalue initwithvalue initwithvalue proc~ftvalueclasstests->initwithvalue proc~realvalue realValue proc~ftvalueclasstests->proc~realvalue proc~ftassert FTAssert proc~ftvalueclasstests->proc~ftassert proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad interface~ftassertequal->proc~assertwithintolerancetwoquad proc~releaseftvalue releaseFTValue interface~release->proc~releaseftvalue proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~ftassert->proc~initializesharedassertionsmanager interface~isequal isEqual proc~assertwithintolerancetwoquad->interface~isequal proc~assertwithintolerancetwoquad->proc~initializesharedassertionsmanager proc~releaseftobject releaseFTObject proc~releaseftvalue->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct var panprocftvalueclasstestsCallsGraph = svgPanZoom('#procftvalueclasstestsCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/ftvalueclasstests.html","title":"FTValueClassTests – FTObjectLibrary"},{"text":"subroutine FTValueDictionaryClassTests() Uses: FTValueDictionaryClass FTAssertions proc~~ftvaluedictionaryclasstests~~UsesGraph proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests module~ftvaluedictionaryclass FTValueDictionaryClass module~ftvaluedictionaryclass->proc~ftvaluedictionaryclasstests module~ftassertions FTAssertions module~ftassertions->proc~ftvaluedictionaryclasstests module~ftvalueclass FTValueClass module~ftvalueclass->module~ftvaluedictionaryclass iso_fortran_env iso_fortran_env iso_fortran_env->module~ftvaluedictionaryclass iso_fortran_env->module~ftassertions iso_fortran_env->module~ftvalueclass module~comparisonsmodule ComparisonsModule iso_fortran_env->module~comparisonsmodule module~ftdictionaryclass FTDictionaryClass module~ftdictionaryclass->module~ftvaluedictionaryclass module~ftolconstants FTOLConstants module~ftolconstants->module~ftassertions module~ftolconstants->module~ftvalueclass module~ftolconstants->module~comparisonsmodule module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftvalueclass module~ftkeyobjectpairclass FTKeyObjectPairClass module~ftobjectclass->module~ftkeyobjectpairclass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftobjectclass->module~ftlinkedlistrecordclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass module~ftkeyobjectpairclass->module~ftdictionaryclass module~ftmutableobjectarrayclass->module~ftdictionaryclass module~ftlinkedlistclass FTLinkedListClass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistclass->module~ftdictionaryclass module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistclass->module~ftlinkedlistiteratorclass module~ftlinkedlistiteratorclass->module~ftdictionaryclass module~ftlinkedlistrecordclass->module~ftlinkedlistclass module~comparisonsmodule->module~ftassertions var panprocftvaluedictionaryclasstestsUsesGraph = svgPanZoom('#procftvaluedictionaryclasstestsUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Arguments None Calls proc~~ftvaluedictionaryclasstests~~CallsGraph proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests interface~ftassertequal FTAssertEqual proc~ftvaluedictionaryclasstests->interface~ftassertequal containskey containskey proc~ftvaluedictionaryclasstests->containskey proc~realvalueforkey realValueForKey proc~ftvaluedictionaryclasstests->proc~realvalueforkey destruct destruct proc~ftvaluedictionaryclasstests->destruct initwithsize initwithsize proc~ftvaluedictionaryclasstests->initwithsize proc~ftassert FTAssert proc~ftvaluedictionaryclasstests->proc~ftassert proc~stringvalueforkey stringValueForKey proc~ftvaluedictionaryclasstests->proc~stringvalueforkey proc~integervalueforkey integerValueForKey proc~ftvaluedictionaryclasstests->proc~integervalueforkey addvalueforkey addvalueforkey proc~ftvaluedictionaryclasstests->addvalueforkey proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad interface~ftassertequal->proc~assertwithintolerancetwoquad proc~objectforkey objectForKey proc~realvalueforkey->proc~objectforkey proc~valuefromobject valueFromObject proc~realvalueforkey->proc~valuefromobject proc~realvalue realValue proc~realvalueforkey->proc~realvalue proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~ftassert->proc~initializesharedassertionsmanager proc~stringvalueforkey->proc~objectforkey proc~stringvalueforkey->proc~valuefromobject proc~stringvalue stringValue proc~stringvalueforkey->proc~stringvalue proc~integervalueforkey->proc~objectforkey proc~integervalueforkey->proc~valuefromobject proc~integervalue integerValue proc~integervalueforkey->proc~integervalue interface~isequal isEqual proc~assertwithintolerancetwoquad->interface~isequal proc~assertwithintolerancetwoquad->proc~initializesharedassertionsmanager proc~objectforkeyinlist objectForKeyInList proc~objectforkey->proc~objectforkeyinlist entries entries proc~objectforkey->entries proc~object object proc~objectforkeyinlist->proc~object var panprocftvaluedictionaryclasstestsCallsGraph = svgPanZoom('#procftvaluedictionaryclasstestsCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/ftvaluedictionaryclasstests.html","title":"FTValueDictionaryClassTests – FTObjectLibrary"},{"text":"public subroutine demonstrateLinkedList() Uses: FTLinkedListClass FTLinkedListIteratorClass FTValueClass proc~~demonstratelinkedlist~~UsesGraph proc~demonstratelinkedlist demonstrateLinkedList module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistiteratorclass->proc~demonstratelinkedlist module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistclass->proc~demonstratelinkedlist module~ftlinkedlistclass->module~ftlinkedlistiteratorclass module~ftvalueclass FTValueClass module~ftvalueclass->proc~demonstratelinkedlist module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftlinkedlistrecordclass->module~ftlinkedlistclass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftvalueclass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftobjectclass->module~ftlinkedlistrecordclass module~ftolconstants FTOLConstants module~ftolconstants->module~ftvalueclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass iso_fortran_env iso_fortran_env iso_fortran_env->module~ftvalueclass var panprocdemonstratelinkedlistUsesGraph = svgPanZoom('#procdemonstratelinkedlistUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Arguments None Calls proc~~demonstratelinkedlist~~CallsGraph proc~demonstratelinkedlist demonstrateLinkedList proc~add add proc~demonstratelinkedlist->proc~add remove remove proc~demonstratelinkedlist->remove isatend isatend proc~demonstratelinkedlist->isatend proc~integervalue integerValue proc~demonstratelinkedlist->proc~integervalue init init proc~demonstratelinkedlist->init interface~release release proc~demonstratelinkedlist->interface~release reverse reverse proc~demonstratelinkedlist->reverse printdescription printdescription proc~demonstratelinkedlist->printdescription proc~valuefromobject valueFromObject proc~demonstratelinkedlist->proc~valuefromobject proc~initwithftlinkedlist initWithFTLinkedList proc~demonstratelinkedlist->proc~initwithftlinkedlist initwithvalue initwithvalue proc~demonstratelinkedlist->initwithvalue proc~movetonext moveToNext proc~demonstratelinkedlist->proc~movetonext proc~insertobjectafterobject insertObjectAfterObject proc~demonstratelinkedlist->proc~insertobjectafterobject object object proc~demonstratelinkedlist->object proc~initwithobject initWithObject proc~add->proc~initwithobject proc~releaseftvalue releaseFTValue interface~release->proc~releaseftvalue proc~initwithftlinkedlist->init proc~settostart setToStart proc~initwithftlinkedlist->proc~settostart proc~setlinkedlist setLinkedList proc~initwithftlinkedlist->proc~setlinkedlist proc~insertobjectafterobject->proc~add proc~insertobjectafterrecord insertObjectAfterRecord proc~insertobjectafterobject->proc~insertobjectafterrecord proc~initwithobject->init retain retain proc~initwithobject->retain proc~releaseftobject releaseFTObject proc~releaseftvalue->proc~releaseftobject proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct proc~setlinkedlist->retain proc~setlinkedlist->proc~settostart proc~releasememberlist releaseMemberList proc~setlinkedlist->proc~releasememberlist releaseftobject releaseftobject proc~releasememberlist->releaseftobject proc~insertobjectafterrecord->proc~initwithobject var panprocdemonstratelinkedlistCallsGraph = svgPanZoom('#procdemonstratelinkedlistCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/demonstratelinkedlist.html","title":"demonstrateLinkedList – FTObjectLibrary"},{"text":"public function storedData(self) result(d) Arguments Type Intent Optional Attributes Name class( FTData ) :: self Return Value character(len=1)\n  (SIZE(self%dataStorage))","tags":"","loc":"proc/storeddata.html","title":"storedData – FTObjectLibrary"},{"text":"public function dataType(self) result(t) Arguments Type Intent Optional Attributes Name class( FTData ) :: self Return Value character(len=DATA_CLASS_TYPE_LENGTH)","tags":"","loc":"proc/datatype.html","title":"dataType – FTObjectLibrary"},{"text":"public function dataClassName(self) result(s) Class name returns a string with the name of the type of the object ### Usage: PRINT *,  obj % className()\n    if( obj % className = \"FTData\") Arguments Type Intent Optional Attributes Name class( FTData ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH)","tags":"","loc":"proc/dataclassname.html","title":"dataClassName – FTObjectLibrary"},{"text":"public function dataIsOfType(self, dataType) result(t) Arguments Type Intent Optional Attributes Name class( FTData ) :: self character(len=DATA_CLASS_TYPE_LENGTH) :: dataType Return Value logical","tags":"","loc":"proc/dataisoftype.html","title":"dataIsOfType – FTObjectLibrary"},{"text":"public subroutine initWithDataOfType(self, genericData, dataType) Arguments Type Intent Optional Attributes Name class( FTData ) :: self character(len=1) :: genericData (:) character(len=*) :: dataType Calls proc~~initwithdataoftype~~CallsGraph proc~initwithdataoftype initWithDataOfType init init proc~initwithdataoftype->init datastorage datastorage proc~initwithdataoftype->datastorage Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initwithdataoftype.html","title":"initWithDataOfType – FTObjectLibrary"},{"text":"public subroutine releaseFTData(self) Arguments Type Intent Optional Attributes Name class( FTData ), POINTER :: self Calls proc~~releaseftdata~~CallsGraph proc~releaseftdata releaseFTData proc~releaseftobject releaseFTObject proc~releaseftdata->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~releaseftdata~~CalledByGraph proc~releaseftdata releaseFTData interface~release~7 release interface~release~7->proc~releaseftdata Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/releaseftdata.html","title":"releaseFTData – FTObjectLibrary"},{"text":"public interface release Calls interface~~release~7~~CallsGraph interface~release~7 release proc~releaseftdata releaseFTData interface~release~7->proc~releaseftdata proc~releaseftobject releaseFTObject proc~releaseftdata->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures releaseFTData Module Procedures public subroutine releaseFTData (self) Arguments Type Intent Optional Attributes Name class( FTData ), POINTER :: self","tags":"","loc":"interface/release~7.html","title":"release – FTObjectLibrary"},{"text":"public function FTKeyObjectPairDescription(self) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ) :: self Return Value character(len=DESCRIPTION_CHARACTER_LENGTH) Calls proc~~ftkeyobjectpairdescription~~CallsGraph proc~ftkeyobjectpairdescription FTKeyObjectPairDescription description description proc~ftkeyobjectpairdescription->description Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/ftkeyobjectpairdescription.html","title":"FTKeyObjectPairDescription – FTObjectLibrary"},{"text":"public function key(self) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ) :: self Return Value character(len=FTDICT_KWD_STRING_LENGTH) Called By proc~~key~~CalledByGraph proc~key key proc~allkeys AllKeys proc~allkeys->proc~key proc~allobjects AllObjects proc~allobjects->proc~key proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->proc~allkeys proc~ftdictionaryclasstests->proc~allobjects Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/key.html","title":"key – FTObjectLibrary"},{"text":"public function object(self) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ) :: self Return Value class(FTObject),\n  POINTER Called By proc~~object~~CalledByGraph proc~object object proc~objectforkeyinlist objectForKeyInList proc~objectforkeyinlist->proc~object proc~allobjects AllObjects proc~allobjects->proc~object proc~objectforkey objectForKey proc~objectforkey->proc~objectforkeyinlist proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->proc~allobjects proc~ftdictionaryclasstests->proc~objectforkey proc~containskey containsKey proc~ftdictionaryclasstests->proc~containskey proc~doubleprecisionvalueforkey doublePrecisionValueForKey proc~doubleprecisionvalueforkey->proc~objectforkey proc~containskey->proc~objectforkey proc~quadvalueforkey quadValueForKey proc~quadvalueforkey->proc~objectforkey proc~stringvalueforkey stringValueForKey proc~stringvalueforkey->proc~objectforkey proc~logicalvalueforkey logicalValueForKey proc~logicalvalueforkey->proc~objectforkey proc~integervalueforkey integerValueForKey proc~integervalueforkey->proc~objectforkey proc~realvalueforkey realValueForKey proc~realvalueforkey->proc~objectforkey proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests proc~ftvaluedictionaryclasstests->proc~stringvalueforkey proc~ftvaluedictionaryclasstests->proc~integervalueforkey proc~ftvaluedictionaryclasstests->proc~realvalueforkey proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~stringvalueforkey proc~ftexceptionclasstests->proc~realvalueforkey var panprocobjectCalledByGraph = svgPanZoom('#procobjectCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/object.html","title":"object – FTObjectLibrary"},{"text":"public subroutine initWithObjectAndKey(self, v, key) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ) :: self class(FTObject), POINTER :: v character(len=*) :: key Called By proc~~initwithobjectandkey~~CalledByGraph proc~initwithobjectandkey initWithObjectAndKey proc~addobjectforkey addObjectForKey proc~addobjectforkey->proc~initwithobjectandkey proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->proc~addobjectforkey proc~addquadvalueforkey addQuadValueForKey proc~addquadvalueforkey->proc~addobjectforkey proc~addstringvalueforkey addStringValueForKey proc~addstringvalueforkey->proc~addobjectforkey proc~initassertionfailureexception initAssertionFailureException proc~initassertionfailureexception->proc~addobjectforkey proc~addintegervalueforkey addIntegerValueForKey proc~addintegervalueforkey->proc~addobjectforkey proc~addrealvalueforkey addRealValueForKey proc~addrealvalueforkey->proc~addobjectforkey proc~adddoubleprecisionvalueforkey addDoublePrecisionValueForKey proc~adddoubleprecisionvalueforkey->proc~addobjectforkey proc~addlogicalvalueforkey addLogicalValueForKey proc~addlogicalvalueforkey->proc~addobjectforkey Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initwithobjectandkey.html","title":"initWithObjectAndKey – FTObjectLibrary"},{"text":"public subroutine destructFTKeyObjectPair(self) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ) :: self Calls proc~~destructftkeyobjectpair~~CallsGraph proc~destructftkeyobjectpair destructFTKeyObjectPair proc~releaseftobject releaseFTObject proc~destructftkeyobjectpair->proc~releaseftobject destruct destruct proc~destructftkeyobjectpair->destruct proc~releaseftobject->destruct printdescription printdescription proc~releaseftobject->printdescription Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/destructftkeyobjectpair.html","title":"destructFTKeyObjectPair – FTObjectLibrary"},{"text":"public subroutine releaseFTKeyObjectPair(self) Public, generic name: release(self) Call release(self) on an object to release control\n of an object. If its reference count is zero, then \n it is deallocated. Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ), POINTER :: self Calls proc~~releaseftkeyobjectpair~~CallsGraph proc~releaseftkeyobjectpair releaseFTKeyObjectPair proc~releaseftobject releaseFTObject proc~releaseftkeyobjectpair->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~releaseftkeyobjectpair~~CalledByGraph proc~releaseftkeyobjectpair releaseFTKeyObjectPair interface~release~8 release interface~release~8->proc~releaseftkeyobjectpair Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/releaseftkeyobjectpair.html","title":"releaseFTKeyObjectPair – FTObjectLibrary"},{"text":"public subroutine printFTKeyObjectPairDescription(self, iUnit) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ) :: self integer :: iUnit Calls proc~~printftkeyobjectpairdescription~~CallsGraph proc~printftkeyobjectpairdescription printFTKeyObjectPairDescription printdescription printdescription proc~printftkeyobjectpairdescription->printdescription Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/printftkeyobjectpairdescription.html","title":"printFTKeyObjectPairDescription – FTObjectLibrary"},{"text":"public interface release Calls interface~~release~8~~CallsGraph interface~release~8 release proc~releaseftkeyobjectpair releaseFTKeyObjectPair interface~release~8->proc~releaseftkeyobjectpair proc~releaseftobject releaseFTObject proc~releaseftkeyobjectpair->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures releaseFTKeyObjectPair Module Procedures public subroutine releaseFTKeyObjectPair (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ), POINTER :: self","tags":"","loc":"interface/release~8.html","title":"release – FTObjectLibrary"},{"text":"public function caseSensitive(self) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Return Value logical","tags":"","loc":"proc/casesensitive.html","title":"caseSensitive – FTObjectLibrary"},{"text":"public function COUNT(self) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Return Value integer","tags":"","loc":"proc/count.html","title":"COUNT – FTObjectLibrary"},{"text":"public function objectForKey(self, key) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self character(len=*) :: key Return Value class(FTObject),\n  POINTER Calls proc~~objectforkey~~CallsGraph proc~objectforkey objectForKey proc~objectforkeyinlist objectForKeyInList proc~objectforkey->proc~objectforkeyinlist entries entries proc~objectforkey->entries proc~object object proc~objectforkeyinlist->proc~object Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~objectforkey~~CalledByGraph proc~objectforkey objectForKey proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->proc~objectforkey proc~containskey containsKey proc~ftdictionaryclasstests->proc~containskey proc~doubleprecisionvalueforkey doublePrecisionValueForKey proc~doubleprecisionvalueforkey->proc~objectforkey proc~containskey->proc~objectforkey proc~quadvalueforkey quadValueForKey proc~quadvalueforkey->proc~objectforkey proc~stringvalueforkey stringValueForKey proc~stringvalueforkey->proc~objectforkey proc~logicalvalueforkey logicalValueForKey proc~logicalvalueforkey->proc~objectforkey proc~integervalueforkey integerValueForKey proc~integervalueforkey->proc~objectforkey proc~realvalueforkey realValueForKey proc~realvalueforkey->proc~objectforkey proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests proc~ftvaluedictionaryclasstests->proc~stringvalueforkey proc~ftvaluedictionaryclasstests->proc~integervalueforkey proc~ftvaluedictionaryclasstests->proc~realvalueforkey proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~stringvalueforkey proc~ftexceptionclasstests->proc~realvalueforkey Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/objectforkey.html","title":"objectForKey – FTObjectLibrary"},{"text":"public function containsKey(self, key) result(r) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self character(len=*) :: key Return Value logical Calls proc~~containskey~~CallsGraph proc~containskey containsKey proc~objectforkey objectForKey proc~containskey->proc~objectforkey proc~objectforkeyinlist objectForKeyInList proc~objectforkey->proc~objectforkeyinlist entries entries proc~objectforkey->entries proc~object object proc~objectforkeyinlist->proc~object Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~containskey~~CalledByGraph proc~containskey containsKey proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->proc~containskey Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/containskey.html","title":"containsKey – FTObjectLibrary"},{"text":"public function objectForKeyInList(key, list) Arguments Type Intent Optional Attributes Name character(len=*) :: key class(FTLinkedList) :: list Return Value class(FTObject),\n  POINTER Calls proc~~objectforkeyinlist~~CallsGraph proc~objectforkeyinlist objectForKeyInList proc~object object proc~objectforkeyinlist->proc~object Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~objectforkeyinlist~~CalledByGraph proc~objectforkeyinlist objectForKeyInList proc~objectforkey objectForKey proc~objectforkey->proc~objectforkeyinlist proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->proc~objectforkey proc~containskey containsKey proc~ftdictionaryclasstests->proc~containskey proc~doubleprecisionvalueforkey doublePrecisionValueForKey proc~doubleprecisionvalueforkey->proc~objectforkey proc~containskey->proc~objectforkey proc~quadvalueforkey quadValueForKey proc~quadvalueforkey->proc~objectforkey proc~stringvalueforkey stringValueForKey proc~stringvalueforkey->proc~objectforkey proc~logicalvalueforkey logicalValueForKey proc~logicalvalueforkey->proc~objectforkey proc~integervalueforkey integerValueForKey proc~integervalueforkey->proc~objectforkey proc~realvalueforkey realValueForKey proc~realvalueforkey->proc~objectforkey proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests proc~ftvaluedictionaryclasstests->proc~stringvalueforkey proc~ftvaluedictionaryclasstests->proc~integervalueforkey proc~ftvaluedictionaryclasstests->proc~realvalueforkey proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~stringvalueforkey proc~ftexceptionclasstests->proc~realvalueforkey Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/objectforkeyinlist.html","title":"objectForKeyInList – FTObjectLibrary"},{"text":"public function FTDictionaryDescription(self) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Return Value character(len=DESCRIPTION_CHARACTER_LENGTH) Calls proc~~ftdictionarydescription~~CallsGraph proc~ftdictionarydescription FTDictionaryDescription description description proc~ftdictionarydescription->description entries entries proc~ftdictionarydescription->entries Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/ftdictionarydescription.html","title":"FTDictionaryDescription – FTObjectLibrary"},{"text":"public function AllObjects(self) result(objectArray) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Return Value class(FTMutableObjectArray),\n  POINTER Calls proc~~allobjects~~CallsGraph proc~allobjects AllObjects proc~initwithsize initWithSize proc~allobjects->proc~initwithsize addobject addobject proc~allobjects->addobject proc~object object proc~allobjects->proc~object entries entries proc~allobjects->entries proc~key key proc~allobjects->proc~key proc~initwithsize->entries proc~init init proc~initwithsize->proc~init proc~init->proc~initwithsize Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~allobjects~~CalledByGraph proc~allobjects AllObjects proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->proc~allobjects Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/allobjects.html","title":"AllObjects – FTObjectLibrary"},{"text":"public function AllKeys(self) result(keys) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Return Value character(len=FTDICT_KWD_STRING_LENGTH),\n  POINTER,(:) Calls proc~~allkeys~~CallsGraph proc~allkeys AllKeys proc~key key proc~allkeys->proc~key entries entries proc~allkeys->entries Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~allkeys~~CalledByGraph proc~allkeys AllKeys proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->proc~allkeys Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/allkeys.html","title":"AllKeys – FTObjectLibrary"},{"text":"public function dictionaryFromObject(obj) result(cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( FTDictionary ),\n  POINTER","tags":"","loc":"proc/dictionaryfromobject.html","title":"dictionaryFromObject – FTObjectLibrary"},{"text":"public function dictionaryClassName(self) result(s) Class name returns a string with the name of the type of the object ### Usage: PRINT *,  obj % className()\n    if( obj % className = \"FTDictionary\") Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH)","tags":"","loc":"proc/dictionaryclassname.html","title":"dictionaryClassName – FTObjectLibrary"},{"text":"public subroutine init(self) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Calls proc~~init~~CallsGraph proc~init init proc~initwithsize initWithSize proc~init->proc~initwithsize proc~initwithsize->proc~init entries entries proc~initwithsize->entries Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~init~~CalledByGraph proc~init init proc~initwithsize initWithSize proc~init->proc~initwithsize proc~initwithsize->proc~init proc~initftexception initFTException proc~initftexception->proc~init proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->proc~initwithsize proc~allobjects AllObjects proc~ftdictionaryclasstests->proc~allobjects proc~initassertionfailureexception initAssertionFailureException proc~initassertionfailureexception->proc~initwithsize proc~initassertionfailureexception->proc~initftexception proc~initwarningexception initWarningException proc~initwarningexception->proc~initwithsize proc~initwarningexception->proc~initftexception proc~allobjects->proc~initwithsize proc~initfatalexception initFatalException proc~initfatalexception->proc~initwithsize proc~initfatalexception->proc~initftexception proc~testexception testException proc~testexception->proc~initftexception proc~subroutinethatthrowserror subroutineThatThrowsError proc~subroutinethatthrowserror->proc~testexception proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~subroutinethatthrowserror var panprocinitCalledByGraph = svgPanZoom('#procinitCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/init.html","title":"init – FTObjectLibrary"},{"text":"public subroutine initWithSize(self, sze) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self integer, intent(in) :: sze Calls proc~~initwithsize~~CallsGraph proc~initwithsize initWithSize proc~init init proc~initwithsize->proc~init entries entries proc~initwithsize->entries proc~init->proc~initwithsize Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~initwithsize~~CalledByGraph proc~initwithsize initWithSize proc~init init proc~initwithsize->proc~init proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->proc~initwithsize proc~allobjects AllObjects proc~ftdictionaryclasstests->proc~allobjects proc~init->proc~initwithsize proc~initassertionfailureexception initAssertionFailureException proc~initassertionfailureexception->proc~initwithsize proc~initftexception initFTException proc~initassertionfailureexception->proc~initftexception proc~initwarningexception initWarningException proc~initwarningexception->proc~initwithsize proc~initwarningexception->proc~initftexception proc~allobjects->proc~initwithsize proc~initfatalexception initFatalException proc~initfatalexception->proc~initwithsize proc~initfatalexception->proc~initftexception proc~initftexception->proc~init proc~testexception testException proc~testexception->proc~initftexception proc~subroutinethatthrowserror subroutineThatThrowsError proc~subroutinethatthrowserror->proc~testexception proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~subroutinethatthrowserror var panprocinitwithsizeCalledByGraph = svgPanZoom('#procinitwithsizeCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initwithsize.html","title":"initWithSize – FTObjectLibrary"},{"text":"public subroutine destructFTDictionary(self) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Calls proc~~destructftdictionary~~CallsGraph proc~destructftdictionary destructFTDictionary destruct destruct proc~destructftdictionary->destruct entries entries proc~destructftdictionary->entries Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/destructftdictionary.html","title":"destructFTDictionary – FTObjectLibrary"},{"text":"public subroutine releaseFTDictionary(self) Public, generic name: release(self) Call release(self) on an object to release control\n of an object. If its reference count is zero, then \n it is deallocated. Arguments Type Intent Optional Attributes Name type( FTDictionary ), POINTER :: self Calls proc~~releaseftdictionary~~CallsGraph proc~releaseftdictionary releaseFTDictionary releaseftobject releaseftobject proc~releaseftdictionary->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~releaseftdictionary~~CalledByGraph proc~releaseftdictionary releaseFTDictionary interface~release~9 release interface~release~9->proc~releaseftdictionary Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/releaseftdictionary.html","title":"releaseFTDictionary – FTObjectLibrary"},{"text":"public subroutine setCaseSensitive(self, bool) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self logical :: bool","tags":"","loc":"proc/setcasesensitive.html","title":"setCaseSensitive – FTObjectLibrary"},{"text":"public subroutine addObjectForKey(self, object, key) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self class(FTObject), POINTER :: object character(len=*) :: key Calls proc~~addobjectforkey~~CallsGraph proc~addobjectforkey addObjectForKey proc~add add proc~addobjectforkey->proc~add proc~initwithobjectandkey initWithObjectAndKey proc~addobjectforkey->proc~initwithobjectandkey entries entries proc~addobjectforkey->entries proc~initwithobject initWithObject proc~add->proc~initwithobject init init proc~initwithobject->init retain retain proc~initwithobject->retain Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~addobjectforkey~~CalledByGraph proc~addobjectforkey addObjectForKey proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->proc~addobjectforkey proc~addquadvalueforkey addQuadValueForKey proc~addquadvalueforkey->proc~addobjectforkey proc~addstringvalueforkey addStringValueForKey proc~addstringvalueforkey->proc~addobjectforkey proc~initassertionfailureexception initAssertionFailureException proc~initassertionfailureexception->proc~addobjectforkey proc~addintegervalueforkey addIntegerValueForKey proc~addintegervalueforkey->proc~addobjectforkey proc~addrealvalueforkey addRealValueForKey proc~addrealvalueforkey->proc~addobjectforkey proc~adddoubleprecisionvalueforkey addDoublePrecisionValueForKey proc~adddoubleprecisionvalueforkey->proc~addobjectforkey proc~addlogicalvalueforkey addLogicalValueForKey proc~addlogicalvalueforkey->proc~addobjectforkey Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/addobjectforkey.html","title":"addObjectForKey – FTObjectLibrary"},{"text":"public subroutine printFTDictionaryDescription(self, iUnit) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self integer :: iUnit Calls proc~~printftdictionarydescription~~CallsGraph proc~printftdictionarydescription printFTDictionaryDescription printdescription printdescription proc~printftdictionarydescription->printdescription entries entries proc~printftdictionarydescription->entries Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/printftdictionarydescription.html","title":"printFTDictionaryDescription – FTObjectLibrary"},{"text":"public subroutine castToDictionary(obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTDictionary ), POINTER :: cast Called By proc~~casttodictionary~~CalledByGraph proc~casttodictionary castToDictionary interface~cast cast interface~cast->proc~casttodictionary Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/casttodictionary.html","title":"castToDictionary – FTObjectLibrary"},{"text":"public interface cast Calls interface~~cast~~CallsGraph interface~cast cast proc~casttodictionary castToDictionary interface~cast->proc~casttodictionary Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures castToDictionary Module Procedures public subroutine castToDictionary (obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTDictionary ), POINTER :: cast","tags":"","loc":"interface/cast.html","title":"cast – FTObjectLibrary"},{"text":"public interface release Calls interface~~release~9~~CallsGraph interface~release~9 release proc~releaseftdictionary releaseFTDictionary interface~release~9->proc~releaseftdictionary releaseftobject releaseftobject proc~releaseftdictionary->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures releaseFTDictionary Module Procedures public subroutine releaseFTDictionary (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name type( FTDictionary ), POINTER :: self","tags":"","loc":"interface/release~9.html","title":"release – FTObjectLibrary"},{"text":"public function infoDictionary(self) Returns the exception's infoDictionary. Does\nnot transfer ownership/reference count is \nunchanged. Arguments Type Intent Optional Attributes Name class( FTException ) :: self Return Value class(FTDictionary),\n  POINTER Called By proc~~infodictionary~~CalledByGraph proc~infodictionary infoDictionary proc~printftexceptiondescription printFTExceptionDescription proc~printftexceptiondescription->proc~infodictionary Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/infodictionary.html","title":"infoDictionary – FTObjectLibrary"},{"text":"public function exceptionName(self) Returns the string representing the name set\nfor the exception. Arguments Type Intent Optional Attributes Name class( FTException ) :: self Return Value character(len=ERROR_MSG_STRING_LENGTH) Called By proc~~exceptionname~~CalledByGraph proc~exceptionname exceptionName proc~printftexceptiondescription printFTExceptionDescription proc~printftexceptiondescription->proc~exceptionname Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/exceptionname.html","title":"exceptionName – FTObjectLibrary"},{"text":"public function severity(self) Returns the severity level of the exception. Arguments Type Intent Optional Attributes Name class( FTException ) :: self Return Value integer","tags":"","loc":"proc/severity.html","title":"severity – FTObjectLibrary"},{"text":"public function exceptionFromObject(obj) result(cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( FTException ),\n  POINTER","tags":"","loc":"proc/exceptionfromobject.html","title":"exceptionFromObject – FTObjectLibrary"},{"text":"public function exceptionClassName(self) result(s) Class name returns a string with the name of the type of the object ### Usage: PRINT *,  obj % className()\n    if( obj % className = \"FTException\") Arguments Type Intent Optional Attributes Name class( FTException ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH)","tags":"","loc":"proc/exceptionclassname.html","title":"exceptionClassName – FTObjectLibrary"},{"text":"public subroutine initWarningException(self, msg) A convenience initializer for a warning error \nthat includes the key \"message\" in the\ninfoDictionary. Use this initializer as an \nexample of how to write one's own exception. Arguments Type Intent Optional Attributes Name class( FTException ) :: self character(len=*) :: msg Calls proc~~initwarningexception~~CallsGraph proc~initwarningexception initWarningException proc~initwithsize initWithSize proc~initwarningexception->proc~initwithsize proc~releasememberdictionary releaseMemberDictionary proc~initwarningexception->proc~releasememberdictionary addvalueforkey addvalueforkey proc~initwarningexception->addvalueforkey proc~initftexception initFTException proc~initwarningexception->proc~initftexception proc~init init proc~initwithsize->proc~init entries entries proc~initwithsize->entries releaseftobject releaseftobject proc~releasememberdictionary->releaseftobject proc~initftexception->proc~init proc~setinfodictionary setInfoDictionary proc~initftexception->proc~setinfodictionary proc~init->proc~initwithsize proc~setinfodictionary->proc~releasememberdictionary retain retain proc~setinfodictionary->retain var panprocinitwarningexceptionCallsGraph = svgPanZoom('#procinitwarningexceptionCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initwarningexception.html","title":"initWarningException – FTObjectLibrary"},{"text":"public subroutine initFatalException(self, msg) A convenience initializer for a fatal error \nthat includes the key \"message\" in the\ninfoDictionary.Use this initializer as an \nexample of how to write one's own exception. Arguments Type Intent Optional Attributes Name class( FTException ) :: self character(len=*) :: msg Calls proc~~initfatalexception~~CallsGraph proc~initfatalexception initFatalException proc~initwithsize initWithSize proc~initfatalexception->proc~initwithsize proc~releasememberdictionary releaseMemberDictionary proc~initfatalexception->proc~releasememberdictionary addvalueforkey addvalueforkey proc~initfatalexception->addvalueforkey proc~initftexception initFTException proc~initfatalexception->proc~initftexception proc~init init proc~initwithsize->proc~init entries entries proc~initwithsize->entries releaseftobject releaseftobject proc~releasememberdictionary->releaseftobject proc~initftexception->proc~init proc~setinfodictionary setInfoDictionary proc~initftexception->proc~setinfodictionary proc~init->proc~initwithsize proc~setinfodictionary->proc~releasememberdictionary retain retain proc~setinfodictionary->retain Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initfatalexception.html","title":"initFatalException – FTObjectLibrary"},{"text":"public subroutine initFTException(self, severity, exceptionName, infoDictionary) The main initializer for the class Arguments Type Intent Optional Attributes Name class( FTException ) :: self integer :: severity character(len=*) :: exceptionName class(FTDictionary), optional POINTER :: infoDictionary Calls proc~~initftexception~~CallsGraph proc~initftexception initFTException proc~setinfodictionary setInfoDictionary proc~initftexception->proc~setinfodictionary proc~init init proc~initftexception->proc~init proc~releasememberdictionary releaseMemberDictionary proc~setinfodictionary->proc~releasememberdictionary retain retain proc~setinfodictionary->retain proc~initwithsize initWithSize proc~init->proc~initwithsize releaseftobject releaseftobject proc~releasememberdictionary->releaseftobject proc~initwithsize->proc~init entries entries proc~initwithsize->entries Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~initftexception~~CalledByGraph proc~initftexception initFTException proc~testexception testException proc~testexception->proc~initftexception proc~initassertionfailureexception initAssertionFailureException proc~initassertionfailureexception->proc~initftexception proc~initwarningexception initWarningException proc~initwarningexception->proc~initftexception proc~initfatalexception initFatalException proc~initfatalexception->proc~initftexception proc~subroutinethatthrowserror subroutineThatThrowsError proc~subroutinethatthrowserror->proc~testexception proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~subroutinethatthrowserror Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initftexception.html","title":"initFTException – FTObjectLibrary"},{"text":"public subroutine initAssertionFailureException(self, msg, expectedValueObject, ObservedValueObject, level) A convenience initializer for an assertion error \nthat includes the keys: -\"message\"\n-\"expectedValue\"\n-\"observedValue\" in the infoDictionary Arguments Type Intent Optional Attributes Name class( FTException ) :: self character(len=*) :: msg class(FTValue), POINTER :: expectedValueObject class(FTValue), POINTER :: ObservedValueObject integer :: level Calls proc~~initassertionfailureexception~~CallsGraph proc~initassertionfailureexception initAssertionFailureException proc~initwithsize initWithSize proc~initassertionfailureexception->proc~initwithsize proc~releasememberdictionary releaseMemberDictionary proc~initassertionfailureexception->proc~releasememberdictionary addvalueforkey addvalueforkey proc~initassertionfailureexception->addvalueforkey proc~initftexception initFTException proc~initassertionfailureexception->proc~initftexception proc~addobjectforkey addObjectForKey proc~initassertionfailureexception->proc~addobjectforkey proc~init init proc~initwithsize->proc~init entries entries proc~initwithsize->entries releaseftobject releaseftobject proc~releasememberdictionary->releaseftobject proc~initftexception->proc~init proc~setinfodictionary setInfoDictionary proc~initftexception->proc~setinfodictionary proc~addobjectforkey->entries proc~add add proc~addobjectforkey->proc~add proc~initwithobjectandkey initWithObjectAndKey proc~addobjectforkey->proc~initwithobjectandkey proc~init->proc~initwithsize proc~setinfodictionary->proc~releasememberdictionary retain retain proc~setinfodictionary->retain proc~initwithobject initWithObject proc~add->proc~initwithobject proc~initwithobject->retain init init proc~initwithobject->init var panprocinitassertionfailureexceptionCallsGraph = svgPanZoom('#procinitassertionfailureexceptionCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initassertionfailureexception.html","title":"initAssertionFailureException – FTObjectLibrary"},{"text":"public subroutine destructException(self) The destructor for the class. Do not call this direectly. Call\nthe release() procedure instead Arguments Type Intent Optional Attributes Name class( FTException ) :: self Calls proc~~destructexception~~CallsGraph proc~destructexception destructException destruct destruct proc~destructexception->destruct proc~releasememberdictionary releaseMemberDictionary proc~destructexception->proc~releasememberdictionary releaseftobject releaseftobject proc~releasememberdictionary->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/destructexception.html","title":"destructException – FTObjectLibrary"},{"text":"public subroutine releaseFTException(self) Public, generic name: release(self) Call release(self) on an object to release control\n of an object. If its reference count is zero, then \n it is deallocated. Arguments Type Intent Optional Attributes Name class( FTException ), POINTER :: self Calls proc~~releaseftexception~~CallsGraph proc~releaseftexception releaseFTException releaseftobject releaseftobject proc~releaseftexception->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~releaseftexception~~CalledByGraph proc~releaseftexception releaseFTException interface~release~3 release interface~release~3->proc~releaseftexception proc~destructftexceptions destructFTExceptions proc~destructftexceptions->interface~release~3 proc~subroutinethatthrowserror subroutineThatThrowsError proc~subroutinethatthrowserror->interface~release~3 proc~setcurrenterror setCurrentError proc~setcurrenterror->interface~release~3 proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~destructftexceptions proc~ftexceptionclasstests->proc~subroutinethatthrowserror Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/releaseftexception.html","title":"releaseFTException – FTObjectLibrary"},{"text":"public subroutine setInfoDictionary(self, dict) Sets and retains the exception infoDictionary Arguments Type Intent Optional Attributes Name class( FTException ) :: self class(FTDictionary), POINTER :: dict Calls proc~~setinfodictionary~~CallsGraph proc~setinfodictionary setInfoDictionary proc~releasememberdictionary releaseMemberDictionary proc~setinfodictionary->proc~releasememberdictionary retain retain proc~setinfodictionary->retain releaseftobject releaseftobject proc~releasememberdictionary->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~setinfodictionary~~CalledByGraph proc~setinfodictionary setInfoDictionary proc~initftexception initFTException proc~initftexception->proc~setinfodictionary proc~testexception testException proc~testexception->proc~initftexception proc~initassertionfailureexception initAssertionFailureException proc~initassertionfailureexception->proc~initftexception proc~initwarningexception initWarningException proc~initwarningexception->proc~initftexception proc~initfatalexception initFatalException proc~initfatalexception->proc~initftexception proc~subroutinethatthrowserror subroutineThatThrowsError proc~subroutinethatthrowserror->proc~testexception proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~subroutinethatthrowserror var panprocsetinfodictionaryCalledByGraph = svgPanZoom('#procsetinfodictionaryCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/setinfodictionary.html","title":"setInfoDictionary – FTObjectLibrary"},{"text":"public subroutine releaseMemberDictionary(self) Arguments Type Intent Optional Attributes Name class( FTException ) :: self Calls proc~~releasememberdictionary~~CallsGraph proc~releasememberdictionary releaseMemberDictionary releaseftobject releaseftobject proc~releasememberdictionary->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~releasememberdictionary~~CalledByGraph proc~releasememberdictionary releaseMemberDictionary proc~setinfodictionary setInfoDictionary proc~setinfodictionary->proc~releasememberdictionary proc~destructexception destructException proc~destructexception->proc~releasememberdictionary proc~initassertionfailureexception initAssertionFailureException proc~initassertionfailureexception->proc~releasememberdictionary proc~initftexception initFTException proc~initassertionfailureexception->proc~initftexception proc~initwarningexception initWarningException proc~initwarningexception->proc~releasememberdictionary proc~initwarningexception->proc~initftexception proc~initfatalexception initFatalException proc~initfatalexception->proc~releasememberdictionary proc~initfatalexception->proc~initftexception proc~initftexception->proc~setinfodictionary proc~testexception testException proc~testexception->proc~initftexception proc~subroutinethatthrowserror subroutineThatThrowsError proc~subroutinethatthrowserror->proc~testexception proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~subroutinethatthrowserror var panprocreleasememberdictionaryCalledByGraph = svgPanZoom('#procreleasememberdictionaryCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/releasememberdictionary.html","title":"releaseMemberDictionary – FTObjectLibrary"},{"text":"public subroutine printFTExceptionDescription(self, iUnit) A basic printing of the exception and the info\nheld in the infoDicitonary. Arguments Type Intent Optional Attributes Name class( FTException ) :: self integer :: iUnit Calls proc~~printftexceptiondescription~~CallsGraph proc~printftexceptiondescription printFTExceptionDescription proc~exceptionname exceptionName proc~printftexceptiondescription->proc~exceptionname printdescription printdescription proc~printftexceptiondescription->printdescription proc~infodictionary infoDictionary proc~printftexceptiondescription->proc~infodictionary Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/printftexceptiondescription.html","title":"printFTExceptionDescription – FTObjectLibrary"},{"text":"public subroutine castToException(obj, cast) Cast the base class FTObject to the FTException class Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTException ), POINTER :: cast Called By proc~~casttoexception~~CalledByGraph proc~casttoexception castToException interface~cast~2 cast interface~cast~2->proc~casttoexception proc~poplastexception popLastException proc~poplastexception->interface~cast~2 proc~printallexceptions printAllExceptions proc~printallexceptions->interface~cast~2 proc~peeklastexception peekLastException proc~peeklastexception->interface~cast~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/casttoexception.html","title":"castToException – FTObjectLibrary"},{"text":"public interface cast Calls interface~~cast~2~~CallsGraph interface~cast~2 cast proc~casttoexception castToException interface~cast~2->proc~casttoexception Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By interface~~cast~2~~CalledByGraph interface~cast~2 cast proc~poplastexception popLastException proc~poplastexception->interface~cast~2 proc~printallexceptions printAllExceptions proc~printallexceptions->interface~cast~2 proc~peeklastexception peekLastException proc~peeklastexception->interface~cast~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures castToException Module Procedures public subroutine castToException (obj, cast) Cast the base class FTObject to the FTException class Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTException ), POINTER :: cast","tags":"","loc":"interface/cast~2.html","title":"cast – FTObjectLibrary"},{"text":"public interface release Calls interface~~release~3~~CallsGraph interface~release~3 release proc~releaseftexception releaseFTException interface~release~3->proc~releaseftexception releaseftobject releaseftobject proc~releaseftexception->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By interface~~release~3~~CalledByGraph interface~release~3 release proc~destructftexceptions destructFTExceptions proc~destructftexceptions->interface~release~3 proc~subroutinethatthrowserror subroutineThatThrowsError proc~subroutinethatthrowserror->interface~release~3 proc~setcurrenterror setCurrentError proc~setcurrenterror->interface~release~3 proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~destructftexceptions proc~ftexceptionclasstests->proc~subroutinethatthrowserror Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures releaseFTException Module Procedures public subroutine releaseFTException (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name class( FTException ), POINTER :: self","tags":"","loc":"interface/release~3.html","title":"release – FTObjectLibrary"},{"text":"public function errorCount() Returns the number of exceptions that have \nbeen thrown. Arguments None Return Value integer Calls proc~~errorcount~~CallsGraph proc~errorcount errorCount proc~initializeftexceptions initializeFTExceptions proc~errorcount->proc~initializeftexceptions init init proc~initializeftexceptions->init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/errorcount.html","title":"errorCount – FTObjectLibrary"},{"text":"public function errorObject() Returns a pointer to the current exception. Arguments None Return Value class(FTException),\n  POINTER Calls proc~~errorobject~~CallsGraph proc~errorobject errorObject proc~initializeftexceptions initializeFTExceptions proc~errorobject->proc~initializeftexceptions init init proc~initializeftexceptions->init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~errorobject~~CalledByGraph proc~errorobject errorObject proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~errorobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/errorobject.html","title":"errorObject – FTObjectLibrary"},{"text":"public function popLastException() Get the last exception posted. This is popped from the stack.\nThe caller is responsible for releasing the object after popping Arguments None Return Value class(FTException),\n  POINTER Calls proc~~poplastexception~~CallsGraph proc~poplastexception popLastException pop pop proc~poplastexception->pop proc~initializeftexceptions initializeFTExceptions proc~poplastexception->proc~initializeftexceptions interface~cast~2 cast proc~poplastexception->interface~cast~2 init init proc~initializeftexceptions->init proc~casttoexception castToException interface~cast~2->proc~casttoexception Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/poplastexception.html","title":"popLastException – FTObjectLibrary"},{"text":"public function peekLastException() Get the last exception posted. This is NOT popped from the stack.\nThe caller does not own the object. Arguments None Return Value class(FTException),\n  POINTER Calls proc~~peeklastexception~~CallsGraph proc~peeklastexception peekLastException interface~cast~2 cast proc~peeklastexception->interface~cast~2 proc~initializeftexceptions initializeFTExceptions proc~peeklastexception->proc~initializeftexceptions peek peek proc~peeklastexception->peek proc~casttoexception castToException interface~cast~2->proc~casttoexception init init proc~initializeftexceptions->init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/peeklastexception.html","title":"peekLastException – FTObjectLibrary"},{"text":"public subroutine initializeFTExceptions() Called at start of execution. Will be called automatically if an \nexception is thrown. Arguments None Calls proc~~initializeftexceptions~~CallsGraph proc~initializeftexceptions initializeFTExceptions init init proc~initializeftexceptions->init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~initializeftexceptions~~CalledByGraph proc~initializeftexceptions initializeFTExceptions proc~errorcount errorCount proc~errorcount->proc~initializeftexceptions proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~initializeftexceptions proc~errorobject errorObject proc~ftexceptionclasstests->proc~errorobject proc~subroutinethatthrowserror subroutineThatThrowsError proc~ftexceptionclasstests->proc~subroutinethatthrowserror proc~poplastexception popLastException proc~poplastexception->proc~initializeftexceptions proc~errorobject->proc~initializeftexceptions proc~peeklastexception peekLastException proc~peeklastexception->proc~initializeftexceptions proc~throw throw proc~throw->proc~initializeftexceptions proc~subroutinethatthrowserror->proc~throw Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initializeftexceptions.html","title":"initializeFTExceptions – FTObjectLibrary"},{"text":"public subroutine destructFTExceptions() Called at the end of execution. This procedure will announce if there\nare uncaught exceptions raised and print them. Arguments None Calls proc~~destructftexceptions~~CallsGraph proc~destructftexceptions destructFTExceptions interface~catch catch proc~destructftexceptions->interface~catch interface~release~3 release proc~destructftexceptions->interface~release~3 printdescription printdescription proc~destructftexceptions->printdescription proc~releaseftexception releaseFTException interface~release~3->proc~releaseftexception releaseftobject releaseftobject proc~releaseftexception->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~destructftexceptions~~CalledByGraph proc~destructftexceptions destructFTExceptions proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~destructftexceptions Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/destructftexceptions.html","title":"destructFTExceptions – FTObjectLibrary"},{"text":"public subroutine throw(exceptionToThrow) Throws the exception: exceptionToThrow Arguments Type Intent Optional Attributes Name class(FTException), POINTER :: exceptionToThrow Calls proc~~throw~~CallsGraph proc~throw throw push push proc~throw->push proc~initializeftexceptions initializeFTExceptions proc~throw->proc~initializeftexceptions init init proc~initializeftexceptions->init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~throw~~CalledByGraph proc~throw throw proc~subroutinethatthrowserror subroutineThatThrowsError proc~subroutinethatthrowserror->proc~throw proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~subroutinethatthrowserror Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/throw.html","title":"throw – FTObjectLibrary"},{"text":"public subroutine setCurrentError(e) Arguments Type Intent Optional Attributes Name class(FTException), POINTER :: e Calls proc~~setcurrenterror~~CallsGraph proc~setcurrenterror setCurrentError interface~release~3 release proc~setcurrenterror->interface~release~3 retain retain proc~setcurrenterror->retain proc~releaseftexception releaseFTException interface~release~3->proc~releaseftexception releaseftobject releaseftobject proc~releaseftexception->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/setcurrenterror.html","title":"setCurrentError – FTObjectLibrary"},{"text":"public subroutine printAllExceptions() Arguments None Calls proc~~printallexceptions~~CallsGraph proc~printallexceptions printAllExceptions isatend isatend proc~printallexceptions->isatend destruct destruct proc~printallexceptions->destruct movetonext movetonext proc~printallexceptions->movetonext printdescription printdescription proc~printallexceptions->printdescription initwithftlinkedlist initwithftlinkedlist proc~printallexceptions->initwithftlinkedlist interface~cast~2 cast proc~printallexceptions->interface~cast~2 object object proc~printallexceptions->object proc~casttoexception castToException interface~cast~2->proc~casttoexception Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/printallexceptions.html","title":"printAllExceptions – FTObjectLibrary"},{"text":"public interface catch Called By interface~~catch~~CalledByGraph interface~catch catch proc~destructftexceptions destructFTExceptions proc~destructftexceptions->interface~catch proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->interface~catch proc~ftexceptionclasstests->proc~destructftexceptions Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures catchAll catchErrorWithName Module Procedures private function catchAll() Returns .TRUE. if there are any exceptions. Arguments None Return Value logical private function catchErrorWithName(exceptionName) Returns .TRUE. if there is an exception with\nthe requested name. If so, it pops the \nexception and saves the pointer to it so that\nit can be accessed with the currentError()\nfunction. Arguments Type Intent Optional Attributes Name character(len=*) :: exceptionName Return Value logical","tags":"","loc":"interface/catch.html","title":"catch – FTObjectLibrary"},{"text":"public function llRecordClassName(self) result(s) Class name returns a string with the name of the type of the object ### Usage: PRINT *,  obj % className()\n    if( obj % className = \"FTLinkedListRecord\") Arguments Type Intent Optional Attributes Name class( FTLinkedListRecord ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH)","tags":"","loc":"proc/llrecordclassname.html","title":"llRecordClassName – FTObjectLibrary"},{"text":"public subroutine initWithObject(self, obj) Arguments Type Intent Optional Attributes Name class( FTLinkedListRecord ) :: self class(FTObject), POINTER :: obj Calls proc~~initwithobject~~CallsGraph proc~initwithobject initWithObject init init proc~initwithobject->init retain retain proc~initwithobject->retain Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~initwithobject~~CalledByGraph proc~initwithobject initWithObject proc~add add proc~add->proc~initwithobject proc~insertobjectafterrecord insertObjectAfterRecord proc~insertobjectafterrecord->proc~initwithobject proc~basictests basicTests proc~basictests->proc~add proc~testappendinglists testAppendingLists proc~testappendinglists->proc~add proc~addobjectsfromlist addObjectsFromList proc~testappendinglists->proc~addobjectsfromlist proc~insertobjectafterobject insertObjectAfterObject proc~insertobjectafterobject->proc~add proc~insertobjectafterobject->proc~insertobjectafterrecord proc~testdeletingobjects TestDeletingObjects proc~testdeletingobjects->proc~add proc~addobjectforkey addObjectForKey proc~addobjectforkey->proc~add proc~addobjecttomultiindextableforkeys addObjectToMultiIndexTableForKeys proc~addobjecttomultiindextableforkeys->proc~add proc~demonstratelinkedlist demonstrateLinkedList proc~demonstratelinkedlist->proc~add proc~demonstratelinkedlist->proc~insertobjectafterobject proc~addobjectsfromlist->proc~add proc~addobjecttosparsematrixforkeys addObjectToSparseMatrixForKeys proc~addobjecttosparsematrixforkeys->proc~add proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~basictests proc~ftlinkedlistclasstests->proc~testappendinglists proc~ftlinkedlistclasstests->proc~testdeletingobjects proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->proc~addobjectforkey proc~addquadvalueforkey addQuadValueForKey proc~addquadvalueforkey->proc~addobjectforkey proc~addstringvalueforkey addStringValueForKey proc~addstringvalueforkey->proc~addobjectforkey proc~initassertionfailureexception initAssertionFailureException proc~initassertionfailureexception->proc~addobjectforkey proc~addintegervalueforkey addIntegerValueForKey proc~addintegervalueforkey->proc~addobjectforkey proc~addrealvalueforkey addRealValueForKey proc~addrealvalueforkey->proc~addobjectforkey proc~adddoubleprecisionvalueforkey addDoublePrecisionValueForKey proc~adddoubleprecisionvalueforkey->proc~addobjectforkey proc~addlogicalvalueforkey addLogicalValueForKey proc~addlogicalvalueforkey->proc~addobjectforkey var panprocinitwithobjectCalledByGraph = svgPanZoom('#procinitwithobjectCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initwithobject.html","title":"initWithObject – FTObjectLibrary"},{"text":"public subroutine destructFTLinkedListRecord(self) Arguments Type Intent Optional Attributes Name class( FTLinkedListRecord ) :: self Calls proc~~destructftlinkedlistrecord~~CallsGraph proc~destructftlinkedlistrecord destructFTLinkedListRecord proc~releaseftobject releaseFTObject proc~destructftlinkedlistrecord->proc~releaseftobject destruct destruct proc~destructftlinkedlistrecord->destruct proc~releaseftobject->destruct printdescription printdescription proc~releaseftobject->printdescription Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/destructftlinkedlistrecord.html","title":"destructFTLinkedListRecord – FTObjectLibrary"},{"text":"public subroutine releaseFTLinkedListRecord(self) Arguments Type Intent Optional Attributes Name class( FTLinkedListRecord ), POINTER :: self Calls proc~~releaseftlinkedlistrecord~~CallsGraph proc~releaseftlinkedlistrecord releaseFTLinkedListRecord proc~releaseftobject releaseFTObject proc~releaseftlinkedlistrecord->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~releaseftlinkedlistrecord~~CalledByGraph proc~releaseftlinkedlistrecord releaseFTLinkedListRecord proc~removeobject1 removeObject1 proc~removeobject1->proc~releaseftlinkedlistrecord proc~removealllinkedlistobjects removeAllLinkedListObjects proc~removealllinkedlistobjects->proc~releaseftlinkedlistrecord proc~removelinkedlistrecord removeLinkedListRecord proc~removelinkedlistrecord->proc~releaseftlinkedlistrecord interface~release~10 release interface~release~10->proc~releaseftlinkedlistrecord Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/releaseftlinkedlistrecord.html","title":"releaseFTLinkedListRecord – FTObjectLibrary"},{"text":"public subroutine printFTLinkedRecordDescription(self, iUnit) Arguments Type Intent Optional Attributes Name class( FTLinkedListRecord ) :: self integer :: iUnit Calls proc~~printftlinkedrecorddescription~~CallsGraph proc~printftlinkedrecorddescription printFTLinkedRecordDescription printdescription printdescription proc~printftlinkedrecorddescription->printdescription Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/printftlinkedrecorddescription.html","title":"printFTLinkedRecordDescription – FTObjectLibrary"},{"text":"public interface release Calls interface~~release~10~~CallsGraph interface~release~10 release proc~releaseftlinkedlistrecord releaseFTLinkedListRecord interface~release~10->proc~releaseftlinkedlistrecord proc~releaseftobject releaseFTObject proc~releaseftlinkedlistrecord->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures releaseFTLinkedListRecord Module Procedures public subroutine releaseFTLinkedListRecord (self) Arguments Type Intent Optional Attributes Name class( FTLinkedListRecord ), POINTER :: self","tags":"","loc":"interface/release~10.html","title":"release – FTObjectLibrary"},{"text":"public function isCircular(self) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Return Value logical Called By proc~~iscircular~~CalledByGraph proc~iscircular isCircular proc~addobjectsfromlist addObjectsFromList proc~addobjectsfromlist->proc~iscircular proc~removealllinkedlistobjects removeAllLinkedListObjects proc~removealllinkedlistobjects->proc~iscircular proc~removelinkedlistrecord removeLinkedListRecord proc~removelinkedlistrecord->proc~iscircular proc~testappendinglists testAppendingLists proc~testappendinglists->proc~addobjectsfromlist proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~testappendinglists Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/iscircular.html","title":"isCircular – FTObjectLibrary"},{"text":"public function numberOfRecords(self) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Return Value integer","tags":"","loc":"proc/numberofrecords.html","title":"numberOfRecords – FTObjectLibrary"},{"text":"public function FTLinkedListDescription(self) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Return Value character(len=DESCRIPTION_CHARACTER_LENGTH) Calls proc~~ftlinkedlistdescription~~CallsGraph proc~ftlinkedlistdescription FTLinkedListDescription description description proc~ftlinkedlistdescription->description Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/ftlinkedlistdescription.html","title":"FTLinkedListDescription – FTObjectLibrary"},{"text":"public function allLinkedListObjects(self) result(array) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Return Value class(FTMutableObjectArray),\n  POINTER Calls proc~~alllinkedlistobjects~~CallsGraph proc~alllinkedlistobjects allLinkedListObjects addobject addobject proc~alllinkedlistobjects->addobject initwithsize initwithsize proc~alllinkedlistobjects->initwithsize Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/alllinkedlistobjects.html","title":"allLinkedListObjects – FTObjectLibrary"},{"text":"public function linkedListClassName(self) result(s) Class name returns a string with the name of the type of the object ### Usage: PRINT *,  obj % className()\n    if( obj % className = \"FTLinkedList\") Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH)","tags":"","loc":"proc/linkedlistclassname.html","title":"linkedListClassName – FTObjectLibrary"},{"text":"public function linkedListFromObject(obj) result(cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( FTLinkedList ),\n  POINTER","tags":"","loc":"proc/linkedlistfromobject.html","title":"linkedListFromObject – FTObjectLibrary"},{"text":"public subroutine initFTLinkedList(self) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Calls proc~~initftlinkedlist~~CallsGraph proc~initftlinkedlist initFTLinkedList init init proc~initftlinkedlist->init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initftlinkedlist.html","title":"initFTLinkedList – FTObjectLibrary"},{"text":"public subroutine add(self, obj) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class(FTObject), POINTER :: obj Calls proc~~add~~CallsGraph proc~add add proc~initwithobject initWithObject proc~add->proc~initwithobject init init proc~initwithobject->init retain retain proc~initwithobject->retain Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~add~~CalledByGraph proc~add add proc~basictests basicTests proc~basictests->proc~add proc~testappendinglists testAppendingLists proc~testappendinglists->proc~add proc~addobjectsfromlist addObjectsFromList proc~testappendinglists->proc~addobjectsfromlist proc~insertobjectafterobject insertObjectAfterObject proc~insertobjectafterobject->proc~add proc~testdeletingobjects TestDeletingObjects proc~testdeletingobjects->proc~add proc~addobjectforkey addObjectForKey proc~addobjectforkey->proc~add proc~addobjecttomultiindextableforkeys addObjectToMultiIndexTableForKeys proc~addobjecttomultiindextableforkeys->proc~add proc~demonstratelinkedlist demonstrateLinkedList proc~demonstratelinkedlist->proc~add proc~demonstratelinkedlist->proc~insertobjectafterobject proc~addobjectsfromlist->proc~add proc~addobjecttosparsematrixforkeys addObjectToSparseMatrixForKeys proc~addobjecttosparsematrixforkeys->proc~add proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~basictests proc~ftlinkedlistclasstests->proc~testappendinglists proc~ftlinkedlistclasstests->proc~testdeletingobjects proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->proc~addobjectforkey proc~addquadvalueforkey addQuadValueForKey proc~addquadvalueforkey->proc~addobjectforkey proc~addstringvalueforkey addStringValueForKey proc~addstringvalueforkey->proc~addobjectforkey proc~initassertionfailureexception initAssertionFailureException proc~initassertionfailureexception->proc~addobjectforkey proc~addintegervalueforkey addIntegerValueForKey proc~addintegervalueforkey->proc~addobjectforkey proc~addrealvalueforkey addRealValueForKey proc~addrealvalueforkey->proc~addobjectforkey proc~adddoubleprecisionvalueforkey addDoublePrecisionValueForKey proc~adddoubleprecisionvalueforkey->proc~addobjectforkey proc~addlogicalvalueforkey addLogicalValueForKey proc~addlogicalvalueforkey->proc~addobjectforkey var panprocaddCalledByGraph = svgPanZoom('#procaddCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/add.html","title":"add – FTObjectLibrary"},{"text":"public subroutine addObjectsFromList(self, list) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class( FTLinkedList ), POINTER :: list Calls proc~~addobjectsfromlist~~CallsGraph proc~addobjectsfromlist addObjectsFromList proc~iscircular isCircular proc~addobjectsfromlist->proc~iscircular proc~makecircular makeCircular proc~addobjectsfromlist->proc~makecircular proc~add add proc~addobjectsfromlist->proc~add proc~initwithobject initWithObject proc~add->proc~initwithobject init init proc~initwithobject->init retain retain proc~initwithobject->retain Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~addobjectsfromlist~~CalledByGraph proc~addobjectsfromlist addObjectsFromList proc~testappendinglists testAppendingLists proc~testappendinglists->proc~addobjectsfromlist proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~testappendinglists Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/addobjectsfromlist.html","title":"addObjectsFromList – FTObjectLibrary"},{"text":"public subroutine insertObjectAfterRecord(self, obj, after) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class(FTObject), POINTER :: obj class(FTLinkedListRecord), POINTER :: after Calls proc~~insertobjectafterrecord~~CallsGraph proc~insertobjectafterrecord insertObjectAfterRecord proc~initwithobject initWithObject proc~insertobjectafterrecord->proc~initwithobject init init proc~initwithobject->init retain retain proc~initwithobject->retain Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~insertobjectafterrecord~~CalledByGraph proc~insertobjectafterrecord insertObjectAfterRecord proc~insertobjectafterobject insertObjectAfterObject proc~insertobjectafterobject->proc~insertobjectafterrecord proc~demonstratelinkedlist demonstrateLinkedList proc~demonstratelinkedlist->proc~insertobjectafterobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/insertobjectafterrecord.html","title":"insertObjectAfterRecord – FTObjectLibrary"},{"text":"public subroutine insertObjectAfterObject(self, obj, after) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class(FTObject), POINTER :: obj class(FTObject), POINTER :: after Calls proc~~insertobjectafterobject~~CallsGraph proc~insertobjectafterobject insertObjectAfterObject proc~add add proc~insertobjectafterobject->proc~add proc~insertobjectafterrecord insertObjectAfterRecord proc~insertobjectafterobject->proc~insertobjectafterrecord proc~initwithobject initWithObject proc~add->proc~initwithobject proc~insertobjectafterrecord->proc~initwithobject init init proc~initwithobject->init retain retain proc~initwithobject->retain Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~insertobjectafterobject~~CalledByGraph proc~insertobjectafterobject insertObjectAfterObject proc~demonstratelinkedlist demonstrateLinkedList proc~demonstratelinkedlist->proc~insertobjectafterobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/insertobjectafterobject.html","title":"insertObjectAfterObject – FTObjectLibrary"},{"text":"public subroutine makeCircular(self, circular) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self logical :: circular Called By proc~~makecircular~~CalledByGraph proc~makecircular makeCircular proc~addobjectsfromlist addObjectsFromList proc~addobjectsfromlist->proc~makecircular proc~reverselinkedlist reverseLinkedList proc~reverselinkedlist->proc~makecircular proc~printftlinkedlistdescription printFTLinkedListDescription proc~printftlinkedlistdescription->proc~makecircular proc~removealllinkedlistobjects removeAllLinkedListObjects proc~removealllinkedlistobjects->proc~makecircular proc~removelinkedlistrecord removeLinkedListRecord proc~removelinkedlistrecord->proc~makecircular proc~testappendinglists testAppendingLists proc~testappendinglists->proc~addobjectsfromlist proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~testappendinglists Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/makecircular.html","title":"makeCircular – FTObjectLibrary"},{"text":"public subroutine removeObject1(self, obj) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class(FTObject), POINTER :: obj Calls proc~~removeobject1~~CallsGraph proc~removeobject1 removeObject1 proc~releaseftlinkedlistrecord releaseFTLinkedListRecord proc~removeobject1->proc~releaseftlinkedlistrecord proc~releaseftobject releaseFTObject proc~releaseftlinkedlistrecord->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/removeobject1.html","title":"removeObject1 – FTObjectLibrary"},{"text":"public subroutine removeObject(self, obj) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class(FTObject), POINTER :: obj Calls proc~~removeobject~~CallsGraph proc~removeobject removeObject removerecord removerecord proc~removeobject->removerecord Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/removeobject.html","title":"removeObject – FTObjectLibrary"},{"text":"public subroutine removeLinkedListRecord(self, listRecord) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class(FTLinkedListRecord), POINTER :: listRecord Calls proc~~removelinkedlistrecord~~CallsGraph proc~removelinkedlistrecord removeLinkedListRecord proc~iscircular isCircular proc~removelinkedlistrecord->proc~iscircular proc~makecircular makeCircular proc~removelinkedlistrecord->proc~makecircular proc~releaseftlinkedlistrecord releaseFTLinkedListRecord proc~removelinkedlistrecord->proc~releaseftlinkedlistrecord proc~releaseftobject releaseFTObject proc~releaseftlinkedlistrecord->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/removelinkedlistrecord.html","title":"removeLinkedListRecord – FTObjectLibrary"},{"text":"public subroutine removeAllLinkedListObjects(self) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Calls proc~~removealllinkedlistobjects~~CallsGraph proc~removealllinkedlistobjects removeAllLinkedListObjects proc~iscircular isCircular proc~removealllinkedlistobjects->proc~iscircular proc~makecircular makeCircular proc~removealllinkedlistobjects->proc~makecircular proc~releaseftlinkedlistrecord releaseFTLinkedListRecord proc~removealllinkedlistobjects->proc~releaseftlinkedlistrecord proc~releaseftobject releaseFTObject proc~releaseftlinkedlistrecord->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/removealllinkedlistobjects.html","title":"removeAllLinkedListObjects – FTObjectLibrary"},{"text":"public subroutine destructFTLinkedList(self) It is automatically called by release(). Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Calls proc~~destructftlinkedlist~~CallsGraph proc~destructftlinkedlist destructFTLinkedList removeallobjects removeallobjects proc~destructftlinkedlist->removeallobjects destruct destruct proc~destructftlinkedlist->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/destructftlinkedlist.html","title":"destructFTLinkedList – FTObjectLibrary"},{"text":"public subroutine releaseFTLinkedList(self) Public, generic name: release(self) Call release(self) on an object to release control\n of an object. If its reference count is zero, then \n it is deallocated. Arguments Type Intent Optional Attributes Name type( FTLinkedList ), POINTER :: self Calls proc~~releaseftlinkedlist~~CallsGraph proc~releaseftlinkedlist releaseFTLinkedList releaseftobject releaseftobject proc~releaseftlinkedlist->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~releaseftlinkedlist~~CalledByGraph proc~releaseftlinkedlist releaseFTLinkedList interface~release~11 release interface~release~11->proc~releaseftlinkedlist proc~pop pop proc~pop->interface~release~11 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/releaseftlinkedlist.html","title":"releaseFTLinkedList – FTObjectLibrary"},{"text":"public subroutine printFTLinkedListDescription(self, iUnit) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self integer :: iUnit Calls proc~~printftlinkedlistdescription~~CallsGraph proc~printftlinkedlistdescription printFTLinkedListDescription printdescription printdescription proc~printftlinkedlistdescription->printdescription proc~makecircular makeCircular proc~printftlinkedlistdescription->proc~makecircular Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/printftlinkedlistdescription.html","title":"printFTLinkedListDescription – FTObjectLibrary"},{"text":"public subroutine reverseLinkedList(self) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Calls proc~~reverselinkedlist~~CallsGraph proc~reverselinkedlist reverseLinkedList proc~makecircular makeCircular proc~reverselinkedlist->proc~makecircular Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/reverselinkedlist.html","title":"reverseLinkedList – FTObjectLibrary"},{"text":"public subroutine castObjectToLinkedList(obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTLinkedList ), POINTER :: cast Called By proc~~castobjecttolinkedlist~~CalledByGraph proc~castobjecttolinkedlist castObjectToLinkedList interface~cast~3 cast interface~cast~3->proc~castobjecttolinkedlist Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/castobjecttolinkedlist.html","title":"castObjectToLinkedList – FTObjectLibrary"},{"text":"public interface cast Calls interface~~cast~3~~CallsGraph interface~cast~3 cast proc~castobjecttolinkedlist castObjectToLinkedList interface~cast~3->proc~castobjecttolinkedlist Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures castObjectToLinkedList Module Procedures public subroutine castObjectToLinkedList (obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTLinkedList ), POINTER :: cast","tags":"","loc":"interface/cast~3.html","title":"cast – FTObjectLibrary"},{"text":"public interface release Calls interface~~release~11~~CallsGraph interface~release~11 release proc~releaseftlinkedlist releaseFTLinkedList interface~release~11->proc~releaseftlinkedlist releaseftobject releaseftobject proc~releaseftlinkedlist->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By interface~~release~11~~CalledByGraph interface~release~11 release proc~pop pop proc~pop->interface~release~11 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures releaseFTLinkedList Module Procedures public subroutine releaseFTLinkedList (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name type( FTLinkedList ), POINTER :: self","tags":"","loc":"interface/release~11.html","title":"release – FTObjectLibrary"},{"text":"public function FTLinkedListIsAtEnd(self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Return Value logical","tags":"","loc":"proc/ftlinkedlistisatend.html","title":"FTLinkedListIsAtEnd – FTObjectLibrary"},{"text":"public function returnLinkedList(self) result(o) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Return Value class(FTLinkedList),\n  POINTER","tags":"","loc":"proc/returnlinkedlist.html","title":"returnLinkedList – FTObjectLibrary"},{"text":"public function FTLinkedListObject(self) result(o) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Return Value class(FTObject),\n  POINTER","tags":"","loc":"proc/ftlinkedlistobject.html","title":"FTLinkedListObject – FTObjectLibrary"},{"text":"public function FTLinkedListCurrentRecord(self) result(o) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Return Value class(FTLinkedListRecord),\n  POINTER","tags":"","loc":"proc/ftlinkedlistcurrentrecord.html","title":"FTLinkedListCurrentRecord – FTObjectLibrary"},{"text":"public function linkedListIteratorClassName(self) result(s) Class name returns a string with the name of the type of the object ### Usage: PRINT *,  obj % className()\n    if( obj % className = \"FTLinkedListIterator\") Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH)","tags":"","loc":"proc/linkedlistiteratorclassname.html","title":"linkedListIteratorClassName – FTObjectLibrary"},{"text":"public subroutine initEmpty(self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Calls proc~~initempty~~CallsGraph proc~initempty initEmpty init init proc~initempty->init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initempty.html","title":"initEmpty – FTObjectLibrary"},{"text":"public subroutine initWithFTLinkedList(self, list) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self class(FTLinkedList), POINTER :: list Calls proc~~initwithftlinkedlist~~CallsGraph proc~initwithftlinkedlist initWithFTLinkedList init init proc~initwithftlinkedlist->init proc~settostart setToStart proc~initwithftlinkedlist->proc~settostart proc~setlinkedlist setLinkedList proc~initwithftlinkedlist->proc~setlinkedlist proc~setlinkedlist->proc~settostart proc~releasememberlist releaseMemberList proc~setlinkedlist->proc~releasememberlist retain retain proc~setlinkedlist->retain releaseftobject releaseftobject proc~releasememberlist->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~initwithftlinkedlist~~CalledByGraph proc~initwithftlinkedlist initWithFTLinkedList proc~basictests basicTests proc~basictests->proc~initwithftlinkedlist proc~testdeletingobjects TestDeletingObjects proc~testdeletingobjects->proc~initwithftlinkedlist proc~demonstratelinkedlist demonstrateLinkedList proc~demonstratelinkedlist->proc~initwithftlinkedlist proc~testappendinglists testAppendingLists proc~testappendinglists->proc~initwithftlinkedlist proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~basictests proc~ftlinkedlistclasstests->proc~testdeletingobjects proc~ftlinkedlistclasstests->proc~testappendinglists Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initwithftlinkedlist.html","title":"initWithFTLinkedList – FTObjectLibrary"},{"text":"public subroutine destructIterator(self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Calls proc~~destructiterator~~CallsGraph proc~destructiterator destructIterator proc~releasememberlist releaseMemberList proc~destructiterator->proc~releasememberlist destruct destruct proc~destructiterator->destruct releaseftobject releaseftobject proc~releasememberlist->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/destructiterator.html","title":"destructIterator – FTObjectLibrary"},{"text":"public subroutine releaseMemberList(self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Calls proc~~releasememberlist~~CallsGraph proc~releasememberlist releaseMemberList releaseftobject releaseftobject proc~releasememberlist->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~releasememberlist~~CalledByGraph proc~releasememberlist releaseMemberList proc~setlinkedlist setLinkedList proc~setlinkedlist->proc~releasememberlist proc~destructiterator destructIterator proc~destructiterator->proc~releasememberlist proc~initwithftlinkedlist initWithFTLinkedList proc~initwithftlinkedlist->proc~setlinkedlist proc~objectinsparsematrixforkeys objectInSparseMatrixForKeys proc~objectinsparsematrixforkeys->proc~setlinkedlist proc~sparsematrixcontainskeys SparseMatrixContainsKeys proc~sparsematrixcontainskeys->proc~setlinkedlist proc~basictests basicTests proc~basictests->proc~initwithftlinkedlist proc~testdeletingobjects TestDeletingObjects proc~testdeletingobjects->proc~initwithftlinkedlist proc~demonstratelinkedlist demonstrateLinkedList proc~demonstratelinkedlist->proc~initwithftlinkedlist proc~testappendinglists testAppendingLists proc~testappendinglists->proc~initwithftlinkedlist proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~basictests proc~ftlinkedlistclasstests->proc~testdeletingobjects proc~ftlinkedlistclasstests->proc~testappendinglists var panprocreleasememberlistCalledByGraph = svgPanZoom('#procreleasememberlistCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/releasememberlist.html","title":"releaseMemberList – FTObjectLibrary"},{"text":"public subroutine releaseFTLinkedListIterator(self) Public, generic name: release(self) Call release(self) on an object to release control\n of an object. If its reference count is zero, then \n it is deallocated. Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ), POINTER :: self Calls proc~~releaseftlinkedlistiterator~~CallsGraph proc~releaseftlinkedlistiterator releaseFTLinkedListIterator releaseftobject releaseftobject proc~releaseftlinkedlistiterator->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~releaseftlinkedlistiterator~~CalledByGraph proc~releaseftlinkedlistiterator releaseFTLinkedListIterator interface~release~4 release interface~release~4->proc~releaseftlinkedlistiterator proc~basictests basicTests proc~basictests->interface~release~4 proc~testappendinglists testAppendingLists proc~testappendinglists->interface~release~4 proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~basictests proc~ftlinkedlistclasstests->proc~testappendinglists Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/releaseftlinkedlistiterator.html","title":"releaseFTLinkedListIterator – FTObjectLibrary"},{"text":"public subroutine setToStart(self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Called By proc~~settostart~~CalledByGraph proc~settostart setToStart proc~basictests basicTests proc~basictests->proc~settostart proc~initwithftlinkedlist initWithFTLinkedList proc~basictests->proc~initwithftlinkedlist proc~sparsematrixcontainskeys SparseMatrixContainsKeys proc~sparsematrixcontainskeys->proc~settostart proc~setlinkedlist setLinkedList proc~sparsematrixcontainskeys->proc~setlinkedlist proc~setlinkedlist->proc~settostart proc~testdeletingobjects TestDeletingObjects proc~testdeletingobjects->proc~settostart proc~testdeletingobjects->proc~initwithftlinkedlist proc~testappendinglists testAppendingLists proc~testappendinglists->proc~settostart proc~testappendinglists->proc~initwithftlinkedlist proc~initwithftlinkedlist->proc~settostart proc~initwithftlinkedlist->proc~setlinkedlist proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~basictests proc~ftlinkedlistclasstests->proc~testdeletingobjects proc~ftlinkedlistclasstests->proc~testappendinglists proc~objectinsparsematrixforkeys objectInSparseMatrixForKeys proc~objectinsparsematrixforkeys->proc~setlinkedlist proc~demonstratelinkedlist demonstrateLinkedList proc~demonstratelinkedlist->proc~initwithftlinkedlist var panprocsettostartCalledByGraph = svgPanZoom('#procsettostartCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/settostart.html","title":"setToStart – FTObjectLibrary"},{"text":"public subroutine moveToNext(self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Called By proc~~movetonext~~CalledByGraph proc~movetonext moveToNext proc~basictests basicTests proc~basictests->proc~movetonext proc~sparsematrixcontainskeys SparseMatrixContainsKeys proc~sparsematrixcontainskeys->proc~movetonext proc~testdeletingobjects TestDeletingObjects proc~testdeletingobjects->proc~movetonext proc~testappendinglists testAppendingLists proc~testappendinglists->proc~movetonext proc~demonstratelinkedlist demonstrateLinkedList proc~demonstratelinkedlist->proc~movetonext proc~objectinsparsematrixforkeys objectInSparseMatrixForKeys proc~objectinsparsematrixforkeys->proc~movetonext proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~basictests proc~ftlinkedlistclasstests->proc~testdeletingobjects proc~ftlinkedlistclasstests->proc~testappendinglists Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/movetonext.html","title":"moveToNext – FTObjectLibrary"},{"text":"public subroutine setLinkedList(self, list) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self class(FTLinkedList), POINTER :: list Calls proc~~setlinkedlist~~CallsGraph proc~setlinkedlist setLinkedList proc~releasememberlist releaseMemberList proc~setlinkedlist->proc~releasememberlist proc~settostart setToStart proc~setlinkedlist->proc~settostart retain retain proc~setlinkedlist->retain releaseftobject releaseftobject proc~releasememberlist->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~setlinkedlist~~CalledByGraph proc~setlinkedlist setLinkedList proc~initwithftlinkedlist initWithFTLinkedList proc~initwithftlinkedlist->proc~setlinkedlist proc~objectinsparsematrixforkeys objectInSparseMatrixForKeys proc~objectinsparsematrixforkeys->proc~setlinkedlist proc~sparsematrixcontainskeys SparseMatrixContainsKeys proc~sparsematrixcontainskeys->proc~setlinkedlist proc~basictests basicTests proc~basictests->proc~initwithftlinkedlist proc~testdeletingobjects TestDeletingObjects proc~testdeletingobjects->proc~initwithftlinkedlist proc~demonstratelinkedlist demonstrateLinkedList proc~demonstratelinkedlist->proc~initwithftlinkedlist proc~testappendinglists testAppendingLists proc~testappendinglists->proc~initwithftlinkedlist proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~basictests proc~ftlinkedlistclasstests->proc~testdeletingobjects proc~ftlinkedlistclasstests->proc~testappendinglists Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/setlinkedlist.html","title":"setLinkedList – FTObjectLibrary"},{"text":"public subroutine removeCurrentRecord(self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Calls proc~~removecurrentrecord~~CallsGraph proc~removecurrentrecord removeCurrentRecord removerecord removerecord proc~removecurrentrecord->removerecord Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~removecurrentrecord~~CalledByGraph proc~removecurrentrecord removeCurrentRecord proc~testdeletingobjects TestDeletingObjects proc~testdeletingobjects->proc~removecurrentrecord proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~testdeletingobjects Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/removecurrentrecord.html","title":"removeCurrentRecord – FTObjectLibrary"},{"text":"public interface release Calls interface~~release~4~~CallsGraph interface~release~4 release proc~releaseftlinkedlistiterator releaseFTLinkedListIterator interface~release~4->proc~releaseftlinkedlistiterator releaseftobject releaseftobject proc~releaseftlinkedlistiterator->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By interface~~release~4~~CalledByGraph interface~release~4 release proc~basictests basicTests proc~basictests->interface~release~4 proc~testappendinglists testAppendingLists proc~testappendinglists->interface~release~4 proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~basictests proc~ftlinkedlistclasstests->proc~testappendinglists Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures releaseFTLinkedListIterator Module Procedures public subroutine releaseFTLinkedListIterator (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ), POINTER :: self","tags":"","loc":"interface/release~4.html","title":"release – FTObjectLibrary"},{"text":"public function MultiIndexMatrixDataCast(obj) result(cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( MultiIndexMatrixData ),\n  POINTER","tags":"","loc":"proc/multiindexmatrixdatacast.html","title":"MultiIndexMatrixDataCast – FTObjectLibrary"},{"text":"public subroutine initWithObjectAndKeys(self, object, key) Arguments Type Intent Optional Attributes Name class( MultiIndexMatrixData ) :: self class(FTObject), POINTER :: object integer :: key (:) Calls proc~~initwithobjectandkeys~~CallsGraph proc~initwithobjectandkeys initWithObjectAndKeys init init proc~initwithobjectandkeys->init retain retain proc~initwithobjectandkeys->retain Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~initwithobjectandkeys~~CalledByGraph proc~initwithobjectandkeys initWithObjectAndKeys proc~addobjecttomultiindextableforkeys addObjectToMultiIndexTableForKeys proc~addobjecttomultiindextableforkeys->proc~initwithobjectandkeys Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initwithobjectandkeys.html","title":"initWithObjectAndKeys – FTObjectLibrary"},{"text":"public subroutine destructMultiIndexMatrixData(self) Arguments Type Intent Optional Attributes Name class( MultiIndexMatrixData ) :: self Calls proc~~destructmultiindexmatrixdata~~CallsGraph proc~destructmultiindexmatrixdata destructMultiIndexMatrixData proc~releaseftobject releaseFTObject proc~destructmultiindexmatrixdata->proc~releaseftobject destruct destruct proc~destructmultiindexmatrixdata->destruct proc~releaseftobject->destruct printdescription printdescription proc~releaseftobject->printdescription Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/destructmultiindexmatrixdata.html","title":"destructMultiIndexMatrixData – FTObjectLibrary"},{"text":"public subroutine castObjectToMultiIndexMatrixData(obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( MultiIndexMatrixData ), POINTER :: cast Called By proc~~castobjecttomultiindexmatrixdata~~CalledByGraph proc~castobjecttomultiindexmatrixdata castObjectToMultiIndexMatrixData interface~cast~4 cast interface~cast~4->proc~castobjecttomultiindexmatrixdata proc~multiindextablecontainskeys MultiIndexTableContainsKeys proc~multiindextablecontainskeys->interface~cast~4 proc~objectinmultiindextableforkeys objectInMultiIndexTableForKeys proc~objectinmultiindextableforkeys->interface~cast~4 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/castobjecttomultiindexmatrixdata.html","title":"castObjectToMultiIndexMatrixData – FTObjectLibrary"},{"text":"public interface cast Calls interface~~cast~4~~CallsGraph interface~cast~4 cast proc~castobjecttomultiindexmatrixdata castObjectToMultiIndexMatrixData interface~cast~4->proc~castobjecttomultiindexmatrixdata Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By interface~~cast~4~~CalledByGraph interface~cast~4 cast proc~multiindextablecontainskeys MultiIndexTableContainsKeys proc~multiindextablecontainskeys->interface~cast~4 proc~objectinmultiindextableforkeys objectInMultiIndexTableForKeys proc~objectinmultiindextableforkeys->interface~cast~4 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures castObjectToMultiIndexMatrixData Module Procedures public subroutine castObjectToMultiIndexMatrixData (obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( MultiIndexMatrixData ), POINTER :: cast","tags":"","loc":"interface/cast~4.html","title":"cast – FTObjectLibrary"},{"text":"public function objectInMultiIndexTableForKeys(self, keys) result(r) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self integer :: keys (:) Return Value class(FTObject),\n  POINTER Calls proc~~objectinmultiindextableforkeys~~CallsGraph proc~objectinmultiindextableforkeys objectInMultiIndexTableForKeys proc~sortkeysascending sortKeysAscending proc~objectinmultiindextableforkeys->proc~sortkeysascending proc~keysmatch keysMatch proc~objectinmultiindextableforkeys->proc~keysmatch table table proc~objectinmultiindextableforkeys->table interface~cast~4 cast proc~objectinmultiindextableforkeys->interface~cast~4 proc~castobjecttomultiindexmatrixdata castObjectToMultiIndexMatrixData interface~cast~4->proc~castobjecttomultiindexmatrixdata Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/objectinmultiindextableforkeys.html","title":"objectInMultiIndexTableForKeys – FTObjectLibrary"},{"text":"public function MultiIndexTableContainsKeys(self, keys) result(r) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self integer :: keys (:) Return Value logical Calls proc~~multiindextablecontainskeys~~CallsGraph proc~multiindextablecontainskeys MultiIndexTableContainsKeys proc~sortkeysascending sortKeysAscending proc~multiindextablecontainskeys->proc~sortkeysascending proc~keysmatch keysMatch proc~multiindextablecontainskeys->proc~keysmatch table table proc~multiindextablecontainskeys->table interface~cast~4 cast proc~multiindextablecontainskeys->interface~cast~4 proc~castobjecttomultiindexmatrixdata castObjectToMultiIndexMatrixData interface~cast~4->proc~castobjecttomultiindexmatrixdata Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/multiindextablecontainskeys.html","title":"MultiIndexTableContainsKeys – FTObjectLibrary"},{"text":"public function MultiIndexTableSize(self) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self Return Value integer","tags":"","loc":"proc/multiindextablesize.html","title":"MultiIndexTableSize – FTObjectLibrary"},{"text":"public function MultiIndexTableFromObject(obj) result(cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( FTMultiIndexTable ),\n  POINTER","tags":"","loc":"proc/multiindextablefromobject.html","title":"MultiIndexTableFromObject – FTObjectLibrary"},{"text":"public function keysMatch(key1, key2) Arguments Type Intent Optional Attributes Name integer, DIMENSION(:) :: key1 integer, DIMENSION(:) :: key2 Return Value logical Called By proc~~keysmatch~~CalledByGraph proc~keysmatch keysMatch proc~multiindextablecontainskeys MultiIndexTableContainsKeys proc~multiindextablecontainskeys->proc~keysmatch proc~objectinmultiindextableforkeys objectInMultiIndexTableForKeys proc~objectinmultiindextableforkeys->proc~keysmatch Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/keysmatch.html","title":"keysMatch – FTObjectLibrary"},{"text":"public subroutine initMultiIndexTableWithSize(self, N) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self integer :: N Calls proc~~initmultiindextablewithsize~~CallsGraph proc~initmultiindextablewithsize initMultiIndexTableWithSize init init proc~initmultiindextablewithsize->init table table proc~initmultiindextablewithsize->table Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initmultiindextablewithsize.html","title":"initMultiIndexTableWithSize – FTObjectLibrary"},{"text":"public subroutine destructMultiIndexTable(self) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self Calls proc~~destructmultiindextable~~CallsGraph proc~destructmultiindextable destructMultiIndexTable destruct destruct proc~destructmultiindextable->destruct table table proc~destructmultiindextable->table Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/destructmultiindextable.html","title":"destructMultiIndexTable – FTObjectLibrary"},{"text":"public subroutine releaseFTMultiIndexTable(self) Public, generic name: release(self) Call release(self) on an object to release control\n of an object. If its reference count is zero, then \n it is deallocated. Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ), POINTER :: self Calls proc~~releaseftmultiindextable~~CallsGraph proc~releaseftmultiindextable releaseFTMultiIndexTable proc~releaseftobject releaseFTObject proc~releaseftmultiindextable->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~releaseftmultiindextable~~CalledByGraph proc~releaseftmultiindextable releaseFTMultiIndexTable interface~release~5 release interface~release~5->proc~releaseftmultiindextable proc~multiindextabletests MultiIndexTableTests proc~multiindextabletests->interface~release~5 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/releaseftmultiindextable.html","title":"releaseFTMultiIndexTable – FTObjectLibrary"},{"text":"public subroutine addObjectToMultiIndexTableForKeys(self, obj, keys) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self class(FTObject), POINTER :: obj integer :: keys (:) Calls proc~~addobjecttomultiindextableforkeys~~CallsGraph proc~addobjecttomultiindextableforkeys addObjectToMultiIndexTableForKeys proc~add add proc~addobjecttomultiindextableforkeys->proc~add table table proc~addobjecttomultiindextableforkeys->table proc~releaseftobject releaseFTObject proc~addobjecttomultiindextableforkeys->proc~releaseftobject proc~initwithobjectandkeys initWithObjectAndKeys proc~addobjecttomultiindextableforkeys->proc~initwithobjectandkeys containskeys containskeys proc~addobjecttomultiindextableforkeys->containskeys proc~sortkeysascending sortKeysAscending proc~addobjecttomultiindextableforkeys->proc~sortkeysascending proc~initwithobject initWithObject proc~add->proc~initwithobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct init init proc~initwithobjectandkeys->init retain retain proc~initwithobjectandkeys->retain proc~initwithobject->init proc~initwithobject->retain Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/addobjecttomultiindextableforkeys.html","title":"addObjectToMultiIndexTableForKeys – FTObjectLibrary"},{"text":"public subroutine sortKeysAscending(keys) Arguments Type Intent Optional Attributes Name integer, DIMENSION(:) :: keys Called By proc~~sortkeysascending~~CalledByGraph proc~sortkeysascending sortKeysAscending proc~multiindextablecontainskeys MultiIndexTableContainsKeys proc~multiindextablecontainskeys->proc~sortkeysascending proc~addobjecttomultiindextableforkeys addObjectToMultiIndexTableForKeys proc~addobjecttomultiindextableforkeys->proc~sortkeysascending proc~multiindextabletests MultiIndexTableTests proc~multiindextabletests->proc~sortkeysascending proc~objectinmultiindextableforkeys objectInMultiIndexTableForKeys proc~objectinmultiindextableforkeys->proc~sortkeysascending Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/sortkeysascending.html","title":"sortKeysAscending – FTObjectLibrary"},{"text":"public subroutine printMultiIndexTableDescription(self, iUnit) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self integer :: iUnit Calls proc~~printmultiindextabledescription~~CallsGraph proc~printmultiindextabledescription printMultiIndexTableDescription printdescription printdescription proc~printmultiindextabledescription->printdescription table table proc~printmultiindextabledescription->table Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/printmultiindextabledescription.html","title":"printMultiIndexTableDescription – FTObjectLibrary"},{"text":"public interface release Calls interface~~release~5~~CallsGraph interface~release~5 release proc~releaseftmultiindextable releaseFTMultiIndexTable interface~release~5->proc~releaseftmultiindextable proc~releaseftobject releaseFTObject proc~releaseftmultiindextable->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By interface~~release~5~~CalledByGraph interface~release~5 release proc~multiindextabletests MultiIndexTableTests proc~multiindextabletests->interface~release~5 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures releaseFTMultiIndexTable Module Procedures public subroutine releaseFTMultiIndexTable (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ), POINTER :: self","tags":"","loc":"interface/release~5.html","title":"release – FTObjectLibrary"},{"text":"public function objectAtIndex(self, indx) result(obj) Access the object at the index indx *Usage CLASS(FTMutableObjectArray) :: array\n   INTEGER                     :: indx\n   CLASS(FTObject), POINTER    :: obj\n   obj => array % objectAtIndex(indx) Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self integer :: indx Return Value class(FTObject),\n  POINTER Calls proc~~objectatindex~~CallsGraph proc~objectatindex objectAtIndex array array proc~objectatindex->array Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~objectatindex~~CalledByGraph proc~objectatindex objectAtIndex proc~mutablearrayclasstests MutableArrayClassTests proc~mutablearrayclasstests->proc~objectatindex Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/objectatindex.html","title":"objectAtIndex – FTObjectLibrary"},{"text":"public function chunkSize(self) Returns the number of items to be added when the array needs to be re-sized *Usage CLASS(FTMutableObjectArray) :: array\n   INTEGER                     :: sze\n   sze =  array % chunkSize Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self Return Value integer","tags":"","loc":"proc/chunksize.html","title":"chunkSize – FTObjectLibrary"},{"text":"public function numberOfItems(self) Generic name: count Returns the acutal number of items in the array. *Usage CLASS(FTMutableObjectArray) :: array\n   INTEGER                     :: sze\n   sze =  array % count() Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self Return Value integer","tags":"","loc":"proc/numberofitems.html","title":"numberOfItems – FTObjectLibrary"},{"text":"public function allocatedSize(self) Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self Return Value integer Called By proc~~allocatedsize~~CalledByGraph proc~allocatedsize allocatedSize proc~mutablearrayclasstests MutableArrayClassTests proc~mutablearrayclasstests->proc~allocatedsize Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/allocatedsize.html","title":"allocatedSize – FTObjectLibrary"},{"text":"public function objectArrayFromObject(obj) result(cast) Generic Name: cast Cast a pointer to the base class to an FTMutableObjectArray pointer Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( FTMutableObjectArray ),\n  POINTER","tags":"","loc":"proc/objectarrayfromobject.html","title":"objectArrayFromObject – FTObjectLibrary"},{"text":"public function arrayClassName(self) result(s) Class name returns a string with the name of the type of the object ### Usage: PRINT *,  obj % className()\n    if( obj % className = \"FTMutableObjectArray\") Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH)","tags":"","loc":"proc/arrayclassname.html","title":"arrayClassName – FTObjectLibrary"},{"text":"public subroutine initObjectArrayWithSize(self, arraySize) Designated initializer. Initializes the amount of storage, but\n the array remains empty. *Usage CLASS(FTMutableObjectArray)  :: array\n   integer                      :: N = 11\n   CALL array % initWithSize(N) Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self integer :: arraySize Calls proc~~initobjectarraywithsize~~CallsGraph proc~initobjectarraywithsize initObjectArrayWithSize init init proc~initobjectarraywithsize->init array array proc~initobjectarraywithsize->array Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initobjectarraywithsize.html","title":"initObjectArrayWithSize – FTObjectLibrary"},{"text":"public subroutine destructObjectArray(self) Destructor for the class. This is called automatically when the\n reference count reaches zero. Do not call this yourself. Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self Calls proc~~destructobjectarray~~CallsGraph proc~destructobjectarray destructObjectArray array array proc~destructobjectarray->array proc~releaseftobject releaseFTObject proc~destructobjectarray->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/destructobjectarray.html","title":"destructObjectArray – FTObjectLibrary"},{"text":"public subroutine releaseFTMutableObjectArray(self) Public, generic name: release(self) Call release(self) on an object to release control\n of an object. If its reference count is zero, then \n it is deallocated. Arguments Type Intent Optional Attributes Name type( FTMutableObjectArray ), POINTER :: self Calls proc~~releaseftmutableobjectarray~~CallsGraph proc~releaseftmutableobjectarray releaseFTMutableObjectArray proc~releaseftobject releaseFTObject proc~releaseftmutableobjectarray->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~releaseftmutableobjectarray~~CalledByGraph proc~releaseftmutableobjectarray releaseFTMutableObjectArray interface~release~12 release interface~release~12->proc~releaseftmutableobjectarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/releaseftmutableobjectarray.html","title":"releaseFTMutableObjectArray – FTObjectLibrary"},{"text":"public subroutine addObjectToArray(self, obj) Add an object to the end of the array *Usage CLASS(FTMutableObjectArray)      :: array\n   CLASS(FTObject)        , POINTER :: obj\n   CLASS(FTObjectSubclass), POINTER :: p\n   obj => p\n   CALL array % addObject(obj) Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self class(FTObject), POINTER :: obj Calls proc~~addobjecttoarray~~CallsGraph proc~addobjecttoarray addObjectToArray array array proc~addobjecttoarray->array retain retain proc~addobjecttoarray->retain Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/addobjecttoarray.html","title":"addObjectToArray – FTObjectLibrary"},{"text":"public subroutine removeObjectAtIndex(self, indx) Remove an object at the index indx *Usage CLASS(FTMutableObjectArray) :: array\n   INTEGER                     :: indx\n   CALL array % removeObjectAtIndex(indx) Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self integer :: indx Calls proc~~removeobjectatindex~~CallsGraph proc~removeobjectatindex removeObjectAtIndex array array proc~removeobjectatindex->array proc~releaseftobject releaseFTObject proc~removeobjectatindex->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~removeobjectatindex~~CalledByGraph proc~removeobjectatindex removeObjectAtIndex proc~mutablearrayclasstests MutableArrayClassTests proc~mutablearrayclasstests->proc~removeobjectatindex Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/removeobjectatindex.html","title":"removeObjectAtIndex – FTObjectLibrary"},{"text":"public subroutine replaceObjectAtIndexWithObject(self, indx, replacement) Replace an object at the index indx Usage CLASS(FTMutableObjectArray) :: array\n   INTEGER                     :: indx\n   CALL array % replaceObjectAtIndexWithObject(indx) Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self integer :: indx class(FTObject), POINTER :: replacement Calls proc~~replaceobjectatindexwithobject~~CallsGraph proc~replaceobjectatindexwithobject replaceObjectAtIndexWithObject array array proc~replaceobjectatindexwithobject->array retain retain proc~replaceobjectatindexwithobject->retain proc~releaseftobject releaseFTObject proc~replaceobjectatindexwithobject->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~replaceobjectatindexwithobject~~CalledByGraph proc~replaceobjectatindexwithobject replaceObjectAtIndexWithObject proc~mutablearrayclasstests MutableArrayClassTests proc~mutablearrayclasstests->proc~replaceobjectatindexwithobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/replaceobjectatindexwithobject.html","title":"replaceObjectAtIndexWithObject – FTObjectLibrary"},{"text":"public subroutine printArray(self, iUnit) Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self integer :: iUnit Calls proc~~printarray~~CallsGraph proc~printarray printArray array array proc~printarray->array printdescription printdescription proc~printarray->printdescription Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/printarray.html","title":"printArray – FTObjectLibrary"},{"text":"public subroutine setChunkSize(self, chunkSize) Set the number of items to be added when the array needs to be re-sized *Usage CLASS(FTMutableObjectArray) :: array\n   INTEGER                     :: sze = 42\n   CALL array % setChunkSize(sze) Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self integer :: chunkSize","tags":"","loc":"proc/setchunksize.html","title":"setChunkSize – FTObjectLibrary"},{"text":"public subroutine castToMutableObjectArray(obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTMutableObjectArray ), POINTER :: cast Called By proc~~casttomutableobjectarray~~CalledByGraph proc~casttomutableobjectarray castToMutableObjectArray interface~cast~5 cast interface~cast~5->proc~casttomutableobjectarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/casttomutableobjectarray.html","title":"castToMutableObjectArray – FTObjectLibrary"},{"text":"public interface cast Calls interface~~cast~5~~CallsGraph interface~cast~5 cast proc~casttomutableobjectarray castToMutableObjectArray interface~cast~5->proc~casttomutableobjectarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures castToMutableObjectArray Module Procedures public subroutine castToMutableObjectArray (obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTMutableObjectArray ), POINTER :: cast","tags":"","loc":"interface/cast~5.html","title":"cast – FTObjectLibrary"},{"text":"public interface release Calls interface~~release~12~~CallsGraph interface~release~12 release proc~releaseftmutableobjectarray releaseFTMutableObjectArray interface~release~12->proc~releaseftmutableobjectarray proc~releaseftobject releaseFTObject proc~releaseftmutableobjectarray->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures releaseFTMutableObjectArray Module Procedures public subroutine releaseFTMutableObjectArray (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name type( FTMutableObjectArray ), POINTER :: self","tags":"","loc":"interface/release~12.html","title":"release – FTObjectLibrary"},{"text":"public function className(self) result(s) Class name returns a string with the name of the type of the object ### Usage: PRINT *,  obj % className()\n    if( obj % className = \"FTObject\") Arguments Type Intent Optional Attributes Name class( FTObject ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH)","tags":"","loc":"proc/classname.html","title":"className – FTObjectLibrary"},{"text":"public function isUnreferenced(self) Owners of objects should call isUnreferenced after releasing a \n pointer object. If true, the object should be deallocated and then\n set to point to NULL()\n\n ### Usage: ###\n\n      IF ( v % isUnreferenced() )     THEN\n         DEALLOCATE(v)\n         v => NULL()\n      END IF Arguments Type Intent Optional Attributes Name class( FTObject ) :: self Return Value logical","tags":"","loc":"proc/isunreferenced.html","title":"isUnreferenced – FTObjectLibrary"},{"text":"public function refCount(self) Returns the reference count for the object. Normally this is done\n    only for debugging purposes. Arguments Type Intent Optional Attributes Name class( FTObject ) :: self Return Value integer","tags":"","loc":"proc/refcount.html","title":"refCount – FTObjectLibrary"},{"text":"public function FTObjectDescription(self) Returns a character string of length DESCRIPTION_CHARACTER_LENGTH that\n    represents the object. the base class implementation returns an empty\n    string. Note that if the description is too long, the expected string\n    will be trunctated. In general, one wants to use printDescription. Arguments Type Intent Optional Attributes Name class( FTObject ) :: self Return Value character(len=DESCRIPTION_CHARACTER_LENGTH)","tags":"","loc":"proc/ftobjectdescription.html","title":"FTObjectDescription – FTObjectLibrary"},{"text":"public subroutine initFTObject(self) Generic Name: init() Initializes the object. The base class initialization does \n   nothing but set the reference count to one. Arguments Type Intent Optional Attributes Name class( FTObject ) :: self","tags":"","loc":"proc/initftobject.html","title":"initFTObject – FTObjectLibrary"},{"text":"public subroutine destructFTObject(self) Generic Name: destruct() The destructor for the class. The base class destructor does nothing. Arguments Type Intent Optional Attributes Name class( FTObject ) :: self","tags":"","loc":"proc/destructftobject.html","title":"destructFTObject – FTObjectLibrary"},{"text":"public subroutine retainFTObject(self) Retain increases the reference count by one and implies ownership\n  to the caller.\n  ### Usage:\n        CALL obj\\ % retain() Arguments Type Intent Optional Attributes Name class( FTObject ) :: self","tags":"","loc":"proc/retainftobject.html","title":"retainFTObject – FTObjectLibrary"},{"text":"public subroutine releaseFTObject(self) releaseFTObject decreases the reference count by one and implies \n relinquishing ownership by the caller. Call this if control\n over the existence of an object pointer is no longer desired by the caller.\n When the reference count goes to zero, the destructor of the object\n is called automatically and the object is deallocated. Arguments Type Intent Optional Attributes Name class( FTObject ), POINTER :: self Calls proc~~releaseftobject~~CallsGraph proc~releaseftobject releaseFTObject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~releaseftobject~~CalledByGraph proc~releaseftobject releaseFTObject proc~releaseftdata releaseFTData proc~releaseftdata->proc~releaseftobject proc~addobjecttomultiindextableforkeys addObjectToMultiIndexTableForKeys proc~addobjecttomultiindextableforkeys->proc~releaseftobject proc~replaceobjectatindexwithobject replaceObjectAtIndexWithObject proc~replaceobjectatindexwithobject->proc~releaseftobject proc~releaseftkeyobjectpair releaseFTKeyObjectPair proc~releaseftkeyobjectpair->proc~releaseftobject proc~destructftkeyobjectpair destructFTKeyObjectPair proc~destructftkeyobjectpair->proc~releaseftobject proc~releaseftmutableobjectarray releaseFTMutableObjectArray proc~releaseftmutableobjectarray->proc~releaseftobject proc~removeobjectatindex removeObjectAtIndex proc~removeobjectatindex->proc~releaseftobject proc~releaseftlinkedlistrecord releaseFTLinkedListRecord proc~releaseftlinkedlistrecord->proc~releaseftobject proc~destructmultiindexmatrixdata destructMultiIndexMatrixData proc~destructmultiindexmatrixdata->proc~releaseftobject proc~releaseftvalue releaseFTValue proc~releaseftvalue->proc~releaseftobject proc~releasesmmemberlist releaseSMMemberList proc~releasesmmemberlist->proc~releaseftobject proc~releaseftmultiindextable releaseFTMultiIndexTable proc~releaseftmultiindextable->proc~releaseftobject proc~destructmatrixdata destructMatrixData proc~destructmatrixdata->proc~releaseftobject proc~addobjecttosparsematrixforkeys addObjectToSparseMatrixForKeys proc~addobjecttosparsematrixforkeys->proc~releaseftobject proc~destructobjectarray destructObjectArray proc~destructobjectarray->proc~releaseftobject proc~releaseftsparsematrix releaseFTSparseMatrix proc~releaseftsparsematrix->proc~releaseftobject proc~destructftlinkedlistrecord destructFTLinkedListRecord proc~destructftlinkedlistrecord->proc~releaseftobject interface~release~7 release interface~release~7->proc~releaseftdata proc~mutablearrayclasstests MutableArrayClassTests proc~mutablearrayclasstests->proc~replaceobjectatindexwithobject proc~mutablearrayclasstests->proc~removeobjectatindex interface~release release proc~mutablearrayclasstests->interface~release interface~release~8 release interface~release~8->proc~releaseftkeyobjectpair interface~release~12 release interface~release~12->proc~releaseftmutableobjectarray proc~removeobject1 removeObject1 proc~removeobject1->proc~releaseftlinkedlistrecord proc~removealllinkedlistobjects removeAllLinkedListObjects proc~removealllinkedlistobjects->proc~releaseftlinkedlistrecord proc~removelinkedlistrecord removeLinkedListRecord proc~removelinkedlistrecord->proc~releaseftlinkedlistrecord interface~release~10 release interface~release~10->proc~releaseftlinkedlistrecord interface~release->proc~releaseftvalue proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->interface~release proc~addlogicalvalueforkey addLogicalValueForKey proc~addlogicalvalueforkey->interface~release proc~addquadvalueforkey addQuadValueForKey proc~addquadvalueforkey->interface~release proc~stackclasstests StackClassTests proc~stackclasstests->interface~release proc~teststackpush testStackPush proc~stackclasstests->proc~teststackpush proc~testdeletingobjects TestDeletingObjects proc~testdeletingobjects->interface~release proc~addintegervalueforkey addIntegerValueForKey proc~addintegervalueforkey->interface~release proc~ftvalueclasstests FTValueClassTests proc~ftvalueclasstests->interface~release proc~hashtabletests HashTableTests proc~hashtabletests->interface~release proc~demonstratelinkedlist demonstrateLinkedList proc~demonstratelinkedlist->interface~release proc~teststackpush->interface~release proc~addstringvalueforkey addStringValueForKey proc~addstringvalueforkey->interface~release proc~adddoubleprecisionvalueforkey addDoublePrecisionValueForKey proc~adddoubleprecisionvalueforkey->interface~release proc~addrealvalueforkey addRealValueForKey proc~addrealvalueforkey->interface~release proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~testdeletingobjects proc~destructsparsematrix destructSparseMatrix proc~destructsparsematrix->proc~releasesmmemberlist interface~release~5 release interface~release~5->proc~releaseftmultiindextable proc~multiindextabletests MultiIndexTableTests proc~multiindextabletests->interface~release~5 interface~release~6 release interface~release~6->proc~releaseftsparsematrix proc~sparsematrixtests SparseMatrixTests proc~sparsematrixtests->interface~release~6 var panprocreleaseftobjectCalledByGraph = svgPanZoom('#procreleaseftobjectCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/releaseftobject.html","title":"releaseFTObject – FTObjectLibrary"},{"text":"public subroutine printFTObjectDescription(self, iUnit) Generic Name: printDescription() Prints a string to unit iUnit that represents the contents of the object. FTObject's\n    description simply prints its name. Override this in subclasses to print something\n    useful. Arguments Type Intent Optional Attributes Name class( FTObject ) :: self integer :: iUnit","tags":"","loc":"proc/printftobjectdescription.html","title":"printFTObjectDescription – FTObjectLibrary"},{"text":"public function matrixDataCast(obj) result(cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( MatrixData ),\n  POINTER","tags":"","loc":"proc/matrixdatacast.html","title":"matrixDataCast – FTObjectLibrary"},{"text":"public subroutine initWithObjectAndKey(self, object, key) Arguments Type Intent Optional Attributes Name class( MatrixData ) :: self class(FTObject), POINTER :: object integer :: key Calls proc~~initwithobjectandkey~2~~CallsGraph proc~initwithobjectandkey~2 initWithObjectAndKey init init proc~initwithobjectandkey~2->init retain retain proc~initwithobjectandkey~2->retain Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~initwithobjectandkey~2~~CalledByGraph proc~initwithobjectandkey~2 initWithObjectAndKey proc~addobjecttosparsematrixforkeys addObjectToSparseMatrixForKeys proc~addobjecttosparsematrixforkeys->proc~initwithobjectandkey~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initwithobjectandkey~2.html","title":"initWithObjectAndKey – FTObjectLibrary"},{"text":"public subroutine destructMatrixData(self) Arguments Type Intent Optional Attributes Name class( MatrixData ) :: self Calls proc~~destructmatrixdata~~CallsGraph proc~destructmatrixdata destructMatrixData proc~releaseftobject releaseFTObject proc~destructmatrixdata->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/destructmatrixdata.html","title":"destructMatrixData – FTObjectLibrary"},{"text":"public subroutine castObjectToMatrixData(obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( MatrixData ), POINTER :: cast Called By proc~~castobjecttomatrixdata~~CalledByGraph proc~castobjecttomatrixdata castObjectToMatrixData interface~cast~6 cast interface~cast~6->proc~castobjecttomatrixdata proc~objectinsparsematrixforkeys objectInSparseMatrixForKeys proc~objectinsparsematrixforkeys->interface~cast~6 proc~sparsematrixcontainskeys SparseMatrixContainsKeys proc~sparsematrixcontainskeys->interface~cast~6 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/castobjecttomatrixdata.html","title":"castObjectToMatrixData – FTObjectLibrary"},{"text":"public interface cast Calls interface~~cast~6~~CallsGraph interface~cast~6 cast proc~castobjecttomatrixdata castObjectToMatrixData interface~cast~6->proc~castobjecttomatrixdata Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By interface~~cast~6~~CalledByGraph interface~cast~6 cast proc~objectinsparsematrixforkeys objectInSparseMatrixForKeys proc~objectinsparsematrixforkeys->interface~cast~6 proc~sparsematrixcontainskeys SparseMatrixContainsKeys proc~sparsematrixcontainskeys->interface~cast~6 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures castObjectToMatrixData Module Procedures public subroutine castObjectToMatrixData (obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( MatrixData ), POINTER :: cast","tags":"","loc":"interface/cast~6.html","title":"cast – FTObjectLibrary"},{"text":"public function objectInSparseMatrixForKeys(self, i, j) result(r) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ) :: self integer :: i integer :: j Return Value class(FTObject),\n  POINTER Calls proc~~objectinsparsematrixforkeys~~CallsGraph proc~objectinsparsematrixforkeys objectInSparseMatrixForKeys object object proc~objectinsparsematrixforkeys->object proc~setlinkedlist setLinkedList proc~objectinsparsematrixforkeys->proc~setlinkedlist isatend isatend proc~objectinsparsematrixforkeys->isatend interface~cast~6 cast proc~objectinsparsematrixforkeys->interface~cast~6 proc~movetonext moveToNext proc~objectinsparsematrixforkeys->proc~movetonext table table proc~objectinsparsematrixforkeys->table proc~releasememberlist releaseMemberList proc~setlinkedlist->proc~releasememberlist proc~settostart setToStart proc~setlinkedlist->proc~settostart retain retain proc~setlinkedlist->retain proc~castobjecttomatrixdata castObjectToMatrixData interface~cast~6->proc~castobjecttomatrixdata releaseftobject releaseftobject proc~releasememberlist->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/objectinsparsematrixforkeys.html","title":"objectInSparseMatrixForKeys – FTObjectLibrary"},{"text":"public function SparseMatrixContainsKeys(self, i, j) result(r) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ) :: self integer :: i integer :: j Return Value logical Calls proc~~sparsematrixcontainskeys~~CallsGraph proc~sparsematrixcontainskeys SparseMatrixContainsKeys table table proc~sparsematrixcontainskeys->table object object proc~sparsematrixcontainskeys->object proc~setlinkedlist setLinkedList proc~sparsematrixcontainskeys->proc~setlinkedlist interface~cast~6 cast proc~sparsematrixcontainskeys->interface~cast~6 proc~movetonext moveToNext proc~sparsematrixcontainskeys->proc~movetonext proc~settostart setToStart proc~sparsematrixcontainskeys->proc~settostart isatend isatend proc~sparsematrixcontainskeys->isatend proc~setlinkedlist->proc~settostart proc~releasememberlist releaseMemberList proc~setlinkedlist->proc~releasememberlist retain retain proc~setlinkedlist->retain proc~castobjecttomatrixdata castObjectToMatrixData interface~cast~6->proc~castobjecttomatrixdata releaseftobject releaseftobject proc~releasememberlist->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/sparsematrixcontainskeys.html","title":"SparseMatrixContainsKeys – FTObjectLibrary"},{"text":"public function SparseMatrixSize(self) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ) :: self Return Value integer Called By proc~~sparsematrixsize~~CalledByGraph proc~sparsematrixsize SparseMatrixSize proc~sparsematrixtests SparseMatrixTests proc~sparsematrixtests->proc~sparsematrixsize Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/sparsematrixsize.html","title":"SparseMatrixSize – FTObjectLibrary"},{"text":"public function SparseMatrixFromObject(obj) result(cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( FTSparseMatrix ),\n  POINTER","tags":"","loc":"proc/sparsematrixfromobject.html","title":"SparseMatrixFromObject – FTObjectLibrary"},{"text":"public function Hash1(idPair) Arguments Type Intent Optional Attributes Name integer, DIMENSION(2) :: idPair Return Value integer Called By proc~~hash1~~CalledByGraph proc~hash1 Hash1 proc~sparsematrixtests SparseMatrixTests proc~sparsematrixtests->proc~hash1 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/hash1.html","title":"Hash1 – FTObjectLibrary"},{"text":"public function Hash2(idPair) Arguments Type Intent Optional Attributes Name integer, DIMENSION(2) :: idPair Return Value integer Called By proc~~hash2~~CalledByGraph proc~hash2 Hash2 proc~sparsematrixtests SparseMatrixTests proc~sparsematrixtests->proc~hash2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/hash2.html","title":"Hash2 – FTObjectLibrary"},{"text":"public subroutine initSparseMatrixWithSize(self, N) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ) :: self integer :: N Calls proc~~initsparsematrixwithsize~~CallsGraph proc~initsparsematrixwithsize initSparseMatrixWithSize init init proc~initsparsematrixwithsize->init table table proc~initsparsematrixwithsize->table Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initsparsematrixwithsize.html","title":"initSparseMatrixWithSize – FTObjectLibrary"},{"text":"public subroutine addObjectToSparseMatrixForKeys(self, obj, i, j) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ) :: self class(FTObject), POINTER :: obj integer :: i integer :: j Calls proc~~addobjecttosparsematrixforkeys~~CallsGraph proc~addobjecttosparsematrixforkeys addObjectToSparseMatrixForKeys table table proc~addobjecttosparsematrixforkeys->table proc~add add proc~addobjecttosparsematrixforkeys->proc~add proc~releaseftobject releaseFTObject proc~addobjecttosparsematrixforkeys->proc~releaseftobject containskeys containskeys proc~addobjecttosparsematrixforkeys->containskeys proc~initwithobjectandkey~2 initWithObjectAndKey proc~addobjecttosparsematrixforkeys->proc~initwithobjectandkey~2 proc~initwithobject initWithObject proc~add->proc~initwithobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct init init proc~initwithobjectandkey~2->init retain retain proc~initwithobjectandkey~2->retain proc~initwithobject->init proc~initwithobject->retain Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/addobjecttosparsematrixforkeys.html","title":"addObjectToSparseMatrixForKeys – FTObjectLibrary"},{"text":"public subroutine destructSparseMatrix(self) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ) :: self Calls proc~~destructsparsematrix~~CallsGraph proc~destructsparsematrix destructSparseMatrix destruct destruct proc~destructsparsematrix->destruct table table proc~destructsparsematrix->table proc~releasesmmemberlist releaseSMMemberList proc~destructsparsematrix->proc~releasesmmemberlist proc~releaseftobject releaseFTObject proc~releasesmmemberlist->proc~releaseftobject proc~releaseftobject->destruct printdescription printdescription proc~releaseftobject->printdescription Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/destructsparsematrix.html","title":"destructSparseMatrix – FTObjectLibrary"},{"text":"public subroutine releaseFTSparseMatrix(self) Public, generic name: release(self) Call release(self) on an object to release control\n of an object. If its reference count is zero, then \n it is deallocated. Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ), POINTER :: self Calls proc~~releaseftsparsematrix~~CallsGraph proc~releaseftsparsematrix releaseFTSparseMatrix proc~releaseftobject releaseFTObject proc~releaseftsparsematrix->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~releaseftsparsematrix~~CalledByGraph proc~releaseftsparsematrix releaseFTSparseMatrix interface~release~6 release interface~release~6->proc~releaseftsparsematrix proc~sparsematrixtests SparseMatrixTests proc~sparsematrixtests->interface~release~6 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/releaseftsparsematrix.html","title":"releaseFTSparseMatrix – FTObjectLibrary"},{"text":"public subroutine releaseSMMemberList(list) Arguments Type Intent Optional Attributes Name class(FTLinkedList), POINTER :: list Calls proc~~releasesmmemberlist~~CallsGraph proc~releasesmmemberlist releaseSMMemberList proc~releaseftobject releaseFTObject proc~releasesmmemberlist->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~releasesmmemberlist~~CalledByGraph proc~releasesmmemberlist releaseSMMemberList proc~destructsparsematrix destructSparseMatrix proc~destructsparsematrix->proc~releasesmmemberlist Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/releasesmmemberlist.html","title":"releaseSMMemberList – FTObjectLibrary"},{"text":"public interface release Calls interface~~release~6~~CallsGraph interface~release~6 release proc~releaseftsparsematrix releaseFTSparseMatrix interface~release~6->proc~releaseftsparsematrix proc~releaseftobject releaseFTObject proc~releaseftsparsematrix->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By interface~~release~6~~CalledByGraph interface~release~6 release proc~sparsematrixtests SparseMatrixTests proc~sparsematrixtests->interface~release~6 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures releaseFTSparseMatrix Module Procedures public subroutine releaseFTSparseMatrix (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ), POINTER :: self","tags":"","loc":"interface/release~6.html","title":"release – FTObjectLibrary"},{"text":"public function peek(self) Arguments Type Intent Optional Attributes Name class( FTStack ) :: self Return Value class(FTObject),\n  POINTER Called By proc~~peek~~CalledByGraph proc~peek peek proc~teststackpush testStackPush proc~teststackpush->proc~peek proc~stackclasstests StackClassTests proc~stackclasstests->proc~teststackpush Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/peek.html","title":"peek – FTObjectLibrary"},{"text":"public function stackFromObject(obj) result(cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( FTStack ),\n  POINTER","tags":"","loc":"proc/stackfromobject.html","title":"stackFromObject – FTObjectLibrary"},{"text":"public function stackClassName(self) result(s) Class name returns a string with the name of the type of the object ### Usage: PRINT *,  obj % className()\n    if( obj % className = \"FTStack\") Arguments Type Intent Optional Attributes Name class( FTStack ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH)","tags":"","loc":"proc/stackclassname.html","title":"stackClassName – FTObjectLibrary"},{"text":"public subroutine initFTStack(self) Public, generic name: init() Initialize the stack. Arguments Type Intent Optional Attributes Name class( FTStack ) :: self Calls proc~~initftstack~~CallsGraph proc~initftstack initFTStack init init proc~initftstack->init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initftstack.html","title":"initFTStack – FTObjectLibrary"},{"text":"public subroutine releaseFTStack(self) Public, generic name: release(self) Call release(self) on an object to release control\n of a pointer object. If its reference count is zero, \n then it is deallocated. Arguments Type Intent Optional Attributes Name type( FTStack ), POINTER :: self Calls proc~~releaseftstack~~CallsGraph proc~releaseftstack releaseFTStack releaseftobject releaseftobject proc~releaseftstack->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~releaseftstack~~CalledByGraph proc~releaseftstack releaseFTStack interface~release~13 release interface~release~13->proc~releaseftstack Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/releaseftstack.html","title":"releaseFTStack – FTObjectLibrary"},{"text":"public subroutine push(self, obj) Arguments Type Intent Optional Attributes Name class( FTStack ) :: self class(FTObject), POINTER :: obj Calls proc~~push~~CallsGraph proc~push push initwithobject initwithobject proc~push->initwithobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~push~~CalledByGraph proc~push push proc~teststackpush testStackPush proc~teststackpush->proc~push proc~stackclasstests StackClassTests proc~stackclasstests->proc~teststackpush Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/push.html","title":"push – FTObjectLibrary"},{"text":"public subroutine pop(self, p) Arguments Type Intent Optional Attributes Name class( FTStack ) :: self class(FTObject), POINTER :: p Calls proc~~pop~~CallsGraph proc~pop pop interface~release~11 release proc~pop->interface~release~11 retain retain proc~pop->retain proc~releaseftlinkedlist releaseFTLinkedList interface~release~11->proc~releaseftlinkedlist releaseftobject releaseftobject proc~releaseftlinkedlist->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/pop.html","title":"pop – FTObjectLibrary"},{"text":"public subroutine printStackDescription(self, iUnit) Arguments Type Intent Optional Attributes Name class( FTStack ) :: self integer :: iUnit Calls proc~~printstackdescription~~CallsGraph proc~printstackdescription printStackDescription printdescription printdescription proc~printstackdescription->printdescription Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/printstackdescription.html","title":"printStackDescription – FTObjectLibrary"},{"text":"public interface release Calls interface~~release~13~~CallsGraph interface~release~13 release proc~releaseftstack releaseFTStack interface~release~13->proc~releaseftstack releaseftobject releaseftobject proc~releaseftstack->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures releaseFTStack Module Procedures public subroutine releaseFTStack (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name type( FTStack ), POINTER :: self","tags":"","loc":"interface/release~13.html","title":"release – FTObjectLibrary"},{"text":"public function realValue(self) Get the real value stored in the object, or convert the value\n in the object to a real if it is of a different type. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value real Called By proc~~realvalue~~CalledByGraph proc~realvalue realValue proc~basictests basicTests proc~basictests->proc~realvalue proc~realvalueforkey realValueForKey proc~realvalueforkey->proc~realvalue proc~ftvalueclasstests FTValueClassTests proc~ftvalueclasstests->proc~realvalue proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~basictests proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests proc~ftvaluedictionaryclasstests->proc~realvalueforkey proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~realvalueforkey Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/realvalue.html","title":"realValue – FTObjectLibrary"},{"text":"public function doublePrecisionValue(self) Get the double precision value stored in the object, or convert the value\n in the object to a double precision if it is of a different type. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value doubleprecision Called By proc~~doubleprecisionvalue~~CalledByGraph proc~doubleprecisionvalue doublePrecisionValue proc~teststackpush testStackPush proc~teststackpush->proc~doubleprecisionvalue proc~doubleprecisionvalueforkey doublePrecisionValueForKey proc~doubleprecisionvalueforkey->proc~doubleprecisionvalue proc~ftvalueclasstests FTValueClassTests proc~ftvalueclasstests->proc~doubleprecisionvalue proc~stackclasstests StackClassTests proc~stackclasstests->proc~teststackpush Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/doubleprecisionvalue.html","title":"doublePrecisionValue – FTObjectLibrary"},{"text":"public function quadValue(self) Get the double precision value stored in the object, or convert the value\n in the object to a double precision if it is of a different type. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value doubleprecision Called By proc~~quadvalue~~CalledByGraph proc~quadvalue quadValue proc~quadvalueforkey quadValueForKey proc~quadvalueforkey->proc~quadvalue Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/quadvalue.html","title":"quadValue – FTObjectLibrary"},{"text":"public function integerValue(self) Get the integer value stored in the object, or convert the value\n in the object to an integer if it is of a different type. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value integer Called By proc~~integervalue~~CalledByGraph proc~integervalue integerValue proc~sparsematrixtests SparseMatrixTests proc~sparsematrixtests->proc~integervalue proc~mutablearrayclasstests MutableArrayClassTests proc~mutablearrayclasstests->proc~integervalue proc~ftvalueclasstests FTValueClassTests proc~ftvalueclasstests->proc~integervalue proc~basictests basicTests proc~basictests->proc~integervalue proc~testdeletingobjects TestDeletingObjects proc~testdeletingobjects->proc~integervalue proc~testappendinglists testAppendingLists proc~testappendinglists->proc~integervalue proc~hashtabletests HashTableTests proc~hashtabletests->proc~integervalue proc~demonstratelinkedlist demonstrateLinkedList proc~demonstratelinkedlist->proc~integervalue proc~integervalueforkey integerValueForKey proc~integervalueforkey->proc~integervalue proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~basictests proc~ftlinkedlistclasstests->proc~testdeletingobjects proc~ftlinkedlistclasstests->proc~testappendinglists proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests proc~ftvaluedictionaryclasstests->proc~integervalueforkey Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/integervalue.html","title":"integerValue – FTObjectLibrary"},{"text":"public function logicalValue(self) Get the logical value stored in the object, or convert the value\n in the object to a logical if it is of a different type. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value logical Called By proc~~logicalvalue~~CalledByGraph proc~logicalvalue logicalValue proc~ftvalueclasstests FTValueClassTests proc~ftvalueclasstests->proc~logicalvalue proc~logicalvalueforkey logicalValueForKey proc~logicalvalueforkey->proc~logicalvalue Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/logicalvalue.html","title":"logicalValue – FTObjectLibrary"},{"text":"public function stringValue(self, requestedLength) result(s) Get the string value of length requestedLength stored in the object, or \n convert the value\n in the object to a string of that length if it is of a different type. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self integer :: requestedLength Return Value character(len=requestedLength) Called By proc~~stringvalue~~CalledByGraph proc~stringvalue stringValue proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->proc~stringvalue proc~basictests basicTests proc~basictests->proc~stringvalue proc~multiindextabletests MultiIndexTableTests proc~multiindextabletests->proc~stringvalue proc~ftvalueclasstests FTValueClassTests proc~ftvalueclasstests->proc~stringvalue proc~stringvalueforkey stringValueForKey proc~stringvalueforkey->proc~stringvalue proc~ftvaluedescription FTValueDescription proc~ftvaluedescription->proc~stringvalue proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~basictests proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests proc~ftvaluedictionaryclasstests->proc~stringvalueforkey proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~stringvalueforkey Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/stringvalue.html","title":"stringValue – FTObjectLibrary"},{"text":"public function FTValueDescription(self) Returns the description of the value. In this case, it returns the \n stringValue() of the object. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value character(len=DESCRIPTION_CHARACTER_LENGTH) Calls proc~~ftvaluedescription~~CallsGraph proc~ftvaluedescription FTValueDescription proc~stringvalue stringValue proc~ftvaluedescription->proc~stringvalue Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/ftvaluedescription.html","title":"FTValueDescription – FTObjectLibrary"},{"text":"public function valueFromObject(obj) result(cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( FTValue ),\n  POINTER Called By proc~~valuefromobject~~CalledByGraph proc~valuefromobject valueFromObject proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->proc~valuefromobject proc~mutablearrayclasstests MutableArrayClassTests proc~mutablearrayclasstests->proc~valuefromobject proc~realvalueforkey realValueForKey proc~realvalueforkey->proc~valuefromobject proc~sparsematrixtests SparseMatrixTests proc~sparsematrixtests->proc~valuefromobject proc~quadvalueforkey quadValueForKey proc~quadvalueforkey->proc~valuefromobject proc~testdeletingobjects TestDeletingObjects proc~testdeletingobjects->proc~valuefromobject proc~multiindextabletests MultiIndexTableTests proc~multiindextabletests->proc~valuefromobject proc~testappendinglists testAppendingLists proc~testappendinglists->proc~valuefromobject proc~hashtabletests HashTableTests proc~hashtabletests->proc~valuefromobject proc~demonstratelinkedlist demonstrateLinkedList proc~demonstratelinkedlist->proc~valuefromobject proc~teststackpush testStackPush proc~teststackpush->proc~valuefromobject proc~doubleprecisionvalueforkey doublePrecisionValueForKey proc~doubleprecisionvalueforkey->proc~valuefromobject proc~integervalueforkey integerValueForKey proc~integervalueforkey->proc~valuefromobject proc~logicalvalueforkey logicalValueForKey proc~logicalvalueforkey->proc~valuefromobject proc~stringvalueforkey stringValueForKey proc~stringvalueforkey->proc~valuefromobject proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests proc~ftvaluedictionaryclasstests->proc~realvalueforkey proc~ftvaluedictionaryclasstests->proc~integervalueforkey proc~ftvaluedictionaryclasstests->proc~stringvalueforkey proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~realvalueforkey proc~ftexceptionclasstests->proc~stringvalueforkey proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~testdeletingobjects proc~ftlinkedlistclasstests->proc~testappendinglists proc~stackclasstests StackClassTests proc~stackclasstests->proc~teststackpush Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/valuefromobject.html","title":"valueFromObject – FTObjectLibrary"},{"text":"public function valueClassName(self) result(s) Class name returns a string with the name of the type of the object ### Usage: PRINT *,  obj % className()\n    if( obj % className = \"FTValue\") Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH)","tags":"","loc":"proc/valueclassname.html","title":"valueClassName – FTObjectLibrary"},{"text":"public subroutine initWithReal(self, v) Public, generic name: initwithValue() Initialize the value object with a real number Arguments Type Intent Optional Attributes Name class( FTValue ) :: self real :: v Calls proc~~initwithreal~~CallsGraph proc~initwithreal initWithReal init init proc~initwithreal->init valuestorage valuestorage proc~initwithreal->valuestorage Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initwithreal.html","title":"initWithReal – FTObjectLibrary"},{"text":"public subroutine initWithDoublePrecision(self, v) Public, generic name: initwithValue() Initialize the value object with a double \n precision number Arguments Type Intent Optional Attributes Name class( FTValue ) :: self doubleprecision :: v Calls proc~~initwithdoubleprecision~~CallsGraph proc~initwithdoubleprecision initWithDoublePrecision valuestorage valuestorage proc~initwithdoubleprecision->valuestorage Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initwithdoubleprecision.html","title":"initWithDoublePrecision – FTObjectLibrary"},{"text":"public subroutine initWithQuad(self, v) Public, generic name: initwithValue() Initialize the value object with a quad precision\n number Arguments Type Intent Optional Attributes Name class( FTValue ) :: self real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)) :: v Calls proc~~initwithquad~~CallsGraph proc~initwithquad initWithQuad init init proc~initwithquad->init valuestorage valuestorage proc~initwithquad->valuestorage Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initwithquad.html","title":"initWithQuad – FTObjectLibrary"},{"text":"public subroutine initWithInteger(self, v) Public, generic name: initwithValue() Initialize the value object with an \n integer number Arguments Type Intent Optional Attributes Name class( FTValue ) :: self integer :: v Calls proc~~initwithinteger~~CallsGraph proc~initwithinteger initWithInteger valuestorage valuestorage proc~initwithinteger->valuestorage Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initwithinteger.html","title":"initWithInteger – FTObjectLibrary"},{"text":"public subroutine initWithLogical(self, v) Public, generic name: initwithValue() Initialize the value object with a logical Arguments Type Intent Optional Attributes Name class( FTValue ) :: self logical :: v Calls proc~~initwithlogical~~CallsGraph proc~initwithlogical initWithLogical valuestorage valuestorage proc~initwithlogical->valuestorage Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initwithlogical.html","title":"initWithLogical – FTObjectLibrary"},{"text":"public subroutine initWithString(self, v) Public, generic name: initwithValue() Initialize the value object with a string Arguments Type Intent Optional Attributes Name class( FTValue ) :: self character(len=*) :: v Calls proc~~initwithstring~~CallsGraph proc~initwithstring initWithString valuestorage valuestorage proc~initwithstring->valuestorage Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initwithstring.html","title":"initWithString – FTObjectLibrary"},{"text":"public subroutine destructValue(self) Public, generic name: destruct() Destructor for the class. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Calls proc~~destructvalue~~CallsGraph proc~destructvalue destructValue destruct destruct proc~destructvalue->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/destructvalue.html","title":"destructValue – FTObjectLibrary"},{"text":"public subroutine releaseFTValue(self) Public, generic name: release(self) Call release(self) on an object to release control\n of an object. If its reference count is zero, then \n it is deallocated. Arguments Type Intent Optional Attributes Name class( FTValue ), POINTER :: self Calls proc~~releaseftvalue~~CallsGraph proc~releaseftvalue releaseFTValue proc~releaseftobject releaseFTObject proc~releaseftvalue->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~releaseftvalue~~CalledByGraph proc~releaseftvalue releaseFTValue interface~release release interface~release->proc~releaseftvalue proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->interface~release proc~addlogicalvalueforkey addLogicalValueForKey proc~addlogicalvalueforkey->interface~release proc~mutablearrayclasstests MutableArrayClassTests proc~mutablearrayclasstests->interface~release proc~addquadvalueforkey addQuadValueForKey proc~addquadvalueforkey->interface~release proc~stackclasstests StackClassTests proc~stackclasstests->interface~release proc~teststackpush testStackPush proc~stackclasstests->proc~teststackpush proc~testdeletingobjects TestDeletingObjects proc~testdeletingobjects->interface~release proc~addintegervalueforkey addIntegerValueForKey proc~addintegervalueforkey->interface~release proc~ftvalueclasstests FTValueClassTests proc~ftvalueclasstests->interface~release proc~hashtabletests HashTableTests proc~hashtabletests->interface~release proc~demonstratelinkedlist demonstrateLinkedList proc~demonstratelinkedlist->interface~release proc~teststackpush->interface~release proc~addstringvalueforkey addStringValueForKey proc~addstringvalueforkey->interface~release proc~adddoubleprecisionvalueforkey addDoublePrecisionValueForKey proc~adddoubleprecisionvalueforkey->interface~release proc~addrealvalueforkey addRealValueForKey proc~addrealvalueforkey->interface~release proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~testdeletingobjects Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/releaseftvalue.html","title":"releaseFTValue – FTObjectLibrary"},{"text":"public subroutine printValueDescription(self, iUnit) Prints the description of the value to unit iUnit. In this case, it prints the stringValue() of the object. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self integer :: iUnit Calls proc~~printvaluedescription~~CallsGraph proc~printvaluedescription printValueDescription description description proc~printvaluedescription->description Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/printvaluedescription.html","title":"printValueDescription – FTObjectLibrary"},{"text":"public subroutine castToValue(obj, cast) Generic Name: cast Cast a pointer to the base class to an FTValue pointer Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTValue ), POINTER :: cast Called By proc~~casttovalue~~CalledByGraph proc~casttovalue castToValue interface~cast~7 cast interface~cast~7->proc~casttovalue Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/casttovalue.html","title":"castToValue – FTObjectLibrary"},{"text":"public interface cast Calls interface~~cast~7~~CallsGraph interface~cast~7 cast proc~casttovalue castToValue interface~cast~7->proc~casttovalue Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures castToValue Module Procedures public subroutine castToValue (obj, cast) Generic Name: cast Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTValue ), POINTER :: cast","tags":"","loc":"interface/cast~7.html","title":"cast – FTObjectLibrary"},{"text":"public interface release Calls interface~~release~~CallsGraph interface~release release proc~releaseftvalue releaseFTValue interface~release->proc~releaseftvalue proc~releaseftobject releaseFTObject proc~releaseftvalue->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By interface~~release~~CalledByGraph interface~release release proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->interface~release proc~addlogicalvalueforkey addLogicalValueForKey proc~addlogicalvalueforkey->interface~release proc~mutablearrayclasstests MutableArrayClassTests proc~mutablearrayclasstests->interface~release proc~addquadvalueforkey addQuadValueForKey proc~addquadvalueforkey->interface~release proc~stackclasstests StackClassTests proc~stackclasstests->interface~release proc~teststackpush testStackPush proc~stackclasstests->proc~teststackpush proc~testdeletingobjects TestDeletingObjects proc~testdeletingobjects->interface~release proc~addintegervalueforkey addIntegerValueForKey proc~addintegervalueforkey->interface~release proc~ftvalueclasstests FTValueClassTests proc~ftvalueclasstests->interface~release proc~hashtabletests HashTableTests proc~hashtabletests->interface~release proc~demonstratelinkedlist demonstrateLinkedList proc~demonstratelinkedlist->interface~release proc~teststackpush->interface~release proc~addstringvalueforkey addStringValueForKey proc~addstringvalueforkey->interface~release proc~adddoubleprecisionvalueforkey addDoublePrecisionValueForKey proc~adddoubleprecisionvalueforkey->interface~release proc~addrealvalueforkey addRealValueForKey proc~addrealvalueforkey->interface~release proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~testdeletingobjects Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures releaseFTValue Module Procedures public subroutine releaseFTValue (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name class( FTValue ), POINTER :: self","tags":"","loc":"interface/release.html","title":"release – FTObjectLibrary"},{"text":"public function realValueForKey(self, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: key Return Value real Calls proc~~realvalueforkey~~CallsGraph proc~realvalueforkey realValueForKey proc~objectforkey objectForKey proc~realvalueforkey->proc~objectforkey proc~valuefromobject valueFromObject proc~realvalueforkey->proc~valuefromobject proc~realvalue realValue proc~realvalueforkey->proc~realvalue proc~objectforkeyinlist objectForKeyInList proc~objectforkey->proc~objectforkeyinlist entries entries proc~objectforkey->entries proc~object object proc~objectforkeyinlist->proc~object Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~realvalueforkey~~CalledByGraph proc~realvalueforkey realValueForKey proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests proc~ftvaluedictionaryclasstests->proc~realvalueforkey proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~realvalueforkey Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/realvalueforkey.html","title":"realValueForKey – FTObjectLibrary"},{"text":"public function integerValueForKey(self, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: key Return Value integer Calls proc~~integervalueforkey~~CallsGraph proc~integervalueforkey integerValueForKey proc~objectforkey objectForKey proc~integervalueforkey->proc~objectforkey proc~valuefromobject valueFromObject proc~integervalueforkey->proc~valuefromobject proc~integervalue integerValue proc~integervalueforkey->proc~integervalue proc~objectforkeyinlist objectForKeyInList proc~objectforkey->proc~objectforkeyinlist entries entries proc~objectforkey->entries proc~object object proc~objectforkeyinlist->proc~object Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~integervalueforkey~~CalledByGraph proc~integervalueforkey integerValueForKey proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests proc~ftvaluedictionaryclasstests->proc~integervalueforkey Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/integervalueforkey.html","title":"integerValueForKey – FTObjectLibrary"},{"text":"public function doublePrecisionValueForKey(self, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: key Return Value doubleprecision Calls proc~~doubleprecisionvalueforkey~~CallsGraph proc~doubleprecisionvalueforkey doublePrecisionValueForKey proc~objectforkey objectForKey proc~doubleprecisionvalueforkey->proc~objectforkey proc~valuefromobject valueFromObject proc~doubleprecisionvalueforkey->proc~valuefromobject proc~doubleprecisionvalue doublePrecisionValue proc~doubleprecisionvalueforkey->proc~doubleprecisionvalue proc~objectforkeyinlist objectForKeyInList proc~objectforkey->proc~objectforkeyinlist entries entries proc~objectforkey->entries proc~object object proc~objectforkeyinlist->proc~object Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/doubleprecisionvalueforkey.html","title":"doublePrecisionValueForKey – FTObjectLibrary"},{"text":"public function quadValueForKey(self, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: key Return Value real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)) Calls proc~~quadvalueforkey~~CallsGraph proc~quadvalueforkey quadValueForKey proc~objectforkey objectForKey proc~quadvalueforkey->proc~objectforkey proc~valuefromobject valueFromObject proc~quadvalueforkey->proc~valuefromobject proc~quadvalue quadValue proc~quadvalueforkey->proc~quadvalue proc~objectforkeyinlist objectForKeyInList proc~objectforkey->proc~objectforkeyinlist entries entries proc~objectforkey->entries proc~object object proc~objectforkeyinlist->proc~object Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/quadvalueforkey.html","title":"quadValueForKey – FTObjectLibrary"},{"text":"public function logicalValueForKey(self, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: key Return Value logical Calls proc~~logicalvalueforkey~~CallsGraph proc~logicalvalueforkey logicalValueForKey proc~objectforkey objectForKey proc~logicalvalueforkey->proc~objectforkey proc~valuefromobject valueFromObject proc~logicalvalueforkey->proc~valuefromobject proc~logicalvalue logicalValue proc~logicalvalueforkey->proc~logicalvalue proc~objectforkeyinlist objectForKeyInList proc~objectforkey->proc~objectforkeyinlist entries entries proc~objectforkey->entries proc~object object proc~objectforkeyinlist->proc~object Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/logicalvalueforkey.html","title":"logicalValueForKey – FTObjectLibrary"},{"text":"public function stringValueForKey(self, key, requestedLength) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: key integer :: requestedLength Return Value character(len=requestedLength) Calls proc~~stringvalueforkey~~CallsGraph proc~stringvalueforkey stringValueForKey proc~objectforkey objectForKey proc~stringvalueforkey->proc~objectforkey proc~valuefromobject valueFromObject proc~stringvalueforkey->proc~valuefromobject proc~stringvalue stringValue proc~stringvalueforkey->proc~stringvalue proc~objectforkeyinlist objectForKeyInList proc~objectforkey->proc~objectforkeyinlist entries entries proc~objectforkey->entries proc~object object proc~objectforkeyinlist->proc~object Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~stringvalueforkey~~CalledByGraph proc~stringvalueforkey stringValueForKey proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests proc~ftvaluedictionaryclasstests->proc~stringvalueforkey proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~stringvalueforkey Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/stringvalueforkey.html","title":"stringValueForKey – FTObjectLibrary"},{"text":"public function valueDictionaryFromDictionary(dict) result(valueDict) Arguments Type Intent Optional Attributes Name class(FTDictionary), POINTER :: dict Return Value class( FTValueDictionary ),\n  POINTER Called By proc~~valuedictionaryfromdictionary~~CalledByGraph proc~valuedictionaryfromdictionary valueDictionaryFromDictionary proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~valuedictionaryfromdictionary Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/valuedictionaryfromdictionary.html","title":"valueDictionaryFromDictionary – FTObjectLibrary"},{"text":"public function valueDictionaryFromObject(obj) result(valueDict) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( FTValueDictionary ),\n  POINTER","tags":"","loc":"proc/valuedictionaryfromobject.html","title":"valueDictionaryFromObject – FTObjectLibrary"},{"text":"public function valueDictionaryClassName(self) result(s) Class name returns a string with the name of the type of the object ### Usage: PRINT *,  obj % className()\n    if( obj % className = \"FTValueDictionary\") Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH)","tags":"","loc":"proc/valuedictionaryclassname.html","title":"valueDictionaryClassName – FTObjectLibrary"},{"text":"public subroutine releaseFTValueDictionary(self) Public, generic name: release(self) Call release(self) on an object to release control\n of an object. If its reference count is zero, then \n it is deallocated. Arguments Type Intent Optional Attributes Name type( FTValueDictionary ), POINTER :: self Calls proc~~releaseftvaluedictionary~~CallsGraph proc~releaseftvaluedictionary releaseFTValueDictionary releaseftobject releaseftobject proc~releaseftvaluedictionary->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~releaseftvaluedictionary~~CalledByGraph proc~releaseftvaluedictionary releaseFTValueDictionary interface~release~2 release interface~release~2->proc~releaseftvaluedictionary proc~testexception testException proc~testexception->interface~release~2 proc~subroutinethatthrowserror subroutineThatThrowsError proc~subroutinethatthrowserror->proc~testexception proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~subroutinethatthrowserror var panprocreleaseftvaluedictionaryCalledByGraph = svgPanZoom('#procreleaseftvaluedictionaryCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/releaseftvaluedictionary.html","title":"releaseFTValueDictionary – FTObjectLibrary"},{"text":"public subroutine addIntegerValueForKey(self, i, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self integer :: i character(len=*) :: key Calls proc~~addintegervalueforkey~~CallsGraph proc~addintegervalueforkey addIntegerValueForKey initwithvalue initwithvalue proc~addintegervalueforkey->initwithvalue interface~release release proc~addintegervalueforkey->interface~release proc~addobjectforkey addObjectForKey proc~addintegervalueforkey->proc~addobjectforkey proc~releaseftvalue releaseFTValue interface~release->proc~releaseftvalue proc~add add proc~addobjectforkey->proc~add proc~initwithobjectandkey initWithObjectAndKey proc~addobjectforkey->proc~initwithobjectandkey entries entries proc~addobjectforkey->entries proc~releaseftobject releaseFTObject proc~releaseftvalue->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct proc~initwithobject initWithObject proc~add->proc~initwithobject init init proc~initwithobject->init retain retain proc~initwithobject->retain var panprocaddintegervalueforkeyCallsGraph = svgPanZoom('#procaddintegervalueforkeyCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/addintegervalueforkey.html","title":"addIntegerValueForKey – FTObjectLibrary"},{"text":"public subroutine addRealValueForKey(self, r, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self real :: r character(len=*) :: key Calls proc~~addrealvalueforkey~~CallsGraph proc~addrealvalueforkey addRealValueForKey initwithvalue initwithvalue proc~addrealvalueforkey->initwithvalue interface~release release proc~addrealvalueforkey->interface~release proc~addobjectforkey addObjectForKey proc~addrealvalueforkey->proc~addobjectforkey proc~releaseftvalue releaseFTValue interface~release->proc~releaseftvalue proc~add add proc~addobjectforkey->proc~add proc~initwithobjectandkey initWithObjectAndKey proc~addobjectforkey->proc~initwithobjectandkey entries entries proc~addobjectforkey->entries proc~releaseftobject releaseFTObject proc~releaseftvalue->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct proc~initwithobject initWithObject proc~add->proc~initwithobject init init proc~initwithobject->init retain retain proc~initwithobject->retain var panprocaddrealvalueforkeyCallsGraph = svgPanZoom('#procaddrealvalueforkeyCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/addrealvalueforkey.html","title":"addRealValueForKey – FTObjectLibrary"},{"text":"public subroutine addDoublePrecisionValueForKey(self, r, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self double precision :: r character(len=*) :: key Calls proc~~adddoubleprecisionvalueforkey~~CallsGraph proc~adddoubleprecisionvalueforkey addDoublePrecisionValueForKey initwithvalue initwithvalue proc~adddoubleprecisionvalueforkey->initwithvalue interface~release release proc~adddoubleprecisionvalueforkey->interface~release proc~addobjectforkey addObjectForKey proc~adddoubleprecisionvalueforkey->proc~addobjectforkey proc~releaseftvalue releaseFTValue interface~release->proc~releaseftvalue proc~add add proc~addobjectforkey->proc~add proc~initwithobjectandkey initWithObjectAndKey proc~addobjectforkey->proc~initwithobjectandkey entries entries proc~addobjectforkey->entries proc~releaseftobject releaseFTObject proc~releaseftvalue->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct proc~initwithobject initWithObject proc~add->proc~initwithobject init init proc~initwithobject->init retain retain proc~initwithobject->retain var panprocadddoubleprecisionvalueforkeyCallsGraph = svgPanZoom('#procadddoubleprecisionvalueforkeyCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/adddoubleprecisionvalueforkey.html","title":"addDoublePrecisionValueForKey – FTObjectLibrary"},{"text":"public subroutine addQuadValueForKey(self, r, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)) :: r character(len=*) :: key Calls proc~~addquadvalueforkey~~CallsGraph proc~addquadvalueforkey addQuadValueForKey initwithvalue initwithvalue proc~addquadvalueforkey->initwithvalue interface~release release proc~addquadvalueforkey->interface~release proc~addobjectforkey addObjectForKey proc~addquadvalueforkey->proc~addobjectforkey proc~releaseftvalue releaseFTValue interface~release->proc~releaseftvalue proc~add add proc~addobjectforkey->proc~add proc~initwithobjectandkey initWithObjectAndKey proc~addobjectforkey->proc~initwithobjectandkey entries entries proc~addobjectforkey->entries proc~releaseftobject releaseFTObject proc~releaseftvalue->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct proc~initwithobject initWithObject proc~add->proc~initwithobject init init proc~initwithobject->init retain retain proc~initwithobject->retain var panprocaddquadvalueforkeyCallsGraph = svgPanZoom('#procaddquadvalueforkeyCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/addquadvalueforkey.html","title":"addQuadValueForKey – FTObjectLibrary"},{"text":"public subroutine addStringValueForKey(self, s, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: s character(len=*) :: key Calls proc~~addstringvalueforkey~~CallsGraph proc~addstringvalueforkey addStringValueForKey initwithvalue initwithvalue proc~addstringvalueforkey->initwithvalue interface~release release proc~addstringvalueforkey->interface~release proc~addobjectforkey addObjectForKey proc~addstringvalueforkey->proc~addobjectforkey proc~releaseftvalue releaseFTValue interface~release->proc~releaseftvalue proc~add add proc~addobjectforkey->proc~add proc~initwithobjectandkey initWithObjectAndKey proc~addobjectforkey->proc~initwithobjectandkey entries entries proc~addobjectforkey->entries proc~releaseftobject releaseFTObject proc~releaseftvalue->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct proc~initwithobject initWithObject proc~add->proc~initwithobject init init proc~initwithobject->init retain retain proc~initwithobject->retain var panprocaddstringvalueforkeyCallsGraph = svgPanZoom('#procaddstringvalueforkeyCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/addstringvalueforkey.html","title":"addStringValueForKey – FTObjectLibrary"},{"text":"public subroutine addLogicalValueForKey(self, l, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self logical :: l character(len=*) :: key Calls proc~~addlogicalvalueforkey~~CallsGraph proc~addlogicalvalueforkey addLogicalValueForKey initwithvalue initwithvalue proc~addlogicalvalueforkey->initwithvalue interface~release release proc~addlogicalvalueforkey->interface~release proc~addobjectforkey addObjectForKey proc~addlogicalvalueforkey->proc~addobjectforkey proc~releaseftvalue releaseFTValue interface~release->proc~releaseftvalue proc~add add proc~addobjectforkey->proc~add proc~initwithobjectandkey initWithObjectAndKey proc~addobjectforkey->proc~initwithobjectandkey entries entries proc~addobjectforkey->entries proc~releaseftobject releaseFTObject proc~releaseftvalue->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct proc~initwithobject initWithObject proc~add->proc~initwithobject init init proc~initwithobject->init retain retain proc~initwithobject->retain var panprocaddlogicalvalueforkeyCallsGraph = svgPanZoom('#procaddlogicalvalueforkeyCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/addlogicalvalueforkey.html","title":"addLogicalValueForKey – FTObjectLibrary"},{"text":"public subroutine castDictionaryToValueDictionary(dict, valueDict) Arguments Type Intent Optional Attributes Name class(FTDictionary), POINTER :: dict class( FTValueDictionary ), POINTER :: valueDict","tags":"","loc":"proc/castdictionarytovaluedictionary.html","title":"castDictionaryToValueDictionary – FTObjectLibrary"},{"text":"public subroutine castObjectToValueDictionary(obj, valueDict) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTValueDictionary ), POINTER :: valueDict","tags":"","loc":"proc/castobjecttovaluedictionary.html","title":"castObjectToValueDictionary – FTObjectLibrary"},{"text":"public interface release Calls interface~~release~2~~CallsGraph interface~release~2 release proc~releaseftvaluedictionary releaseFTValueDictionary interface~release~2->proc~releaseftvaluedictionary releaseftobject releaseftobject proc~releaseftvaluedictionary->releaseftobject Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By interface~~release~2~~CalledByGraph interface~release~2 release proc~testexception testException proc~testexception->interface~release~2 proc~subroutinethatthrowserror subroutineThatThrowsError proc~subroutinethatthrowserror->proc~testexception proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~subroutinethatthrowserror Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures releaseFTValueDictionary Module Procedures public subroutine releaseFTValueDictionary (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name type( FTValueDictionary ), POINTER :: self","tags":"","loc":"interface/release~2.html","title":"release – FTObjectLibrary"},{"text":"public function sharedAssertionsManager() Arguments None Return Value type( FTAssertionsManager ),\n  POINTER","tags":"","loc":"proc/sharedassertionsmanager.html","title":"sharedAssertionsManager – FTObjectLibrary"},{"text":"public function numberOfAssertions(self) Arguments Type Intent Optional Attributes Name class( FTAssertionsManager ) :: self Return Value integer","tags":"","loc":"proc/numberofassertions.html","title":"numberOfAssertions – FTObjectLibrary"},{"text":"public function numberOfAssertionFailures(self) Arguments Type Intent Optional Attributes Name class( FTAssertionsManager ) :: self Return Value integer","tags":"","loc":"proc/numberofassertionfailures.html","title":"numberOfAssertionFailures – FTObjectLibrary"},{"text":"public subroutine detachSharedAssertionsManager() Arguments None","tags":"","loc":"proc/detachsharedassertionsmanager.html","title":"detachSharedAssertionsManager – FTObjectLibrary"},{"text":"public subroutine initializeSharedAssertionsManager() Arguments None Called By proc~~initializesharedassertionsmanager~~CalledByGraph proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad proc~assertwithintolerancetwoquad->proc~initializesharedassertionsmanager proc~ftassert FTAssert proc~ftassert->proc~initializesharedassertionsmanager interface~ftassertequal FTAssertEqual interface~ftassertequal->proc~assertwithintolerancetwoquad proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->proc~ftassert proc~ftdictionaryclasstests->interface~ftassertequal proc~sparsematrixtests SparseMatrixTests proc~sparsematrixtests->proc~ftassert proc~sparsematrixtests->interface~ftassertequal proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->interface~ftassertequal proc~ftvalueclasstests FTValueClassTests proc~ftvalueclasstests->proc~ftassert proc~ftvalueclasstests->interface~ftassertequal proc~basictests basicTests proc~basictests->proc~ftassert proc~basictests->interface~ftassertequal proc~stackclasstests StackClassTests proc~stackclasstests->proc~ftassert proc~stackclasstests->interface~ftassertequal proc~teststackpush testStackPush proc~stackclasstests->proc~teststackpush proc~teststackinit testStackInit proc~stackclasstests->proc~teststackinit proc~testdeletingobjects TestDeletingObjects proc~testdeletingobjects->interface~ftassertequal proc~multiindextabletests MultiIndexTableTests proc~multiindextabletests->proc~ftassert proc~multiindextabletests->interface~ftassertequal proc~testappendinglists testAppendingLists proc~testappendinglists->proc~ftassert proc~testappendinglists->interface~ftassertequal proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests proc~ftvaluedictionaryclasstests->proc~ftassert proc~ftvaluedictionaryclasstests->interface~ftassertequal proc~hashtabletests HashTableTests proc~hashtabletests->proc~ftassert proc~hashtabletests->interface~ftassertequal proc~teststackpush->proc~ftassert proc~teststackpush->interface~ftassertequal proc~teststackinit->proc~ftassert proc~teststackinit->interface~ftassertequal proc~mutablearrayclasstests MutableArrayClassTests proc~mutablearrayclasstests->proc~ftassert proc~mutablearrayclasstests->interface~ftassertequal proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~basictests proc~ftlinkedlistclasstests->proc~testdeletingobjects proc~ftlinkedlistclasstests->proc~testappendinglists var panprocinitializesharedassertionsmanagerCalledByGraph = svgPanZoom('#procinitializesharedassertionsmanagerCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initializesharedassertionsmanager.html","title":"initializeSharedAssertionsManager – FTObjectLibrary"},{"text":"public subroutine finalizeSharedAssertionsManager() Arguments None","tags":"","loc":"proc/finalizesharedassertionsmanager.html","title":"finalizeSharedAssertionsManager – FTObjectLibrary"},{"text":"public subroutine FTAssert(test, msg) Arguments Type Intent Optional Attributes Name logical :: test character(len=*), optional :: msg Calls proc~~ftassert~~CallsGraph proc~ftassert FTAssert proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~ftassert->proc~initializesharedassertionsmanager Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~ftassert~~CalledByGraph proc~ftassert FTAssert proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->proc~ftassert proc~sparsematrixtests SparseMatrixTests proc~sparsematrixtests->proc~ftassert proc~mutablearrayclasstests MutableArrayClassTests proc~mutablearrayclasstests->proc~ftassert proc~ftvalueclasstests FTValueClassTests proc~ftvalueclasstests->proc~ftassert proc~basictests basicTests proc~basictests->proc~ftassert proc~stackclasstests StackClassTests proc~stackclasstests->proc~ftassert proc~teststackpush testStackPush proc~stackclasstests->proc~teststackpush proc~teststackinit testStackInit proc~stackclasstests->proc~teststackinit proc~multiindextabletests MultiIndexTableTests proc~multiindextabletests->proc~ftassert proc~testappendinglists testAppendingLists proc~testappendinglists->proc~ftassert proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests proc~ftvaluedictionaryclasstests->proc~ftassert proc~hashtabletests HashTableTests proc~hashtabletests->proc~ftassert proc~teststackpush->proc~ftassert proc~teststackinit->proc~ftassert proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~basictests proc~ftlinkedlistclasstests->proc~testappendinglists Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/ftassert.html","title":"FTAssert – FTObjectLibrary"},{"text":"public subroutine assertWithinToleranceTwoQuad(expectedValue, actualValue, tol, msg) Arguments Type Intent Optional Attributes Name real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)), intent(in) :: expectedValue real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)), intent(in) :: actualValue real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)), intent(in) :: tol character(len=*), optional :: msg Calls proc~~assertwithintolerancetwoquad~~CallsGraph proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad interface~isequal isEqual proc~assertwithintolerancetwoquad->interface~isequal proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~assertwithintolerancetwoquad->proc~initializesharedassertionsmanager Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~assertwithintolerancetwoquad~~CalledByGraph proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad interface~ftassertequal FTAssertEqual interface~ftassertequal->proc~assertwithintolerancetwoquad proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->interface~ftassertequal proc~sparsematrixtests SparseMatrixTests proc~sparsematrixtests->interface~ftassertequal proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->interface~ftassertequal proc~ftvalueclasstests FTValueClassTests proc~ftvalueclasstests->interface~ftassertequal proc~basictests basicTests proc~basictests->interface~ftassertequal proc~stackclasstests StackClassTests proc~stackclasstests->interface~ftassertequal proc~teststackpush testStackPush proc~stackclasstests->proc~teststackpush proc~teststackinit testStackInit proc~stackclasstests->proc~teststackinit proc~testdeletingobjects TestDeletingObjects proc~testdeletingobjects->interface~ftassertequal proc~multiindextabletests MultiIndexTableTests proc~multiindextabletests->interface~ftassertequal proc~testappendinglists testAppendingLists proc~testappendinglists->interface~ftassertequal proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests proc~ftvaluedictionaryclasstests->interface~ftassertequal proc~hashtabletests HashTableTests proc~hashtabletests->interface~ftassertequal proc~teststackpush->interface~ftassertequal proc~teststackinit->interface~ftassertequal proc~mutablearrayclasstests MutableArrayClassTests proc~mutablearrayclasstests->interface~ftassertequal proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~basictests proc~ftlinkedlistclasstests->proc~testdeletingobjects proc~ftlinkedlistclasstests->proc~testappendinglists Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/assertwithintolerancetwoquad.html","title":"assertWithinToleranceTwoQuad – FTObjectLibrary"},{"text":"public interface FTAssertEqual Calls interface~~ftassertequal~~CallsGraph interface~ftassertequal FTAssertEqual proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad interface~ftassertequal->proc~assertwithintolerancetwoquad interface~isequal isEqual proc~assertwithintolerancetwoquad->interface~isequal proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~assertwithintolerancetwoquad->proc~initializesharedassertionsmanager Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By interface~~ftassertequal~~CalledByGraph interface~ftassertequal FTAssertEqual proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->interface~ftassertequal proc~sparsematrixtests SparseMatrixTests proc~sparsematrixtests->interface~ftassertequal proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->interface~ftassertequal proc~ftvalueclasstests FTValueClassTests proc~ftvalueclasstests->interface~ftassertequal proc~basictests basicTests proc~basictests->interface~ftassertequal proc~stackclasstests StackClassTests proc~stackclasstests->interface~ftassertequal proc~teststackpush testStackPush proc~stackclasstests->proc~teststackpush proc~teststackinit testStackInit proc~stackclasstests->proc~teststackinit proc~testdeletingobjects TestDeletingObjects proc~testdeletingobjects->interface~ftassertequal proc~multiindextabletests MultiIndexTableTests proc~multiindextabletests->interface~ftassertequal proc~testappendinglists testAppendingLists proc~testappendinglists->interface~ftassertequal proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests proc~ftvaluedictionaryclasstests->interface~ftassertequal proc~hashtabletests HashTableTests proc~hashtabletests->interface~ftassertequal proc~teststackpush->interface~ftassertequal proc~teststackinit->interface~ftassertequal proc~mutablearrayclasstests MutableArrayClassTests proc~mutablearrayclasstests->interface~ftassertequal proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~basictests proc~ftlinkedlistclasstests->proc~testdeletingobjects proc~ftlinkedlistclasstests->proc~testappendinglists Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures assertEqualTwoIntegers assertEqualTwoIntegerArrays1D assertEqualTwoIntegerArrays2D assertWithinToleranceTwoReal assertWithinToleranceTwoRealArrays1D assertWithinToleranceTwoRealArrays2D assertWithinToleranceTwoDouble assertWithinToleranceTwoDoubleArrays1D assertWithinToleranceTwoDoubleArrays2D assertWithinToleranceTwoQuad assertEqualTwoLogicals assertEqualString Module Procedures private subroutine assertEqualTwoIntegers(expectedValue, actualValue, msg) Arguments Type Intent Optional Attributes Name integer, intent(in) :: expectedValue integer, intent(in) :: actualValue character(len=*), optional :: msg private subroutine assertEqualTwoIntegerArrays1D(expectedValue, actualValue) Arguments Type Intent Optional Attributes Name integer, intent(in), DIMENSION(:) :: expectedValue integer, intent(in), DIMENSION(:) :: actualValue private subroutine assertEqualTwoIntegerArrays2D(expectedValue, actualValue) Arguments Type Intent Optional Attributes Name integer, intent(in), DIMENSION(:,:) :: expectedValue integer, intent(in), DIMENSION(:,:) :: actualValue private subroutine assertWithinToleranceTwoReal(expectedValue, actualValue, tol, msg) Arguments Type Intent Optional Attributes Name real, intent(in) :: expectedValue real, intent(in) :: actualValue real, intent(in) :: tol character(len=*), optional :: msg private subroutine assertWithinToleranceTwoRealArrays1D(expectedValue, actualValue, tol, msg) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: expectedValue real, intent(in), DIMENSION(:) :: actualValue real, intent(in) :: tol character(len=*), optional :: msg private subroutine assertWithinToleranceTwoRealArrays2D(expectedValue, actualValue, tol) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: expectedValue real, intent(in), DIMENSION(:,:) :: actualValue real, intent(in) :: tol private subroutine assertWithinToleranceTwoDouble(expectedValue, actualValue, tol, msg) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: expectedValue double precision, intent(in) :: actualValue double precision, intent(in) :: tol character(len=*), optional :: msg private subroutine assertWithinToleranceTwoDoubleArrays1D(expectedValue, actualValue, tol, msg) Arguments Type Intent Optional Attributes Name double precision, intent(in), DIMENSION(:) :: expectedValue double precision, intent(in), DIMENSION(:) :: actualValue double precision, intent(in) :: tol character(len=*), optional :: msg private subroutine assertWithinToleranceTwoDoubleArrays2D(expectedValue, actualValue, tol) Arguments Type Intent Optional Attributes Name double precision, intent(in), DIMENSION(:,:) :: expectedValue double precision, intent(in), DIMENSION(:,:) :: actualValue double precision, intent(in) :: tol public subroutine assertWithinToleranceTwoQuad (expectedValue, actualValue, tol, msg) Arguments Type Intent Optional Attributes Name real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)), intent(in) :: expectedValue real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)), intent(in) :: actualValue real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)), intent(in) :: tol character(len=*), optional :: msg private subroutine assertEqualTwoLogicals(expectedValue, actualValue, msg) Arguments Type Intent Optional Attributes Name logical, intent(in) :: expectedValue logical, intent(in) :: actualValue character(len=*), optional :: msg private subroutine assertEqualString(expectedValue, actualValue, msg) Arguments Type Intent Optional Attributes Name character(len=*) :: expectedValue character(len=*) :: actualValue character(len=*), optional :: msg","tags":"","loc":"interface/ftassertequal.html","title":"FTAssertEqual – FTObjectLibrary"},{"text":"public interface isEqual Called By interface~~isequal~~CalledByGraph interface~isequal isEqual proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad proc~assertwithintolerancetwoquad->interface~isequal interface~ftassertequal FTAssertEqual interface~ftassertequal->proc~assertwithintolerancetwoquad proc~ftdictionaryclasstests FTDictionaryClassTests proc~ftdictionaryclasstests->interface~ftassertequal proc~sparsematrixtests SparseMatrixTests proc~sparsematrixtests->interface~ftassertequal proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->interface~ftassertequal proc~ftvalueclasstests FTValueClassTests proc~ftvalueclasstests->interface~ftassertequal proc~basictests basicTests proc~basictests->interface~ftassertequal proc~stackclasstests StackClassTests proc~stackclasstests->interface~ftassertequal proc~teststackpush testStackPush proc~stackclasstests->proc~teststackpush proc~teststackinit testStackInit proc~stackclasstests->proc~teststackinit proc~testdeletingobjects TestDeletingObjects proc~testdeletingobjects->interface~ftassertequal proc~multiindextabletests MultiIndexTableTests proc~multiindextabletests->interface~ftassertequal proc~testappendinglists testAppendingLists proc~testappendinglists->interface~ftassertequal proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests proc~ftvaluedictionaryclasstests->interface~ftassertequal proc~hashtabletests HashTableTests proc~hashtabletests->interface~ftassertequal proc~teststackpush->interface~ftassertequal proc~teststackinit->interface~ftassertequal proc~mutablearrayclasstests MutableArrayClassTests proc~mutablearrayclasstests->interface~ftassertequal proc~ftlinkedlistclasstests FTLinkedListClassTests proc~ftlinkedlistclasstests->proc~basictests proc~ftlinkedlistclasstests->proc~testdeletingobjects proc~ftlinkedlistclasstests->proc~testappendinglists var paninterfaceisequalCalledByGraph = svgPanZoom('#interfaceisequalCalledByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Module Procedures isEqualTwoIntegers isEqualTwoIntegerArrays1D isEqualTwoIntegerArrays2D isWithinToleranceTwoReal isWithinToleranceTwoRealArrays1D isWithinToleranceTwoRealArrays2D isWithinToleranceTwoDouble isWithinToleranceTwoDoubleArrays1D isWithinToleranceTwoDoubleArrays2D isEqualString isWithinToleranceTwoQuad Module Procedures private function isEqualTwoIntegers(i, j) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i integer, intent(in) :: j Return Value logical private function isEqualTwoIntegerArrays1D(a, b, info) Arguments Type Intent Optional Attributes Name integer, intent(in), DIMENSION(:) :: a integer, intent(in), DIMENSION(:) :: b type( assertInfoArray1D ), intent(inout), optional :: info Return Value logical private function isEqualTwoIntegerArrays2D(a, b, info) Arguments Type Intent Optional Attributes Name integer, intent(in), DIMENSION(:,:) :: a integer, intent(in), DIMENSION(:,:) :: b type( assertInfoArray2D ), intent(inout), optional :: info Return Value logical private function isWithinToleranceTwoReal(x, y, tol) Arguments Type Intent Optional Attributes Name real, intent(in) :: x real, intent(in) :: y real, intent(in) :: tol Return Value logical private function isWithinToleranceTwoRealArrays1D(a, b, tol, code) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: a real, intent(in), DIMENSION(:) :: b real, intent(in) :: tol integer, intent(out), optional :: code Return Value logical private function isWithinToleranceTwoRealArrays2D(a, b, tol, code) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: a real, intent(in), DIMENSION(:,:) :: b real, intent(in) :: tol integer, intent(out), optional :: code Return Value logical private function isWithinToleranceTwoDouble(x, y, tol) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: x double precision, intent(in) :: y double precision, intent(in) :: tol Return Value logical private function isWithinToleranceTwoDoubleArrays1D(a, b, tol, code) Arguments Type Intent Optional Attributes Name double precision, intent(in), DIMENSION(:) :: a double precision, intent(in), DIMENSION(:) :: b double precision, intent(in) :: tol integer, intent(out), optional :: code Return Value logical private function isWithinToleranceTwoDoubleArrays2D(a, b, tol, code) Arguments Type Intent Optional Attributes Name double precision, intent(in), DIMENSION(:,:) :: a double precision, intent(in), DIMENSION(:,:) :: b double precision, intent(in) :: tol integer, intent(out), optional :: code Return Value logical private function isEqualString(s1, s2) Arguments Type Intent Optional Attributes Name character(len=*) :: s1 character(len=*) :: s2 Return Value logical private function isWithinToleranceTwoQuad(x, y, tol) Arguments Type Intent Optional Attributes Name real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)), intent(in) :: x real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)), intent(in) :: y real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)), intent(in) :: tol Return Value logical","tags":"","loc":"interface/isequal.html","title":"isEqual – FTObjectLibrary"},{"text":"public function testException() Uses: FTExceptionClass FTValueDictionaryClass proc~~testexception~~UsesGraph proc~testexception testException module~ftvaluedictionaryclass FTValueDictionaryClass module~ftvaluedictionaryclass->proc~testexception module~ftexceptionclass FTExceptionClass module~ftvaluedictionaryclass->module~ftexceptionclass module~ftexceptionclass->proc~testexception module~ftvalueclass FTValueClass module~ftvalueclass->module~ftvaluedictionaryclass iso_fortran_env iso_fortran_env iso_fortran_env->module~ftvaluedictionaryclass iso_fortran_env->module~ftvalueclass module~ftdictionaryclass FTDictionaryClass module~ftdictionaryclass->module~ftvaluedictionaryclass module~ftdictionaryclass->module~ftexceptionclass module~ftolconstants FTOLConstants module~ftolconstants->module~ftvalueclass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftvalueclass module~ftkeyobjectpairclass FTKeyObjectPairClass module~ftobjectclass->module~ftkeyobjectpairclass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftobjectclass->module~ftlinkedlistrecordclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass module~ftkeyobjectpairclass->module~ftdictionaryclass module~ftmutableobjectarrayclass->module~ftdictionaryclass module~ftlinkedlistclass FTLinkedListClass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistclass->module~ftdictionaryclass module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistclass->module~ftlinkedlistiteratorclass module~ftstackclass FTStackClass module~ftlinkedlistclass->module~ftstackclass module~ftlinkedlistiteratorclass->module~ftexceptionclass module~ftlinkedlistiteratorclass->module~ftdictionaryclass module~ftlinkedlistrecordclass->module~ftlinkedlistclass module~ftstackclass->module~ftexceptionclass var panproctestexceptionUsesGraph = svgPanZoom('#proctestexceptionUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Arguments None Return Value class(FTException),\n  POINTER Calls proc~~testexception~~CallsGraph proc~testexception testException proc~initftexception initFTException proc~testexception->proc~initftexception interface~release~2 release proc~testexception->interface~release~2 initwithsize initwithsize proc~testexception->initwithsize addvalueforkey addvalueforkey proc~testexception->addvalueforkey proc~setinfodictionary setInfoDictionary proc~initftexception->proc~setinfodictionary proc~init init proc~initftexception->proc~init proc~releaseftvaluedictionary releaseFTValueDictionary interface~release~2->proc~releaseftvaluedictionary proc~releasememberdictionary releaseMemberDictionary proc~setinfodictionary->proc~releasememberdictionary retain retain proc~setinfodictionary->retain proc~initwithsize initWithSize proc~init->proc~initwithsize releaseftobject releaseftobject proc~releasememberdictionary->releaseftobject proc~initwithsize->proc~init entries entries proc~initwithsize->entries proc~releaseftvaluedictionary->releaseftobject var panproctestexceptionCallsGraph = svgPanZoom('#proctestexceptionCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~testexception~~CalledByGraph proc~testexception testException proc~subroutinethatthrowserror subroutineThatThrowsError proc~subroutinethatthrowserror->proc~testexception proc~ftexceptionclasstests FTExceptionClassTests proc~ftexceptionclasstests->proc~subroutinethatthrowserror Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/testexception.html","title":"testException – FTObjectLibrary"},{"text":"public subroutine testStackInit(stack) Uses: FTAssertions FTStackClass proc~~teststackinit~~UsesGraph proc~teststackinit testStackInit module~ftassertions FTAssertions module~ftassertions->proc~teststackinit module~ftstackclass FTStackClass module~ftstackclass->proc~teststackinit module~comparisonsmodule ComparisonsModule module~comparisonsmodule->module~ftassertions iso_fortran_env iso_fortran_env iso_fortran_env->module~ftassertions iso_fortran_env->module~comparisonsmodule module~ftolconstants FTOLConstants module~ftolconstants->module~ftassertions module~ftolconstants->module~comparisonsmodule module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistclass->module~ftstackclass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftlinkedlistrecordclass->module~ftlinkedlistclass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftobjectclass->module~ftlinkedlistrecordclass Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Arguments Type Intent Optional Attributes Name class(FTStack), POINTER :: stack Calls proc~~teststackinit~~CallsGraph proc~teststackinit testStackInit init init proc~teststackinit->init refcount refcount proc~teststackinit->refcount proc~ftassert FTAssert proc~teststackinit->proc~ftassert interface~ftassertequal FTAssertEqual proc~teststackinit->interface~ftassertequal proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~ftassert->proc~initializesharedassertionsmanager proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad interface~ftassertequal->proc~assertwithintolerancetwoquad proc~assertwithintolerancetwoquad->proc~initializesharedassertionsmanager interface~isequal isEqual proc~assertwithintolerancetwoquad->interface~isequal Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~teststackinit~~CalledByGraph proc~teststackinit testStackInit proc~stackclasstests StackClassTests proc~stackclasstests->proc~teststackinit Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/teststackinit.html","title":"testStackInit – FTObjectLibrary"},{"text":"public subroutine testStackPush(stack) Uses: FTAssertions FTStackClass FTValueClass proc~~teststackpush~~UsesGraph proc~teststackpush testStackPush module~ftassertions FTAssertions module~ftassertions->proc~teststackpush module~ftvalueclass FTValueClass module~ftvalueclass->proc~teststackpush module~ftstackclass FTStackClass module~ftstackclass->proc~teststackpush module~comparisonsmodule ComparisonsModule module~comparisonsmodule->module~ftassertions iso_fortran_env iso_fortran_env iso_fortran_env->module~ftassertions iso_fortran_env->module~ftvalueclass iso_fortran_env->module~comparisonsmodule module~ftolconstants FTOLConstants module~ftolconstants->module~ftassertions module~ftolconstants->module~ftvalueclass module~ftolconstants->module~comparisonsmodule module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftvalueclass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftobjectclass->module~ftlinkedlistrecordclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistclass->module~ftstackclass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistrecordclass->module~ftlinkedlistclass var panprocteststackpushUsesGraph = svgPanZoom('#procteststackpushUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Arguments Type Intent Optional Attributes Name class(FTStack), POINTER :: stack Calls proc~~teststackpush~~CallsGraph proc~teststackpush testStackPush interface~ftassertequal FTAssertEqual proc~teststackpush->interface~ftassertequal proc~ftassert FTAssert proc~teststackpush->proc~ftassert proc~doubleprecisionvalue doublePrecisionValue proc~teststackpush->proc~doubleprecisionvalue refcount refcount proc~teststackpush->refcount interface~release release proc~teststackpush->interface~release proc~push push proc~teststackpush->proc~push proc~peek peek proc~teststackpush->proc~peek initwithvalue initwithvalue proc~teststackpush->initwithvalue proc~valuefromobject valueFromObject proc~teststackpush->proc~valuefromobject proc~assertwithintolerancetwoquad assertWithinToleranceTwoQuad interface~ftassertequal->proc~assertwithintolerancetwoquad proc~initializesharedassertionsmanager initializeSharedAssertionsManager proc~ftassert->proc~initializesharedassertionsmanager proc~releaseftvalue releaseFTValue interface~release->proc~releaseftvalue initwithobject initwithobject proc~push->initwithobject interface~isequal isEqual proc~assertwithintolerancetwoquad->interface~isequal proc~assertwithintolerancetwoquad->proc~initializesharedassertionsmanager proc~releaseftobject releaseFTObject proc~releaseftvalue->proc~releaseftobject printdescription printdescription proc~releaseftobject->printdescription destruct destruct proc~releaseftobject->destruct var panprocteststackpushCallsGraph = svgPanZoom('#procteststackpushCallsGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~teststackpush~~CalledByGraph proc~teststackpush testStackPush proc~stackclasstests StackClassTests proc~stackclasstests->proc~teststackpush Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/teststackpush.html","title":"testStackPush – FTObjectLibrary"},{"text":"Uses: FTObjectClass FTStackClass FTValueClass module~~calculatorclass~~UsesGraph module~calculatorclass CalculatorClass module~ftobjectclass FTObjectClass module~ftobjectclass->module~calculatorclass module~ftvalueclass FTValueClass module~ftobjectclass->module~ftvalueclass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftobjectclass->module~ftlinkedlistrecordclass module~ftvalueclass->module~calculatorclass module~ftstackclass FTStackClass module~ftstackclass->module~calculatorclass module~ftolconstants FTOLConstants module~ftolconstants->module~ftvalueclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass iso_fortran_env iso_fortran_env iso_fortran_env->module~ftvalueclass module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistclass->module~ftstackclass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistrecordclass->module~ftlinkedlistclass var panmodulecalculatorclassUsesGraph = svgPanZoom('#modulecalculatorclassUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types Calculator Derived Types type, public, EXTENDS(FTObject) :: Calculator Type-Bound Procedures procedure, public :: init => initCalculator procedure, public :: destruct => destructCalculator procedure, public :: clear => clearCalculator procedure, public :: enterOperation procedure, public :: enterValue generic, public :: enter => enterOperation, enterValue procedure, public :: readDisplay","tags":"","loc":"module/calculatorclass.html","title":"CalculatorClass – FTObjectLibrary"},{"text":"Subroutines demonstrateLinkedList Subroutines public subroutine demonstrateLinkedList () Arguments None","tags":"","loc":"module/linkedlistdemonstrationmodule.html","title":"linkedListDemonstrationModule – FTObjectLibrary"},{"text":"Uses: FTAssertions ComparisonsModule FTValueDictionaryClass TestSuiteManagerClass FTObjectClass FTDictionaryClass FTSparseMatrixClass FTMutableObjectArrayClass FTStackClass FTLinkedListClass FTLinkedListIteratorClass FTValueClass FTExceptionClass module~~ftobjectlibrary~~UsesGraph module~ftobjectlibrary FTObjectLibrary module~comparisonsmodule ComparisonsModule module~comparisonsmodule->module~ftobjectlibrary module~ftassertions FTAssertions module~comparisonsmodule->module~ftassertions module~ftstackclass FTStackClass module~ftstackclass->module~ftobjectlibrary module~ftexceptionclass FTExceptionClass module~ftstackclass->module~ftexceptionclass module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistiteratorclass->module~ftobjectlibrary module~ftsparsematrixclass FTSparseMatrixClass module~ftlinkedlistiteratorclass->module~ftsparsematrixclass module~ftdictionaryclass FTDictionaryClass module~ftlinkedlistiteratorclass->module~ftdictionaryclass module~ftlinkedlistiteratorclass->module~ftexceptionclass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftmutableobjectarrayclass->module~ftobjectlibrary module~ftlinkedlistclass FTLinkedListClass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftmutableobjectarrayclass->module~ftdictionaryclass module~testsuitemanagerclass TestSuiteManagerClass module~testsuitemanagerclass->module~ftobjectlibrary module~ftsparsematrixclass->module~ftobjectlibrary module~ftvalueclass FTValueClass module~ftvalueclass->module~ftobjectlibrary module~ftvaluedictionaryclass FTValueDictionaryClass module~ftvalueclass->module~ftvaluedictionaryclass module~ftlinkedlistclass->module~ftobjectlibrary module~ftlinkedlistclass->module~ftstackclass module~ftlinkedlistclass->module~ftlinkedlistiteratorclass module~ftlinkedlistclass->module~ftsparsematrixclass module~ftlinkedlistclass->module~ftdictionaryclass module~ftvaluedictionaryclass->module~ftobjectlibrary module~ftvaluedictionaryclass->module~ftexceptionclass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftobjectlibrary module~ftobjectclass->module~ftmutableobjectarrayclass module~ftobjectclass->module~ftsparsematrixclass module~ftobjectclass->module~ftvalueclass module~ftsparsematrixdata FTSparseMatrixData module~ftobjectclass->module~ftsparsematrixdata module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftobjectclass->module~ftlinkedlistrecordclass module~ftkeyobjectpairclass FTKeyObjectPairClass module~ftobjectclass->module~ftkeyobjectpairclass module~ftassertions->module~ftobjectlibrary module~ftassertions->module~testsuitemanagerclass module~ftdictionaryclass->module~ftobjectlibrary module~ftdictionaryclass->module~ftvaluedictionaryclass module~ftdictionaryclass->module~ftexceptionclass module~ftexceptionclass->module~ftobjectlibrary module~ftolconstants FTOLConstants module~ftolconstants->module~comparisonsmodule module~ftolconstants->module~ftvalueclass module~ftolconstants->module~ftassertions iso_fortran_env iso_fortran_env iso_fortran_env->module~comparisonsmodule iso_fortran_env->module~ftvalueclass iso_fortran_env->module~ftvaluedictionaryclass iso_fortran_env->module~ftassertions module~ftsparsematrixdata->module~ftsparsematrixclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass module~ftlinkedlistrecordclass->module~ftlinkedlistclass module~ftkeyobjectpairclass->module~ftdictionaryclass var panmoduleftobjectlibraryUsesGraph = svgPanZoom('#moduleftobjectlibraryUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. A module that simply USEs the entire library modules.","tags":"","loc":"module/ftobjectlibrary.html","title":"FTObjectLibrary – FTObjectLibrary"},{"text":"Defines constants to be used by the library Used By module~~ftolconstants~~UsedByGraph module~ftolconstants FTOLConstants module~comparisonsmodule ComparisonsModule module~ftolconstants->module~comparisonsmodule module~ftvalueclass FTValueClass module~ftolconstants->module~ftvalueclass module~ftassertions FTAssertions module~ftolconstants->module~ftassertions module~comparisonsmodule->module~ftassertions module~ftobjectlibrary FTObjectLibrary module~comparisonsmodule->module~ftobjectlibrary module~ftvalueclass->module~ftobjectlibrary proc~ftdictionaryclasstests FTDictionaryClassTests module~ftvalueclass->proc~ftdictionaryclasstests proc~sparsematrixtests SparseMatrixTests module~ftvalueclass->proc~sparsematrixtests proc~mutablearrayclasstests MutableArrayClassTests module~ftvalueclass->proc~mutablearrayclasstests proc~ftvalueclasstests FTValueClassTests module~ftvalueclass->proc~ftvalueclasstests proc~basictests basicTests module~ftvalueclass->proc~basictests proc~stackclasstests StackClassTests module~ftvalueclass->proc~stackclasstests proc~testdeletingobjects TestDeletingObjects module~ftvalueclass->proc~testdeletingobjects module~ftvaluedictionaryclass FTValueDictionaryClass module~ftvalueclass->module~ftvaluedictionaryclass proc~multiindextabletests MultiIndexTableTests module~ftvalueclass->proc~multiindextabletests proc~testappendinglists testAppendingLists module~ftvalueclass->proc~testappendinglists proc~hashtabletests HashTableTests module~ftvalueclass->proc~hashtabletests proc~demonstratelinkedlist demonstrateLinkedList module~ftvalueclass->proc~demonstratelinkedlist proc~teststackpush testStackPush module~ftvalueclass->proc~teststackpush module~calculatorclass CalculatorClass module~ftvalueclass->module~calculatorclass module~ftassertions->module~ftobjectlibrary module~ftassertions->proc~ftdictionaryclasstests module~ftassertions->proc~sparsematrixtests module~ftassertions->proc~mutablearrayclasstests module~ftassertions->proc~ftvalueclasstests module~ftassertions->proc~basictests module~ftassertions->proc~stackclasstests module~ftassertions->proc~testdeletingobjects module~ftassertions->proc~multiindextabletests module~ftassertions->proc~testappendinglists module~ftassertions->proc~hashtabletests module~ftassertions->proc~teststackpush proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests module~ftassertions->proc~ftvaluedictionaryclasstests proc~ftexceptionclasstests FTExceptionClassTests module~ftassertions->proc~ftexceptionclasstests module~testsuitemanagerclass TestSuiteManagerClass module~ftassertions->module~testsuitemanagerclass proc~teststackinit testStackInit module~ftassertions->proc~teststackinit module~ftvaluedictionaryclass->module~ftobjectlibrary proc~testexception testException module~ftvaluedictionaryclass->proc~testexception module~ftvaluedictionaryclass->proc~ftvaluedictionaryclasstests module~ftexceptionclass FTExceptionClass module~ftvaluedictionaryclass->module~ftexceptionclass module~ftvaluedictionaryclass->proc~ftexceptionclasstests module~ftexceptionclass->module~ftobjectlibrary module~ftexceptionclass->proc~testexception module~sharedexceptionmanagermodule SharedExceptionManagerModule module~ftexceptionclass->module~sharedexceptionmanagermodule proc~subroutinethatthrowserror subroutineThatThrowsError module~ftexceptionclass->proc~subroutinethatthrowserror module~sharedexceptionmanagermodule->proc~ftexceptionclasstests module~sharedexceptionmanagermodule->proc~subroutinethatthrowserror module~testsuitemanagerclass->module~ftobjectlibrary program~testobjectsmain TestObjectsMain module~testsuitemanagerclass->program~testobjectsmain var panmoduleftolconstantsUsedByGraph = svgPanZoom('#moduleftolconstantsUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables FT_ORDERED_ASCENDING FT_ORDERED_DESCENDING FT_ORDERED_SAME QUAD_DIGITS Variables Type Visibility Attributes Name Initial integer, public, parameter :: FT_ORDERED_ASCENDING = 1 integer, public, parameter :: FT_ORDERED_DESCENDING = -1 integer, public, parameter :: FT_ORDERED_SAME = 0 integer, public, parameter :: QUAD_DIGITS = 30","tags":"","loc":"module/ftolconstants.html","title":"FTOLConstants – FTObjectLibrary"},{"text":"Uses: FTObjectClass module~~ftdataclass~~UsesGraph module~ftdataclass FTDataClass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftdataclass Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. FTData defines a subclass of FTObject to contain immutable\ngeneric data, including derived types. The initializer\ncopies the data and takes ownership of that copy. FTData\ngives a way to use derived types without having to subclass\nFTObject. Variables DATA_CLASS_TYPE_LENGTH Interfaces release Derived Types FTData Functions storedData dataType dataClassName dataIsOfType Subroutines initWithDataOfType releaseFTData Variables Type Visibility Attributes Name Initial integer, public, parameter :: DATA_CLASS_TYPE_LENGTH = 32 Interfaces public interface release public subroutine releaseFTData (self) Arguments Type Intent Optional Attributes Name class( FTData ), POINTER :: self Derived Types type, public, EXTENDS(FTObject) :: FTData Type-Bound Procedures procedure, public :: initWithDataOfType procedure, public :: storedData procedure, public :: className => dataClassName Functions public function storedData (self) result(d) Arguments Type Intent Optional Attributes Name class( FTData ) :: self Return Value character(len=1)\n  (SIZE(self%dataStorage)) public function dataType (self) result(t) Arguments Type Intent Optional Attributes Name class( FTData ) :: self Return Value character(len=DATA_CLASS_TYPE_LENGTH) public function dataClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTData ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH) public function dataIsOfType (self, dataType) result(t) Arguments Type Intent Optional Attributes Name class( FTData ) :: self character(len=DATA_CLASS_TYPE_LENGTH) :: dataType Return Value logical Subroutines public subroutine initWithDataOfType (self, genericData, dataType) Arguments Type Intent Optional Attributes Name class( FTData ) :: self character(len=1) :: genericData (:) character(len=*) :: dataType public subroutine releaseFTData (self) Arguments Type Intent Optional Attributes Name class( FTData ), POINTER :: self","tags":"","loc":"module/ftdataclass.html","title":"FTDataClass – FTObjectLibrary"},{"text":"Uses: FTObjectClass module~~ftkeyobjectpairclass~~UsesGraph module~ftkeyobjectpairclass FTKeyObjectPairClass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftkeyobjectpairclass Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. The FTKeyObjectPairClass is for use by the FTDictionary Class and will\ngenerally not be interacted with by the user. Used By module~~ftkeyobjectpairclass~~UsedByGraph module~ftkeyobjectpairclass FTKeyObjectPairClass module~ftdictionaryclass FTDictionaryClass module~ftkeyobjectpairclass->module~ftdictionaryclass proc~ftdictionaryclasstests FTDictionaryClassTests module~ftdictionaryclass->proc~ftdictionaryclasstests module~ftobjectlibrary FTObjectLibrary module~ftdictionaryclass->module~ftobjectlibrary module~ftexceptionclass FTExceptionClass module~ftdictionaryclass->module~ftexceptionclass module~ftvaluedictionaryclass FTValueDictionaryClass module~ftdictionaryclass->module~ftvaluedictionaryclass module~ftexceptionclass->module~ftobjectlibrary module~sharedexceptionmanagermodule SharedExceptionManagerModule module~ftexceptionclass->module~sharedexceptionmanagermodule proc~subroutinethatthrowserror subroutineThatThrowsError module~ftexceptionclass->proc~subroutinethatthrowserror proc~testexception testException module~ftexceptionclass->proc~testexception module~ftvaluedictionaryclass->module~ftobjectlibrary module~ftvaluedictionaryclass->module~ftexceptionclass module~ftvaluedictionaryclass->proc~testexception proc~ftexceptionclasstests FTExceptionClassTests module~ftvaluedictionaryclass->proc~ftexceptionclasstests proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests module~ftvaluedictionaryclass->proc~ftvaluedictionaryclasstests module~sharedexceptionmanagermodule->proc~subroutinethatthrowserror module~sharedexceptionmanagermodule->proc~ftexceptionclasstests var panmoduleftkeyobjectpairclassUsedByGraph = svgPanZoom('#moduleftkeyobjectpairclassUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables FTDICT_KWD_STRING_LENGTH Interfaces release Derived Types FTKeyObjectPair Functions FTKeyObjectPairDescription key object Subroutines initWithObjectAndKey destructFTKeyObjectPair releaseFTKeyObjectPair printFTKeyObjectPairDescription Variables Type Visibility Attributes Name Initial integer, public, parameter :: FTDICT_KWD_STRING_LENGTH = 64 Interfaces public interface release public subroutine releaseFTKeyObjectPair (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ), POINTER :: self Derived Types type, public, EXTENDS(FTObject) :: FTKeyObjectPair Components Type Visibility Attributes Name Initial character(len=FTDICT_KWD_STRING_LENGTH), public :: keyString class(FTObject), public, POINTER :: valueObject => NULL() Type-Bound Procedures procedure, public :: initWithObjectAndKey procedure, public :: destruct => destructFTKeyObjectPair procedure, public :: description => FTKeyObjectPairDescription procedure, public :: printDescription => printFTKeyObjectPairDescription procedure, public :: key procedure, public :: object Functions public function FTKeyObjectPairDescription (self) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ) :: self Return Value character(len=DESCRIPTION_CHARACTER_LENGTH) public function key (self) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ) :: self Return Value character(len=FTDICT_KWD_STRING_LENGTH) public function object (self) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ) :: self Return Value class(FTObject),\n  POINTER Subroutines public subroutine initWithObjectAndKey (self, v, key) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ) :: self class(FTObject), POINTER :: v character(len=*) :: key public subroutine destructFTKeyObjectPair (self) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ) :: self public subroutine releaseFTKeyObjectPair (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ), POINTER :: self public subroutine printFTKeyObjectPairDescription (self, iUnit) Arguments Type Intent Optional Attributes Name class( FTKeyObjectPair ) :: self integer :: iUnit","tags":"","loc":"module/ftkeyobjectpairclass.html","title":"FTKeyObjectPairClass – FTObjectLibrary"},{"text":"Uses: FTKeyObjectPairClass FTLinkedListClass FTLinkedListIteratorClass FTMutableObjectArrayClass module~~ftdictionaryclass~~UsesGraph module~ftdictionaryclass FTDictionaryClass module~ftkeyobjectpairclass FTKeyObjectPairClass module~ftkeyobjectpairclass->module~ftdictionaryclass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftmutableobjectarrayclass->module~ftdictionaryclass module~ftlinkedlistclass FTLinkedListClass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistclass->module~ftdictionaryclass module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistclass->module~ftlinkedlistiteratorclass module~ftlinkedlistiteratorclass->module~ftdictionaryclass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftkeyobjectpairclass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftobjectclass->module~ftlinkedlistrecordclass module~ftlinkedlistrecordclass->module~ftlinkedlistclass var panmoduleftdictionaryclassUsesGraph = svgPanZoom('#moduleftdictionaryclassUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. A dictionary is a special case of a hash table that stores key-value pairs. It is an\nexample of what is called an ``associative container''. In the implementation of FTObjectLibrary,\nthe value can be any subclass of FTObject and the key is a character variable. The library\nincludes the base dictionary that can store and retrieve any subclass of FTObject. It also includes a\nsubclass that is designed to store and retrieve FTValue objects. FTDictionary (Inherits from FTObject) Initialization CLASS(FTDictionary), POINTER :: dict\n     ALLOCATE(dict)\n     CALL dict % initWithSize(N) ! N = size of dictionary. Should be power of two Adding entries CLASS(FTDictionary), POINTER :: dict\n     CLASS(FTObject)    , POINTER :: obj\n     CHARACTER(LEN=N)             :: key\n     obj => r                            ! r is subclass of FTObject\n     CALL dict % addObjectForKey(obj,key) Accessing entries obj => dict % objectForKey(key)\n     CALL cast(obj,v) ! v is the type of object to be extracted Destruction CALL release(dict) ! Pointer\n     call dict % destruct() ! Stack variable Accessing an object TYPE(FTObject) :: obj\n       obj => dict % objectForKey(key) Converting a base class pointer to a dictionary dict =>  dictionaryFromObject(obj) Getting all of the keys CHARACTER(LEN=FTDICT_KWD_STRING_LENGTH), POINTER :: keys(:)\n       keys =>  dict % allKeys() (The target of the pointer must be deallocated by the caller) Getting all of the objects CLASS(FTMutableObjectArray), POINTER :: objectArray\n       objectArray =>  dict % allObjects() ! The array is owned by the caller. (The target of the pointer must be released by the caller) Used By module~~ftdictionaryclass~~UsedByGraph module~ftdictionaryclass FTDictionaryClass proc~ftdictionaryclasstests FTDictionaryClassTests module~ftdictionaryclass->proc~ftdictionaryclasstests module~ftobjectlibrary FTObjectLibrary module~ftdictionaryclass->module~ftobjectlibrary module~ftexceptionclass FTExceptionClass module~ftdictionaryclass->module~ftexceptionclass module~ftvaluedictionaryclass FTValueDictionaryClass module~ftdictionaryclass->module~ftvaluedictionaryclass module~ftexceptionclass->module~ftobjectlibrary module~sharedexceptionmanagermodule SharedExceptionManagerModule module~ftexceptionclass->module~sharedexceptionmanagermodule proc~subroutinethatthrowserror subroutineThatThrowsError module~ftexceptionclass->proc~subroutinethatthrowserror proc~testexception testException module~ftexceptionclass->proc~testexception module~ftvaluedictionaryclass->module~ftobjectlibrary module~ftvaluedictionaryclass->module~ftexceptionclass module~ftvaluedictionaryclass->proc~testexception proc~ftexceptionclasstests FTExceptionClassTests module~ftvaluedictionaryclass->proc~ftexceptionclasstests proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests module~ftvaluedictionaryclass->proc~ftvaluedictionaryclasstests module~sharedexceptionmanagermodule->proc~subroutinethatthrowserror module~sharedexceptionmanagermodule->proc~ftexceptionclasstests var panmoduleftdictionaryclassUsedByGraph = svgPanZoom('#moduleftdictionaryclassUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Interfaces cast release Derived Types FTDictionary Functions caseSensitive COUNT objectForKey containsKey objectForKeyInList FTDictionaryDescription AllObjects AllKeys dictionaryFromObject dictionaryClassName Subroutines init initWithSize destructFTDictionary releaseFTDictionary setCaseSensitive addObjectForKey printFTDictionaryDescription castToDictionary Interfaces public interface cast public subroutine castToDictionary (obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTDictionary ), POINTER :: cast public interface release public subroutine releaseFTDictionary (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name type( FTDictionary ), POINTER :: self Derived Types type, public, EXTENDS(FTObject) :: FTDictionary Components Type Visibility Attributes Name Initial integer, public :: numberOfEntries logical, public :: isCaseSensitive type(FTLinkedList), public, DIMENSION(:), POINTER :: entries => NULL() Type-Bound Procedures procedure, public :: initWithSize procedure, public :: init procedure, public :: setCaseSensitive procedure, public :: caseSensitive procedure, public :: allKeys => AllKeys procedure, public :: allObjects => AllObjects procedure, public :: destruct => destructFTDictionary procedure, public :: addObjectForKey procedure, public :: description => FTDictionaryDescription procedure, public :: printDescription => printFTDictionaryDescription procedure, public :: objectForKey procedure, public :: containsKey procedure, public :: className => dictionaryClassName procedure, public :: COUNT Functions public function caseSensitive (self) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Return Value logical public function COUNT (self) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Return Value integer public function objectForKey (self, key) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self character(len=*) :: key Return Value class(FTObject),\n  POINTER public function containsKey (self, key) result(r) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self character(len=*) :: key Return Value logical public function objectForKeyInList (key, list) Arguments Type Intent Optional Attributes Name character(len=*) :: key class(FTLinkedList) :: list Return Value class(FTObject),\n  POINTER public function FTDictionaryDescription (self) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Return Value character(len=DESCRIPTION_CHARACTER_LENGTH) public function AllObjects (self) result(objectArray) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Return Value class(FTMutableObjectArray),\n  POINTER public function AllKeys (self) result(keys) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Return Value character(len=FTDICT_KWD_STRING_LENGTH),\n  POINTER, (:) public function dictionaryFromObject (obj) result(cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( FTDictionary ),\n  POINTER public function dictionaryClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH) Subroutines public subroutine init (self) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self public subroutine initWithSize (self, sze) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self integer, intent(in) :: sze public subroutine destructFTDictionary (self) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self public subroutine releaseFTDictionary (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name type( FTDictionary ), POINTER :: self public subroutine setCaseSensitive (self, bool) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self logical :: bool public subroutine addObjectForKey (self, object, key) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self class(FTObject), POINTER :: object character(len=*) :: key public subroutine printFTDictionaryDescription (self, iUnit) Arguments Type Intent Optional Attributes Name class( FTDictionary ) :: self integer :: iUnit public subroutine castToDictionary (obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTDictionary ), POINTER :: cast","tags":"","loc":"module/ftdictionaryclass.html","title":"FTDictionaryClass – FTObjectLibrary"},{"text":"Uses: FTStackClass FTDictionaryClass FTValueDictionaryClass FTLinkedListIteratorClass module~~ftexceptionclass~~UsesGraph module~ftexceptionclass FTExceptionClass module~ftstackclass FTStackClass module~ftstackclass->module~ftexceptionclass module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistiteratorclass->module~ftexceptionclass module~ftdictionaryclass FTDictionaryClass module~ftlinkedlistiteratorclass->module~ftdictionaryclass module~ftdictionaryclass->module~ftexceptionclass module~ftvaluedictionaryclass FTValueDictionaryClass module~ftdictionaryclass->module~ftvaluedictionaryclass module~ftvaluedictionaryclass->module~ftexceptionclass module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistclass->module~ftstackclass module~ftlinkedlistclass->module~ftlinkedlistiteratorclass module~ftlinkedlistclass->module~ftdictionaryclass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftmutableobjectarrayclass->module~ftdictionaryclass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftlinkedlistrecordclass->module~ftlinkedlistclass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftobjectclass->module~ftlinkedlistrecordclass module~ftkeyobjectpairclass FTKeyObjectPairClass module~ftobjectclass->module~ftkeyobjectpairclass module~ftvalueclass FTValueClass module~ftobjectclass->module~ftvalueclass module~ftkeyobjectpairclass->module~ftdictionaryclass module~ftvalueclass->module~ftvaluedictionaryclass iso_fortran_env iso_fortran_env iso_fortran_env->module~ftvaluedictionaryclass iso_fortran_env->module~ftvalueclass module~ftolconstants FTOLConstants module~ftolconstants->module~ftvalueclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass var panmoduleftexceptionclassUsesGraph = svgPanZoom('#moduleftexceptionclassUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. An FTException object gives a way to pass generic\ninformation about an exceptional situation. An FTException object gives a way to pass generic\ninformation about an exceptional situation. Methods for\ndealing with exceptions are defined in the SharedExceptionManagerModule\nmodule. An FTException object wraps: A severity indicator A name for the exception An optional dictionary that contains whatever information is deemed necessary. It is expected that classes will define exceptions that use instances\nof the FTException Class. Defined constants: FT_ERROR_NONE    = 0 FT_ERROR_WARNING = 1 FT_ERROR_FATAL   = 2 Initialization CALL e  %  initFTException(severity,exceptionName,infoDictionary) Plus the convenience initializers, which automatically create a FTValueDictionary with a single key called \"message\": CALL e % initWarningException(msg = \"message\")\n    CALL e % initFatalException(msg = \"message\") Plus an assertion exception CALL e % initAssertionFailureException(msg,expectedValueObject,observedValueObject,level) Destruction CALL e  %  release() Setting the infoDictionary CALL e  %  setInfoDictionary(infoDictionary) Getting the infoDictionary dict => e % infoDictionary Getting the name of the exception name = e % exceptionName() Getting the severity level of the exception level = e % severity() Severity levels are FT_ERROR_WARNING or FT_ERROR_FATAL Printing the exception CALL e % printDescription() Used By module~~ftexceptionclass~~UsedByGraph module~ftexceptionclass FTExceptionClass module~sharedexceptionmanagermodule SharedExceptionManagerModule module~ftexceptionclass->module~sharedexceptionmanagermodule module~ftobjectlibrary FTObjectLibrary module~ftexceptionclass->module~ftobjectlibrary proc~subroutinethatthrowserror subroutineThatThrowsError module~ftexceptionclass->proc~subroutinethatthrowserror proc~testexception testException module~ftexceptionclass->proc~testexception module~sharedexceptionmanagermodule->proc~subroutinethatthrowserror proc~ftexceptionclasstests FTExceptionClassTests module~sharedexceptionmanagermodule->proc~ftexceptionclasstests Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables FT_ERROR_NONE FT_ERROR_WARNING FT_ERROR_FATAL ERROR_MSG_STRING_LENGTH FTFatalErrorException FTWarningErrorException FTAssertionFailureException Interfaces cast release Derived Types FTException Functions infoDictionary exceptionName severity exceptionFromObject exceptionClassName Subroutines initWarningException initFatalException initFTException initAssertionFailureException destructException releaseFTException setInfoDictionary releaseMemberDictionary printFTExceptionDescription castToException Variables Type Visibility Attributes Name Initial integer, public, parameter :: FT_ERROR_NONE = 0 integer, public, parameter :: FT_ERROR_WARNING = 1 integer, public, parameter :: FT_ERROR_FATAL = 2 integer, public, parameter :: ERROR_MSG_STRING_LENGTH = 132 character(len=21), public, parameter :: FTFatalErrorException = \"FTFatalErrorException\" character(len=23), public, parameter :: FTWarningErrorException = \"FTWarningErrorException\" character(len=27), public, parameter :: FTAssertionFailureException = \"FTAssertionFailureException\" Interfaces public interface cast public subroutine castToException (obj, cast) Cast the base class FTObject to the FTException class Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTException ), POINTER :: cast public interface release public subroutine releaseFTException (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name class( FTException ), POINTER :: self Derived Types type, public, EXTENDS(FTObject) :: FTException Type-Bound Procedures procedure, public :: initFTException procedure, public :: initWarningException procedure, public :: initFatalException procedure, public :: initAssertionFailureException procedure, public :: destruct => destructException procedure, public :: setInfoDictionary procedure, public :: infoDictionary procedure, public :: exceptionName procedure, public :: severity procedure, public :: printDescription => printFTExceptionDescription procedure, public :: className => exceptionClassName Functions public function infoDictionary (self) Returns the exception's infoDictionary. Does\nnot transfer ownership/reference count is \nunchanged. Arguments Type Intent Optional Attributes Name class( FTException ) :: self Return Value class(FTDictionary),\n  POINTER public function exceptionName (self) Returns the string representing the name set\nfor the exception. Arguments Type Intent Optional Attributes Name class( FTException ) :: self Return Value character(len=ERROR_MSG_STRING_LENGTH) public function severity (self) Returns the severity level of the exception. Arguments Type Intent Optional Attributes Name class( FTException ) :: self Return Value integer public function exceptionFromObject (obj) result(cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( FTException ),\n  POINTER public function exceptionClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTException ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH) Subroutines public subroutine initWarningException (self, msg) A convenience initializer for a warning error \nthat includes the key \"message\" in the\ninfoDictionary. Use this initializer as an \nexample of how to write one's own exception. Arguments Type Intent Optional Attributes Name class( FTException ) :: self character(len=*) :: msg public subroutine initFatalException (self, msg) A convenience initializer for a fatal error \nthat includes the key \"message\" in the\ninfoDictionary.Use this initializer as an \nexample of how to write one's own exception. Arguments Type Intent Optional Attributes Name class( FTException ) :: self character(len=*) :: msg public subroutine initFTException (self, severity, exceptionName, infoDictionary) The main initializer for the class Arguments Type Intent Optional Attributes Name class( FTException ) :: self integer :: severity character(len=*) :: exceptionName class(FTDictionary), optional POINTER :: infoDictionary public subroutine initAssertionFailureException (self, msg, expectedValueObject, ObservedValueObject, level) A convenience initializer for an assertion error \nthat includes the keys: Arguments Type Intent Optional Attributes Name class( FTException ) :: self character(len=*) :: msg class(FTValue), POINTER :: expectedValueObject class(FTValue), POINTER :: ObservedValueObject integer :: level public subroutine destructException (self) The destructor for the class. Do not call this direectly. Call\nthe release() procedure instead Arguments Type Intent Optional Attributes Name class( FTException ) :: self public subroutine releaseFTException (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name class( FTException ), POINTER :: self public subroutine setInfoDictionary (self, dict) Sets and retains the exception infoDictionary Arguments Type Intent Optional Attributes Name class( FTException ) :: self class(FTDictionary), POINTER :: dict public subroutine releaseMemberDictionary (self) Arguments Type Intent Optional Attributes Name class( FTException ) :: self public subroutine printFTExceptionDescription (self, iUnit) A basic printing of the exception and the info\nheld in the infoDicitonary. Arguments Type Intent Optional Attributes Name class( FTException ) :: self integer :: iUnit public subroutine castToException (obj, cast) Cast the base class FTObject to the FTException class Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTException ), POINTER :: cast","tags":"","loc":"module/ftexceptionclass.html","title":"FTExceptionClass – FTObjectLibrary"},{"text":"Uses: FTExceptionClass module~~sharedexceptionmanagermodule~~UsesGraph module~sharedexceptionmanagermodule SharedExceptionManagerModule module~ftexceptionclass FTExceptionClass module~ftexceptionclass->module~sharedexceptionmanagermodule module~ftstackclass FTStackClass module~ftstackclass->module~ftexceptionclass module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistiteratorclass->module~ftexceptionclass module~ftdictionaryclass FTDictionaryClass module~ftlinkedlistiteratorclass->module~ftdictionaryclass module~ftdictionaryclass->module~ftexceptionclass module~ftvaluedictionaryclass FTValueDictionaryClass module~ftdictionaryclass->module~ftvaluedictionaryclass module~ftvaluedictionaryclass->module~ftexceptionclass module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistclass->module~ftstackclass module~ftlinkedlistclass->module~ftlinkedlistiteratorclass module~ftlinkedlistclass->module~ftdictionaryclass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftmutableobjectarrayclass->module~ftdictionaryclass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftlinkedlistrecordclass->module~ftlinkedlistclass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftobjectclass->module~ftlinkedlistrecordclass module~ftkeyobjectpairclass FTKeyObjectPairClass module~ftobjectclass->module~ftkeyobjectpairclass module~ftvalueclass FTValueClass module~ftobjectclass->module~ftvalueclass module~ftkeyobjectpairclass->module~ftdictionaryclass module~ftvalueclass->module~ftvaluedictionaryclass iso_fortran_env iso_fortran_env iso_fortran_env->module~ftvaluedictionaryclass iso_fortran_env->module~ftvalueclass module~ftolconstants FTOLConstants module~ftolconstants->module~ftvalueclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass var panmodulesharedexceptionmanagermoduleUsesGraph = svgPanZoom('#modulesharedexceptionmanagermoduleUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. All exceptions are posted to the SharedExceptionManagerModule. To use exceptions,first initialize it\n        CALL initializeFTExceptions\nFrom that point on, all exceptions will be posted there. Note that the\nFTTestSuiteManager class will initialize the SharedExceptionManagerModule,\nso there is no need to do the initialization separately if the FTTestSuiteManager\nclass has been initialized. The exceptions are posted to a stack. To access the exceptions they will be\npeeked or popped from that stack. Initialization CALL initializeFTExceptions Finalization CALL destructFTExceptions Throwing an exception CALL throw(exception) Getting the number of exceptions n = errorCount() Catching all exceptions IF(catch())     THEN\n        Do something with the exceptions\n     END IF Getting the named exception caught CLASS(FTException), POINTER :: e\n     e => errorObject() Popping the top exception e => popLastException() Peeking the top exception e => peekLastException() Catching an exception with a given name IF(catch(name))   THEN\n        !Do something with the exception, e.g.\n        e              => errorObject()\n        d              => e % infoDictionary()\n        userDictionary => valueDictionaryFromDictionary(dict = d)\n        msg = userDictionary % stringValueForKey(\"message\",FTDICT_KWD_STRING_LENGTH)\n     END IF Printing all exceptions call printAllExceptions Used By module~~sharedexceptionmanagermodule~~UsedByGraph module~sharedexceptionmanagermodule SharedExceptionManagerModule proc~subroutinethatthrowserror subroutineThatThrowsError module~sharedexceptionmanagermodule->proc~subroutinethatthrowserror proc~ftexceptionclasstests FTExceptionClassTests module~sharedexceptionmanagermodule->proc~ftexceptionclasstests Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Interfaces catch Functions errorCount errorObject popLastException peekLastException Subroutines initializeFTExceptions destructFTExceptions throw setCurrentError printAllExceptions Interfaces public interface catch private function catchAll() Returns .TRUE. if there are any exceptions. Arguments None Return Value logical private function catchErrorWithName(exceptionName) Returns .TRUE. if there is an exception with\nthe requested name. If so, it pops the \nexception and saves the pointer to it so that\nit can be accessed with the currentError()\nfunction. Arguments Type Intent Optional Attributes Name character(len=*) :: exceptionName Return Value logical Functions public function errorCount () Returns the number of exceptions that have \nbeen thrown. Arguments None Return Value integer public function errorObject () Returns a pointer to the current exception. Arguments None Return Value class(FTException),\n  POINTER public function popLastException () Get the last exception posted. This is popped from the stack.\nThe caller is responsible for releasing the object after popping Arguments None Return Value class(FTException),\n  POINTER public function peekLastException () Get the last exception posted. This is NOT popped from the stack.\nThe caller does not own the object. Arguments None Return Value class(FTException),\n  POINTER Subroutines public subroutine initializeFTExceptions () Called at start of execution. Will be called automatically if an \nexception is thrown. Arguments None public subroutine destructFTExceptions () Called at the end of execution. This procedure will announce if there\nare uncaught exceptions raised and print them. Arguments None public subroutine throw (exceptionToThrow) Throws the exception: exceptionToThrow Arguments Type Intent Optional Attributes Name class(FTException), POINTER :: exceptionToThrow public subroutine setCurrentError (e) Arguments Type Intent Optional Attributes Name class(FTException), POINTER :: e public subroutine printAllExceptions () Arguments None","tags":"","loc":"module/sharedexceptionmanagermodule.html","title":"SharedExceptionManagerModule – FTObjectLibrary"},{"text":"Uses: FTObjectClass module~~ftlinkedlistrecordclass~~UsesGraph module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftlinkedlistrecordclass Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. FTLinkedListRecord is the record type (object and next) for the\nLinkedList class. One will generally not instantiate a record oneself. They are \ncreated automatically when one adds an object to a linked list. Used By module~~ftlinkedlistrecordclass~~UsedByGraph module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistrecordclass->module~ftlinkedlistclass proc~basictests basicTests module~ftlinkedlistclass->proc~basictests module~ftobjectlibrary FTObjectLibrary module~ftlinkedlistclass->module~ftobjectlibrary proc~demonstratelinkedlist demonstrateLinkedList module~ftlinkedlistclass->proc~demonstratelinkedlist module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistclass->module~ftlinkedlistiteratorclass proc~testdeletingobjects TestDeletingObjects module~ftlinkedlistclass->proc~testdeletingobjects module~ftmultiindextableclass FTMultiIndexTableClass module~ftlinkedlistclass->module~ftmultiindextableclass proc~testappendinglists testAppendingLists module~ftlinkedlistclass->proc~testappendinglists module~ftsparsematrixclass FTSparseMatrixClass module~ftlinkedlistclass->module~ftsparsematrixclass module~ftstackclass FTStackClass module~ftlinkedlistclass->module~ftstackclass module~ftdictionaryclass FTDictionaryClass module~ftlinkedlistclass->module~ftdictionaryclass module~ftlinkedlistiteratorclass->proc~basictests module~ftlinkedlistiteratorclass->module~ftobjectlibrary module~ftlinkedlistiteratorclass->proc~demonstratelinkedlist module~ftlinkedlistiteratorclass->proc~testdeletingobjects module~ftlinkedlistiteratorclass->proc~testappendinglists module~ftlinkedlistiteratorclass->module~ftsparsematrixclass module~ftlinkedlistiteratorclass->module~ftdictionaryclass module~ftexceptionclass FTExceptionClass module~ftlinkedlistiteratorclass->module~ftexceptionclass proc~multiindextabletests MultiIndexTableTests module~ftmultiindextableclass->proc~multiindextabletests module~ftsparsematrixclass->module~ftobjectlibrary proc~sparsematrixtests SparseMatrixTests module~ftsparsematrixclass->proc~sparsematrixtests module~ftstackclass->module~ftobjectlibrary module~ftstackclass->module~ftexceptionclass proc~stackclasstests StackClassTests module~ftstackclass->proc~stackclasstests module~calculatorclass CalculatorClass module~ftstackclass->module~calculatorclass proc~teststackpush testStackPush module~ftstackclass->proc~teststackpush proc~teststackinit testStackInit module~ftstackclass->proc~teststackinit module~ftdictionaryclass->module~ftobjectlibrary module~ftdictionaryclass->module~ftexceptionclass proc~ftdictionaryclasstests FTDictionaryClassTests module~ftdictionaryclass->proc~ftdictionaryclasstests module~ftvaluedictionaryclass FTValueDictionaryClass module~ftdictionaryclass->module~ftvaluedictionaryclass module~ftexceptionclass->module~ftobjectlibrary module~sharedexceptionmanagermodule SharedExceptionManagerModule module~ftexceptionclass->module~sharedexceptionmanagermodule proc~subroutinethatthrowserror subroutineThatThrowsError module~ftexceptionclass->proc~subroutinethatthrowserror proc~testexception testException module~ftexceptionclass->proc~testexception module~sharedexceptionmanagermodule->proc~subroutinethatthrowserror proc~ftexceptionclasstests FTExceptionClassTests module~sharedexceptionmanagermodule->proc~ftexceptionclasstests module~ftvaluedictionaryclass->module~ftobjectlibrary module~ftvaluedictionaryclass->module~ftexceptionclass module~ftvaluedictionaryclass->proc~testexception module~ftvaluedictionaryclass->proc~ftexceptionclasstests proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests module~ftvaluedictionaryclass->proc~ftvaluedictionaryclasstests var panmoduleftlinkedlistrecordclassUsedByGraph = svgPanZoom('#moduleftlinkedlistrecordclassUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Interfaces release Derived Types FTLinkedListRecord Functions llRecordClassName Subroutines initWithObject destructFTLinkedListRecord releaseFTLinkedListRecord printFTLinkedRecordDescription Interfaces public interface release public subroutine releaseFTLinkedListRecord (self) Arguments Type Intent Optional Attributes Name class( FTLinkedListRecord ), POINTER :: self Derived Types type, public, EXTENDS(FTObject) :: FTLinkedListRecord Components Type Visibility Attributes Name Initial class(FTObject), public, POINTER :: recordObject => NULL() class( FTLinkedListRecord ), public, POINTER :: next => NULL() class( FTLinkedListRecord ), public, POINTER :: previous => NULL() Type-Bound Procedures procedure, public :: initWithObject procedure, public :: destruct => destructFTLinkedListRecord procedure, public :: printDescription => printFTLinkedRecordDescription procedure, public :: className => llRecordClassName Functions public function llRecordClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTLinkedListRecord ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH) Subroutines public subroutine initWithObject (self, obj) Arguments Type Intent Optional Attributes Name class( FTLinkedListRecord ) :: self class(FTObject), POINTER :: obj public subroutine destructFTLinkedListRecord (self) Arguments Type Intent Optional Attributes Name class( FTLinkedListRecord ) :: self public subroutine releaseFTLinkedListRecord (self) Arguments Type Intent Optional Attributes Name class( FTLinkedListRecord ), POINTER :: self public subroutine printFTLinkedRecordDescription (self, iUnit) Arguments Type Intent Optional Attributes Name class( FTLinkedListRecord ) :: self integer :: iUnit","tags":"","loc":"module/ftlinkedlistrecordclass.html","title":"FTLinkedListRecordClass – FTObjectLibrary"},{"text":"Uses: FTLinkedListRecordClass FTMutableObjectArrayClass module~~ftlinkedlistclass~~UsesGraph module~ftlinkedlistclass FTLinkedListClass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftlinkedlistrecordclass->module~ftlinkedlistclass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftobjectclass->module~ftlinkedlistrecordclass Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. FTLinkedList is a container class that stores objects in a linked list. Inherits from FTObjectClass Definition (Subclass of FTObject): TYPE(FTLinkedList) :: list Usage: Initialization CLASS(FTLinkedList), POINTER :: list\n     ALLOCATE(list)\n     CALL list % init Adding objects CLASS(FTLinkedList), POINTER :: list, listToAdd\n     CLASS(FTObject)    , POINTER :: objectPtr\n\n     objectPtr => r                ! r is subclass of FTObject\n     CALL list % Add(objectPtr)    ! Pointer is retained by list\n     CALL release(r)               ! If caller relinquishes ownership\n\n     CALL list % addObjectsFromList(listToAdd) Inserting objects CLASS(FTLinkedList)      , POINTER :: list\n     CLASS(FTObject)          , POINTER :: objectPtr, obj\n     CLASS(FTLinkedListRecord), POINTER :: record\n\n     objectPtr => r                                        ! r is subclass of FTObject\n     CALL list % insertObjectAfterRecord(objectPtr,record) ! Pointer is retained by list\n     CALL release(r)                                       ! If caller reliquishes ownership\n\n     objectPtr => r                                     ! r is subclass of FTObject\n     CALL list % insertObjectAfterObject(objectPtr,obj) ! Pointer is retained by list\n     CALL release(r)                                    ! If caller reliquishes ownership Removing objects CLASS(FTLinkedList), POINTER :: list\n     CLASS(FTObject)    , POINTER :: objectPtr\n     objectPtr => r                 ! r is subclass of FTObject\n     CALL list % remove(objectPtr) Getting all objects as an object array CLASS(FTLinkedList)        , POINTER :: list\n     CLASS(FTMutableObjectArray), POINTER :: array\n     array => list % allObjects() ! Array has refCount = 1 Counting the number of objects in the list n = list % count() Destruction CALL release ( list ) [ Pointers ] CALL list % destruct () [ Non Pointers ] ! Used By module~~ftlinkedlistclass~~UsedByGraph module~ftlinkedlistclass FTLinkedListClass proc~basictests basicTests module~ftlinkedlistclass->proc~basictests module~ftobjectlibrary FTObjectLibrary module~ftlinkedlistclass->module~ftobjectlibrary proc~demonstratelinkedlist demonstrateLinkedList module~ftlinkedlistclass->proc~demonstratelinkedlist module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistclass->module~ftlinkedlistiteratorclass proc~testdeletingobjects TestDeletingObjects module~ftlinkedlistclass->proc~testdeletingobjects module~ftmultiindextableclass FTMultiIndexTableClass module~ftlinkedlistclass->module~ftmultiindextableclass proc~testappendinglists testAppendingLists module~ftlinkedlistclass->proc~testappendinglists module~ftsparsematrixclass FTSparseMatrixClass module~ftlinkedlistclass->module~ftsparsematrixclass module~ftstackclass FTStackClass module~ftlinkedlistclass->module~ftstackclass module~ftdictionaryclass FTDictionaryClass module~ftlinkedlistclass->module~ftdictionaryclass module~ftlinkedlistiteratorclass->proc~basictests module~ftlinkedlistiteratorclass->module~ftobjectlibrary module~ftlinkedlistiteratorclass->proc~demonstratelinkedlist module~ftlinkedlistiteratorclass->proc~testdeletingobjects module~ftlinkedlistiteratorclass->proc~testappendinglists module~ftlinkedlistiteratorclass->module~ftsparsematrixclass module~ftlinkedlistiteratorclass->module~ftdictionaryclass module~ftexceptionclass FTExceptionClass module~ftlinkedlistiteratorclass->module~ftexceptionclass proc~multiindextabletests MultiIndexTableTests module~ftmultiindextableclass->proc~multiindextabletests module~ftsparsematrixclass->module~ftobjectlibrary proc~sparsematrixtests SparseMatrixTests module~ftsparsematrixclass->proc~sparsematrixtests module~ftstackclass->module~ftobjectlibrary module~ftstackclass->module~ftexceptionclass proc~stackclasstests StackClassTests module~ftstackclass->proc~stackclasstests module~calculatorclass CalculatorClass module~ftstackclass->module~calculatorclass proc~teststackpush testStackPush module~ftstackclass->proc~teststackpush proc~teststackinit testStackInit module~ftstackclass->proc~teststackinit module~ftdictionaryclass->module~ftobjectlibrary module~ftdictionaryclass->module~ftexceptionclass proc~ftdictionaryclasstests FTDictionaryClassTests module~ftdictionaryclass->proc~ftdictionaryclasstests module~ftvaluedictionaryclass FTValueDictionaryClass module~ftdictionaryclass->module~ftvaluedictionaryclass module~ftexceptionclass->module~ftobjectlibrary module~sharedexceptionmanagermodule SharedExceptionManagerModule module~ftexceptionclass->module~sharedexceptionmanagermodule proc~subroutinethatthrowserror subroutineThatThrowsError module~ftexceptionclass->proc~subroutinethatthrowserror proc~testexception testException module~ftexceptionclass->proc~testexception module~sharedexceptionmanagermodule->proc~subroutinethatthrowserror proc~ftexceptionclasstests FTExceptionClassTests module~sharedexceptionmanagermodule->proc~ftexceptionclasstests module~ftvaluedictionaryclass->module~ftobjectlibrary module~ftvaluedictionaryclass->module~ftexceptionclass module~ftvaluedictionaryclass->proc~testexception module~ftvaluedictionaryclass->proc~ftexceptionclasstests proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests module~ftvaluedictionaryclass->proc~ftvaluedictionaryclasstests var panmoduleftlinkedlistclassUsedByGraph = svgPanZoom('#moduleftlinkedlistclassUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Interfaces cast release Derived Types FTLinkedList Functions isCircular numberOfRecords FTLinkedListDescription allLinkedListObjects linkedListClassName linkedListFromObject Subroutines initFTLinkedList add addObjectsFromList insertObjectAfterRecord insertObjectAfterObject makeCircular removeObject1 removeObject removeLinkedListRecord removeAllLinkedListObjects destructFTLinkedList releaseFTLinkedList printFTLinkedListDescription reverseLinkedList castObjectToLinkedList Interfaces public interface cast public subroutine castObjectToLinkedList (obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTLinkedList ), POINTER :: cast public interface release public subroutine releaseFTLinkedList (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name type( FTLinkedList ), POINTER :: self Derived Types type, public, EXTENDS(FTObject) :: FTLinkedList Components Type Visibility Attributes Name Initial class(FTLinkedListRecord), public, POINTER :: head => NULL() class(FTLinkedListRecord), public, POINTER :: tail => NULL() integer, public :: nRecords logical, public :: isCircular_ Type-Bound Procedures procedure, public :: init => initFTLinkedList procedure, public :: add procedure, public :: remove => removeObject procedure, public :: reverse => reverseLinkedList procedure, public :: removeRecord => removeLinkedListRecord procedure, public :: destruct => destructFTLinkedList procedure, public :: count => numberOfRecords procedure, public :: description => FTLinkedListDescription procedure, public :: printDescription => printFTLinkedListDescription procedure, public :: className => linkedListClassName procedure, public :: allObjects => allLinkedListObjects procedure, public :: removeAllObjects => removeAllLinkedListObjects procedure, public :: addObjectsFromList procedure, public :: makeCircular procedure, public :: isCircular procedure, public :: insertObjectAfterRecord procedure, public :: insertObjectAfterObject Functions public function isCircular (self) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Return Value logical public function numberOfRecords (self) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Return Value integer public function FTLinkedListDescription (self) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Return Value character(len=DESCRIPTION_CHARACTER_LENGTH) public function allLinkedListObjects (self) result(array) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Return Value class(FTMutableObjectArray),\n  POINTER public function linkedListClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH) public function linkedListFromObject (obj) result(cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( FTLinkedList ),\n  POINTER Subroutines public subroutine initFTLinkedList (self) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self public subroutine add (self, obj) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class(FTObject), POINTER :: obj public subroutine addObjectsFromList (self, list) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class( FTLinkedList ), POINTER :: list public subroutine insertObjectAfterRecord (self, obj, after) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class(FTObject), POINTER :: obj class(FTLinkedListRecord), POINTER :: after public subroutine insertObjectAfterObject (self, obj, after) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class(FTObject), POINTER :: obj class(FTObject), POINTER :: after public subroutine makeCircular (self, circular) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self logical :: circular public subroutine removeObject1 (self, obj) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class(FTObject), POINTER :: obj public subroutine removeObject (self, obj) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class(FTObject), POINTER :: obj public subroutine removeLinkedListRecord (self, listRecord) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self class(FTLinkedListRecord), POINTER :: listRecord public subroutine removeAllLinkedListObjects (self) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self public subroutine destructFTLinkedList (self) It is automatically called by release(). Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self public subroutine releaseFTLinkedList (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name type( FTLinkedList ), POINTER :: self public subroutine printFTLinkedListDescription (self, iUnit) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self integer :: iUnit public subroutine reverseLinkedList (self) Arguments Type Intent Optional Attributes Name class( FTLinkedList ) :: self public subroutine castObjectToLinkedList (obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTLinkedList ), POINTER :: cast","tags":"","loc":"module/ftlinkedlistclass.html","title":"FTLinkedListClass – FTObjectLibrary"},{"text":"Uses: FTLinkedListClass module~~ftlinkedlistiteratorclass~~UsesGraph module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistclass->module~ftlinkedlistiteratorclass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftlinkedlistrecordclass->module~ftlinkedlistclass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftobjectclass->module~ftlinkedlistrecordclass Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. An object for stepping through a linked list. Definition (Subclass of FTObject): TYPE(FTLinkedListIterator) :: list Initialization CLASS(FTLinkedList)        , POINTER :: list\n     CLASS(FTLinkedListIterator), POINTER :: iterator\n     ALLOCATE(iterator)\n     CALL iterator % initWithFTLinkedList(list) Accessors ptr => iterator % list()\n     ptr => iterator % object()\n     ptr => iterator % currentRecord() Iterating CLASS(FTObject), POINTER :: objectPtr\n     CALL iterator % setToStart\n     DO WHILE (.NOT.iterator % isAtEnd())\n        objectPtr => iterator % object()        ! if the object is wanted\n        recordPtr => iterator % currentRecord() ! if the record is wanted\n\n         Do something with object or record\n\n        CALL iterator % moveToNext() ! DON'T FORGET THIS!!\n     END DO Destruction CALL iterator % destruct () [ Non Pointers ] CALL release ( iterator ) [ Pointers ] Used By module~~ftlinkedlistiteratorclass~~UsedByGraph module~ftlinkedlistiteratorclass FTLinkedListIteratorClass proc~basictests basicTests module~ftlinkedlistiteratorclass->proc~basictests module~ftexceptionclass FTExceptionClass module~ftlinkedlistiteratorclass->module~ftexceptionclass module~ftsparsematrixclass FTSparseMatrixClass module~ftlinkedlistiteratorclass->module~ftsparsematrixclass proc~testdeletingobjects TestDeletingObjects module~ftlinkedlistiteratorclass->proc~testdeletingobjects proc~testappendinglists testAppendingLists module~ftlinkedlistiteratorclass->proc~testappendinglists module~ftobjectlibrary FTObjectLibrary module~ftlinkedlistiteratorclass->module~ftobjectlibrary proc~demonstratelinkedlist demonstrateLinkedList module~ftlinkedlistiteratorclass->proc~demonstratelinkedlist module~ftdictionaryclass FTDictionaryClass module~ftlinkedlistiteratorclass->module~ftdictionaryclass module~ftexceptionclass->module~ftobjectlibrary module~sharedexceptionmanagermodule SharedExceptionManagerModule module~ftexceptionclass->module~sharedexceptionmanagermodule proc~subroutinethatthrowserror subroutineThatThrowsError module~ftexceptionclass->proc~subroutinethatthrowserror proc~testexception testException module~ftexceptionclass->proc~testexception module~ftsparsematrixclass->module~ftobjectlibrary proc~sparsematrixtests SparseMatrixTests module~ftsparsematrixclass->proc~sparsematrixtests module~ftdictionaryclass->module~ftexceptionclass module~ftdictionaryclass->module~ftobjectlibrary proc~ftdictionaryclasstests FTDictionaryClassTests module~ftdictionaryclass->proc~ftdictionaryclasstests module~ftvaluedictionaryclass FTValueDictionaryClass module~ftdictionaryclass->module~ftvaluedictionaryclass module~sharedexceptionmanagermodule->proc~subroutinethatthrowserror proc~ftexceptionclasstests FTExceptionClassTests module~sharedexceptionmanagermodule->proc~ftexceptionclasstests module~ftvaluedictionaryclass->module~ftexceptionclass module~ftvaluedictionaryclass->module~ftobjectlibrary module~ftvaluedictionaryclass->proc~testexception module~ftvaluedictionaryclass->proc~ftexceptionclasstests proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests module~ftvaluedictionaryclass->proc~ftvaluedictionaryclasstests var panmoduleftlinkedlistiteratorclassUsedByGraph = svgPanZoom('#moduleftlinkedlistiteratorclassUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Interfaces release Derived Types FTLinkedListIterator Functions FTLinkedListIsAtEnd returnLinkedList FTLinkedListObject FTLinkedListCurrentRecord linkedListIteratorClassName Subroutines initEmpty initWithFTLinkedList destructIterator releaseMemberList releaseFTLinkedListIterator setToStart moveToNext setLinkedList removeCurrentRecord Interfaces public interface release public subroutine releaseFTLinkedListIterator (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ), POINTER :: self Derived Types type, public, EXTENDS(FTObject) :: FTLinkedListIterator Components Type Visibility Attributes Name Initial class(FTLinkedList), public, POINTER :: list => NULL() class(FTLinkedListRecord), public, POINTER :: current => NULL() Type-Bound Procedures procedure, public :: init => initEmpty procedure, public :: initWithFTLinkedList procedure, public :: destruct => destructIterator procedure, public :: isAtEnd => FTLinkedListIsAtEnd procedure, public :: object => FTLinkedListObject procedure, public :: currentRecord => FTLinkedListCurrentRecord procedure, public :: linkedList => returnLinkedList procedure, public :: className => linkedListIteratorClassName procedure, public :: setLinkedList procedure, public :: setToStart procedure, public :: moveToNext procedure, public :: removeCurrentRecord Functions public function FTLinkedListIsAtEnd (self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Return Value logical public function returnLinkedList (self) result(o) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Return Value class(FTLinkedList),\n  POINTER public function FTLinkedListObject (self) result(o) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Return Value class(FTObject),\n  POINTER public function FTLinkedListCurrentRecord (self) result(o) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Return Value class(FTLinkedListRecord),\n  POINTER public function linkedListIteratorClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH) Subroutines public subroutine initEmpty (self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self public subroutine initWithFTLinkedList (self, list) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self class(FTLinkedList), POINTER :: list public subroutine destructIterator (self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self public subroutine releaseMemberList (self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self public subroutine releaseFTLinkedListIterator (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ), POINTER :: self public subroutine setToStart (self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self public subroutine moveToNext (self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self public subroutine setLinkedList (self, list) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self class(FTLinkedList), POINTER :: list public subroutine removeCurrentRecord (self) Arguments Type Intent Optional Attributes Name class( FTLinkedListIterator ) :: self","tags":"","loc":"module/ftlinkedlistiteratorclass.html","title":"FTLinkedListIteratorClass – FTObjectLibrary"},{"text":"Uses: FTObjectClass module~~ftmultiindextabledata~~UsesGraph module~ftmultiindextabledata FTMultiIndexTableData module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftmultiindextabledata Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~ftmultiindextabledata~~UsedByGraph module~ftmultiindextabledata FTMultiIndexTableData module~ftmultiindextableclass FTMultiIndexTableClass module~ftmultiindextabledata->module~ftmultiindextableclass proc~multiindextabletests MultiIndexTableTests module~ftmultiindextableclass->proc~multiindextabletests Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Interfaces cast Derived Types MultiIndexMatrixData Functions MultiIndexMatrixDataCast Subroutines initWithObjectAndKeys destructMultiIndexMatrixData castObjectToMultiIndexMatrixData Interfaces public interface cast public subroutine castObjectToMultiIndexMatrixData (obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( MultiIndexMatrixData ), POINTER :: cast Derived Types type, public, EXTENDS(FTObject) :: MultiIndexMatrixData Components Type Visibility Attributes Name Initial integer, public, ALLOCATABLE :: key (:) class(FTObject), public, POINTER :: object Type-Bound Procedures procedure, public :: initWithObjectAndKeys procedure, public :: destruct => destructMultiIndexMatrixData Functions public function MultiIndexMatrixDataCast (obj) result(cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( MultiIndexMatrixData ),\n  POINTER Subroutines public subroutine initWithObjectAndKeys (self, object, key) Arguments Type Intent Optional Attributes Name class( MultiIndexMatrixData ) :: self class(FTObject), POINTER :: object integer :: key (:) public subroutine destructMultiIndexMatrixData (self) Arguments Type Intent Optional Attributes Name class( MultiIndexMatrixData ) :: self public subroutine castObjectToMultiIndexMatrixData (obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( MultiIndexMatrixData ), POINTER :: cast","tags":"","loc":"module/ftmultiindextabledata.html","title":"FTMultiIndexTableData – FTObjectLibrary"},{"text":"Uses: FTObjectClass FTLinkedListClass FTMultiIndexTableData module~~ftmultiindextableclass~~UsesGraph module~ftmultiindextableclass FTMultiIndexTableClass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftmultiindextableclass module~ftmultiindextabledata FTMultiIndexTableData module~ftobjectclass->module~ftmultiindextabledata module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftobjectclass->module~ftlinkedlistrecordclass module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistclass->module~ftmultiindextableclass module~ftmultiindextabledata->module~ftmultiindextableclass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistrecordclass->module~ftlinkedlistclass Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. The MultiIndexTable stores an FTObject pointer associated\nwith any number of integer keys(:) as a hash table. Usage Definition (Subclass of FTObject) TYPE(FTMultiIndexTable) :: multiIndexTable Initialization CALL MultiIndexTable % initWithSize(N) The size, N = the maximum value of all of the keys. Destruction CALL release(MultiIndexTable)     ... Pointers\n     call MultiIndexTable % destruct() ... non Pointers Adding an object CLASS(FTObject), POINTER :: obj\n     INTEGER, DIMENSION(dim)  :: keys\n     CALL MultiIndexTable % addObjectForKeys(obj,keys) Retrieving an object CLASS(FTObject), POINTER :: obj\n     INTEGER, DIMENSION(dim)  :: keys\n     obj => MultiIndexTable % objectForKeys(keys) Be sure to retain the object if you want it to live\n      beyond the life of the table. Testing the presence of keys LOGICAL :: exists\n     exists = MultiIndexTable % containsKeys(keys) Used By module~~ftmultiindextableclass~~UsedByGraph module~ftmultiindextableclass FTMultiIndexTableClass proc~multiindextabletests MultiIndexTableTests module~ftmultiindextableclass->proc~multiindextabletests Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Interfaces release Derived Types FTMultiIndexTable Functions objectInMultiIndexTableForKeys MultiIndexTableContainsKeys MultiIndexTableSize MultiIndexTableFromObject keysMatch Subroutines initMultiIndexTableWithSize destructMultiIndexTable releaseFTMultiIndexTable addObjectToMultiIndexTableForKeys sortKeysAscending printMultiIndexTableDescription Interfaces public interface release public subroutine releaseFTMultiIndexTable (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ), POINTER :: self Derived Types type, public, EXTENDS(FTObject) :: FTMultiIndexTable Components Type Visibility Attributes Name Initial class(FTLinkedList), public, DIMENSION(:), ALLOCATABLE :: table Type-Bound Procedures procedure, public :: initWithSize => initMultiIndexTableWithSize procedure, public :: destruct => destructMultiIndexTable procedure, public :: containsKeys => MultiIndexTableContainsKeys procedure, public :: addObjectForKeys => addObjectToMultiIndexTableForKeys procedure, public :: objectForKeys => objectInMultiIndexTableForKeys procedure, public :: printDescription => printMultiIndexTableDescription procedure, public :: MultiIndexTableSize Functions public function objectInMultiIndexTableForKeys (self, keys) result(r) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self integer :: keys (:) Return Value class(FTObject),\n  POINTER public function MultiIndexTableContainsKeys (self, keys) result(r) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self integer :: keys (:) Return Value logical public function MultiIndexTableSize (self) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self Return Value integer public function MultiIndexTableFromObject (obj) result(cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( FTMultiIndexTable ),\n  POINTER public function keysMatch (key1, key2) Arguments Type Intent Optional Attributes Name integer, DIMENSION(:) :: key1 integer, DIMENSION(:) :: key2 Return Value logical Subroutines public subroutine initMultiIndexTableWithSize (self, N) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self integer :: N public subroutine destructMultiIndexTable (self) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self public subroutine releaseFTMultiIndexTable (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ), POINTER :: self public subroutine addObjectToMultiIndexTableForKeys (self, obj, keys) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self class(FTObject), POINTER :: obj integer :: keys (:) public subroutine sortKeysAscending (keys) Arguments Type Intent Optional Attributes Name integer, DIMENSION(:) :: keys public subroutine printMultiIndexTableDescription (self, iUnit) Arguments Type Intent Optional Attributes Name class( FTMultiIndexTable ) :: self integer :: iUnit","tags":"","loc":"module/ftmultiindextableclass.html","title":"FTMultiIndexTableClass – FTObjectLibrary"},{"text":"Uses: FTObjectClass module~~ftmutableobjectarrayclass~~UsesGraph module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftmutableobjectarrayclass Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. FTMutableObjectArray is a mutable array class to which objects\ncan be added, removed, replaced and accessed according to their \nindex in the array. Fortran has pointers to arrays, but not arrays of pointers. To do the latter, one creates\na wrapper derived type and creates an array of that wrapper type. Fortran arrays are great, but\nthey are of fixed length, and they don't easily implement reference counting to keep track of\nmemory. For that, we have the FTMutableObjectArray. Performance reasons dictate that you \nwill use regular arrays for numeric types and the like, but for generic objects we would use\nan Object Array. You initialize a FTMutableObjectArray with the number of objects that you expect it to hold.\nHowever, it can re-size itself if necessary. To be efficient, it adds more than one entry at a time\ngiven by the ``chunkSize'', which you can choose for yourself. (The default is 10.) Definition TYPE(FTMutableObjectArray) :: array Usage Initialization CLASS(FTMutableObjectArray)  :: array\n  INTEGER                      :: N = 11\n  CALL array % initWithSize(N) Destruction CALL array % destuct () [ Non Pointers ] call release ( array ) [ Pointers ] Adding an Object TYPE(FTObject) :: obj\n       obj => r1\n       CALL array % addObject(obj) Removing an Object TYPE(FTObject) :: obj\n       CALL array % removeObjectAtIndex(i) Accessing an Object TYPE(FTObject) :: obj\n       obj => array % objectAtIndex(i) Replacing an Object TYPE(FTObject) :: obj\n       obj => r1\n       CALL array % replaceObjectAtIndexWithObject(i,obj) Setting the Chunk Size CALL array % setChunkSize(size) Finding The Number Of Items In The Array n =  array % count() Finding The Actual Allocated Size Of The Array n =  array % allocatedSize() Used By module~~ftmutableobjectarrayclass~~UsedByGraph module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftobjectlibrary FTObjectLibrary module~ftmutableobjectarrayclass->module~ftobjectlibrary proc~mutablearrayclasstests MutableArrayClassTests module~ftmutableobjectarrayclass->proc~mutablearrayclasstests module~ftlinkedlistclass FTLinkedListClass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftdictionaryclass FTDictionaryClass module~ftmutableobjectarrayclass->module~ftdictionaryclass module~ftlinkedlistclass->module~ftobjectlibrary module~ftlinkedlistclass->module~ftdictionaryclass proc~basictests basicTests module~ftlinkedlistclass->proc~basictests proc~demonstratelinkedlist demonstrateLinkedList module~ftlinkedlistclass->proc~demonstratelinkedlist module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistclass->module~ftlinkedlistiteratorclass proc~testdeletingobjects TestDeletingObjects module~ftlinkedlistclass->proc~testdeletingobjects module~ftmultiindextableclass FTMultiIndexTableClass module~ftlinkedlistclass->module~ftmultiindextableclass proc~testappendinglists testAppendingLists module~ftlinkedlistclass->proc~testappendinglists module~ftsparsematrixclass FTSparseMatrixClass module~ftlinkedlistclass->module~ftsparsematrixclass module~ftstackclass FTStackClass module~ftlinkedlistclass->module~ftstackclass module~ftdictionaryclass->module~ftobjectlibrary module~ftexceptionclass FTExceptionClass module~ftdictionaryclass->module~ftexceptionclass proc~ftdictionaryclasstests FTDictionaryClassTests module~ftdictionaryclass->proc~ftdictionaryclasstests module~ftvaluedictionaryclass FTValueDictionaryClass module~ftdictionaryclass->module~ftvaluedictionaryclass module~ftlinkedlistiteratorclass->module~ftobjectlibrary module~ftlinkedlistiteratorclass->module~ftdictionaryclass module~ftlinkedlistiteratorclass->proc~basictests module~ftlinkedlistiteratorclass->proc~demonstratelinkedlist module~ftlinkedlistiteratorclass->proc~testdeletingobjects module~ftlinkedlistiteratorclass->proc~testappendinglists module~ftlinkedlistiteratorclass->module~ftsparsematrixclass module~ftlinkedlistiteratorclass->module~ftexceptionclass proc~multiindextabletests MultiIndexTableTests module~ftmultiindextableclass->proc~multiindextabletests module~ftsparsematrixclass->module~ftobjectlibrary proc~sparsematrixtests SparseMatrixTests module~ftsparsematrixclass->proc~sparsematrixtests module~ftstackclass->module~ftobjectlibrary module~ftstackclass->module~ftexceptionclass proc~stackclasstests StackClassTests module~ftstackclass->proc~stackclasstests module~calculatorclass CalculatorClass module~ftstackclass->module~calculatorclass proc~teststackpush testStackPush module~ftstackclass->proc~teststackpush proc~teststackinit testStackInit module~ftstackclass->proc~teststackinit module~ftexceptionclass->module~ftobjectlibrary module~sharedexceptionmanagermodule SharedExceptionManagerModule module~ftexceptionclass->module~sharedexceptionmanagermodule proc~subroutinethatthrowserror subroutineThatThrowsError module~ftexceptionclass->proc~subroutinethatthrowserror proc~testexception testException module~ftexceptionclass->proc~testexception module~sharedexceptionmanagermodule->proc~subroutinethatthrowserror proc~ftexceptionclasstests FTExceptionClassTests module~sharedexceptionmanagermodule->proc~ftexceptionclasstests module~ftvaluedictionaryclass->module~ftobjectlibrary module~ftvaluedictionaryclass->module~ftexceptionclass module~ftvaluedictionaryclass->proc~testexception module~ftvaluedictionaryclass->proc~ftexceptionclasstests proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests module~ftvaluedictionaryclass->proc~ftvaluedictionaryclasstests var panmoduleftmutableobjectarrayclassUsedByGraph = svgPanZoom('#moduleftmutableobjectarrayclassUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Interfaces cast release Derived Types FTMutableObjectArray Functions objectAtIndex chunkSize numberOfItems allocatedSize objectArrayFromObject arrayClassName Subroutines initObjectArrayWithSize destructObjectArray releaseFTMutableObjectArray addObjectToArray removeObjectAtIndex replaceObjectAtIndexWithObject printArray setChunkSize castToMutableObjectArray Interfaces public interface cast public subroutine castToMutableObjectArray (obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTMutableObjectArray ), POINTER :: cast public interface release public subroutine releaseFTMutableObjectArray (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name type( FTMutableObjectArray ), POINTER :: self Derived Types type, public, EXTENDS(FTObject) :: FTMutableObjectArray Type-Bound Procedures procedure, public :: initWithSize => initObjectArrayWithSize procedure, public :: destruct => destructObjectArray procedure, public :: addObject => addObjectToArray procedure, public :: replaceObjectAtIndexWithObject procedure, public :: removeObjectAtIndex procedure, public :: objectAtIndex procedure, public :: printDescription => printArray procedure, public :: className => arrayClassName procedure, public :: setChunkSize procedure, public :: chunkSize procedure, public :: COUNT => numberOfItems procedure, public :: allocatedSize Functions public function objectAtIndex (self, indx) result(obj) Access the object at the index indx Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self integer :: indx Return Value class(FTObject),\n  POINTER public function chunkSize (self) Returns the number of items to be added when the array needs to be re-sized Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self Return Value integer public function numberOfItems (self) Generic name: count Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self Return Value integer public function allocatedSize (self) Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self Return Value integer public function objectArrayFromObject (obj) result(cast) Generic Name: cast Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( FTMutableObjectArray ),\n  POINTER public function arrayClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH) Subroutines public subroutine initObjectArrayWithSize (self, arraySize) Designated initializer. Initializes the amount of storage, but\n the array remains empty. Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self integer :: arraySize public subroutine destructObjectArray (self) Destructor for the class. This is called automatically when the\n reference count reaches zero. Do not call this yourself. Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self public subroutine releaseFTMutableObjectArray (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name type( FTMutableObjectArray ), POINTER :: self public subroutine addObjectToArray (self, obj) Add an object to the end of the array Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self class(FTObject), POINTER :: obj public subroutine removeObjectAtIndex (self, indx) Remove an object at the index indx Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self integer :: indx public subroutine replaceObjectAtIndexWithObject (self, indx, replacement) Replace an object at the index indx Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self integer :: indx class(FTObject), POINTER :: replacement public subroutine printArray (self, iUnit) Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self integer :: iUnit public subroutine setChunkSize (self, chunkSize) Set the number of items to be added when the array needs to be re-sized Arguments Type Intent Optional Attributes Name class( FTMutableObjectArray ) :: self integer :: chunkSize public subroutine castToMutableObjectArray (obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTMutableObjectArray ), POINTER :: cast","tags":"","loc":"module/ftmutableobjectarrayclass.html","title":"FTMutableObjectArrayClass – FTObjectLibrary"},{"text":"FTObject is the root class for all object types. Overview FTObject defines the basic methods that are essential for reference counted objects. FTObject is generally not going to be instantiated by itself, but rather it will \nbe subclassed and one will work with instances of the subclasses. \nOtherwise, pointers of type FTObject that point to instances of subclasses\nwill be stored in the container classes. Tasks init() Initializes an object and any memory that it needs to allocate, etc. \n Should be orrerrided in subclasses.The base class implementation does nothing but\n increase the reference count of the object. destruct() Destructor of the object, which releases and deallocates owned objects and memory.\n Should be overrided in subclasses. The base class implementation does nothing but\n decrease the reference count of the object. printDescription(iUnit) Prints a description of the object to a specified file unit. The base class implementation\n does nothing but print \"FTObject\" copy() Creates a copy (pointer) to the object of CLASS(FTObject) sourced with the object. retain() Increases the reference count of the object. Any procedure or object that retain()'s\n an object gains an ownership stake in that object. This procedure is not overridable. release() Decreases the reference count of an object. To be called only by objects or procedures\n that have ownership in an object pointer, i.e., for which init() or retain() have been called.\n Override this procedure in subclasses for releasing the actual type. isUnreferenced() Test to see if there are no more owners of an object. refCount() Returns the number of owners of an object. Usually this is of interest only for debugging purposes.\n This procedure is not overridable. Subclassing FTObject In general, subclasses of FTObject override init() destruct() printDescription() release() They should also provide a cast() subroutine to convert from the base class to a subclass.\nThe cast() routine can look something like SUBROUTINE castToSubclass(obj,cast) \n    IMPLICIT NONE  \n    CLASS(FTObject), POINTER :: obj\n    CLASS(SubClass), POINTER :: cast\n\n    cast => NULL()\n    SELECT TYPE (e => obj)\n       TYPE is (SubClass)\n          cast => e\n       CLASS DEFAULT\n\n    END SELECT\n\n END SUBROUTINE castToSubclass Subclassing init The init() procedure performs subclass specific operations to initialize an object. Subclasses that override init() must include \na call to the super class method. For example, overriding init looks like SUBROUTINE initSubclass(self) \n    IMPLICIT NONE\n    CLASS(Subclass) :: self\n\n    CALL self % FTObject % init()\n    Allocate and initialize all member objects\n    ... Other Subclass specific code\n END SUBROUTINE initSubclass Subclassing destruct The destruct() procedure reverses the operations done in the init() procedure. It releases and\ndeallocates any pointers that it owns.  Subclasses that override destruct() must include \na call to the super class method. For example, overriding destruct looks like SUBROUTINE destructSubclass(self) \n    IMPLICIT NONE\n    CLASS(Subclass) :: self\n\n    Release and deallocate (if necessary) all member objects\n    CALL self % FTObject % destruct()\n\n END SUBROUTINE destructSubclass Subclassing printDescription(iUnit) printDescription is a method whose existence is to support debugging. Call printDescription(iUnit)\non any objects owned by self for a cascading of what is stored in the object. Casting an object from the base to a subclass Container classes and the copy function return pointers to a CLASS(FTObject). To use\nany subclass features one must \"cast\" to the subclass. We like to have a specific \ncast routine to do this as painlessly as possible. Each subclass should include a \nSUBROUTINE like this: SUBROUTINE castToSubclass(obj,cast) \n    IMPLICIT NONE  \n    CLASS(FTObject), POINTER :: obj\n    CLASS(Subclass), POINTER :: cast\n    cast => NULL()\n    SELECT TYPE (e => obj)\n       TYPE is (Subclass)\n          cast => e\n       CLASS DEFAULT\n    END SELECT\n END SUBROUTINE castToValue Subclassing className The className() procedure returns the name of the class. Subclasses should override className() !> Created: January 7, 2013 11:30 AM \n@author \nDavid A. Kopriva Used By module~~ftobjectclass~~UsedByGraph module~ftobjectclass FTObjectClass module~ftdataclass FTDataClass module~ftobjectclass->module~ftdataclass module~ftmultiindextabledata FTMultiIndexTableData module~ftobjectclass->module~ftmultiindextabledata module~ftsparsematrixclass FTSparseMatrixClass module~ftobjectclass->module~ftsparsematrixclass module~calculatorclass CalculatorClass module~ftobjectclass->module~calculatorclass module~ftvalueclass FTValueClass module~ftobjectclass->module~ftvalueclass proc~multiindextabletests MultiIndexTableTests module~ftobjectclass->proc~multiindextabletests module~ftkeyobjectpairclass FTKeyObjectPairClass module~ftobjectclass->module~ftkeyobjectpairclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftobjectclass->module~ftlinkedlistrecordclass module~ftobjectlibrary FTObjectLibrary module~ftobjectclass->module~ftobjectlibrary module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftmultiindextableclass FTMultiIndexTableClass module~ftobjectclass->module~ftmultiindextableclass module~ftsparsematrixdata FTSparseMatrixData module~ftobjectclass->module~ftsparsematrixdata module~ftmultiindextabledata->module~ftmultiindextableclass module~ftsparsematrixclass->module~ftobjectlibrary proc~sparsematrixtests SparseMatrixTests module~ftsparsematrixclass->proc~sparsematrixtests module~ftvalueclass->module~calculatorclass module~ftvalueclass->proc~multiindextabletests module~ftvalueclass->module~ftobjectlibrary module~ftvalueclass->proc~sparsematrixtests proc~ftdictionaryclasstests FTDictionaryClassTests module~ftvalueclass->proc~ftdictionaryclasstests proc~mutablearrayclasstests MutableArrayClassTests module~ftvalueclass->proc~mutablearrayclasstests proc~ftvalueclasstests FTValueClassTests module~ftvalueclass->proc~ftvalueclasstests proc~basictests basicTests module~ftvalueclass->proc~basictests proc~stackclasstests StackClassTests module~ftvalueclass->proc~stackclasstests proc~testdeletingobjects TestDeletingObjects module~ftvalueclass->proc~testdeletingobjects module~ftvaluedictionaryclass FTValueDictionaryClass module~ftvalueclass->module~ftvaluedictionaryclass proc~testappendinglists testAppendingLists module~ftvalueclass->proc~testappendinglists proc~hashtabletests HashTableTests module~ftvalueclass->proc~hashtabletests proc~demonstratelinkedlist demonstrateLinkedList module~ftvalueclass->proc~demonstratelinkedlist proc~teststackpush testStackPush module~ftvalueclass->proc~teststackpush module~ftdictionaryclass FTDictionaryClass module~ftkeyobjectpairclass->module~ftdictionaryclass module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistrecordclass->module~ftlinkedlistclass module~ftmutableobjectarrayclass->module~ftobjectlibrary module~ftmutableobjectarrayclass->proc~mutablearrayclasstests module~ftmutableobjectarrayclass->module~ftdictionaryclass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftmultiindextableclass->proc~multiindextabletests module~ftsparsematrixdata->module~ftsparsematrixclass module~ftvaluedictionaryclass->module~ftobjectlibrary proc~testexception testException module~ftvaluedictionaryclass->proc~testexception proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests module~ftvaluedictionaryclass->proc~ftvaluedictionaryclasstests module~ftexceptionclass FTExceptionClass module~ftvaluedictionaryclass->module~ftexceptionclass proc~ftexceptionclasstests FTExceptionClassTests module~ftvaluedictionaryclass->proc~ftexceptionclasstests module~ftexceptionclass->module~ftobjectlibrary module~ftexceptionclass->proc~testexception module~sharedexceptionmanagermodule SharedExceptionManagerModule module~ftexceptionclass->module~sharedexceptionmanagermodule proc~subroutinethatthrowserror subroutineThatThrowsError module~ftexceptionclass->proc~subroutinethatthrowserror module~sharedexceptionmanagermodule->proc~ftexceptionclasstests module~sharedexceptionmanagermodule->proc~subroutinethatthrowserror module~ftdictionaryclass->module~ftobjectlibrary module~ftdictionaryclass->proc~ftdictionaryclasstests module~ftdictionaryclass->module~ftvaluedictionaryclass module~ftdictionaryclass->module~ftexceptionclass module~ftlinkedlistclass->module~ftsparsematrixclass module~ftlinkedlistclass->module~ftobjectlibrary module~ftlinkedlistclass->module~ftmultiindextableclass module~ftlinkedlistclass->proc~basictests module~ftlinkedlistclass->proc~testdeletingobjects module~ftlinkedlistclass->proc~testappendinglists module~ftlinkedlistclass->proc~demonstratelinkedlist module~ftlinkedlistclass->module~ftdictionaryclass module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistclass->module~ftlinkedlistiteratorclass module~ftstackclass FTStackClass module~ftlinkedlistclass->module~ftstackclass module~ftlinkedlistiteratorclass->module~ftsparsematrixclass module~ftlinkedlistiteratorclass->module~ftobjectlibrary module~ftlinkedlistiteratorclass->proc~basictests module~ftlinkedlistiteratorclass->proc~testdeletingobjects module~ftlinkedlistiteratorclass->proc~testappendinglists module~ftlinkedlistiteratorclass->proc~demonstratelinkedlist module~ftlinkedlistiteratorclass->module~ftexceptionclass module~ftlinkedlistiteratorclass->module~ftdictionaryclass module~ftstackclass->module~calculatorclass module~ftstackclass->module~ftobjectlibrary module~ftstackclass->proc~stackclasstests module~ftstackclass->proc~teststackpush module~ftstackclass->module~ftexceptionclass proc~teststackinit testStackInit module~ftstackclass->proc~teststackinit var panmoduleftobjectclassUsedByGraph = svgPanZoom('#moduleftobjectclassUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables DESCRIPTION_CHARACTER_LENGTH CLASS_NAME_CHARACTER_LENGTH Derived Types FTObject Functions className isUnreferenced refCount FTObjectDescription Subroutines initFTObject destructFTObject retainFTObject releaseFTObject printFTObjectDescription Variables Type Visibility Attributes Name Initial integer, public, parameter :: DESCRIPTION_CHARACTER_LENGTH = 1024 integer, public, parameter :: CLASS_NAME_CHARACTER_LENGTH = 32 Derived Types type, public :: FTObject Type-Bound Procedures procedure, public :: init => initFTObject procedure, public :: destruct => destructFTObject procedure, public :: description => FTObjectDescription procedure, public :: printDescription => printFTObjectDescription procedure, public :: className procedure, public, NON_OVERRIDABLE :: copy => copyFTObject procedure, public, NON_OVERRIDABLE :: retain => retainFTObject procedure, public, NON_OVERRIDABLE :: isUnreferenced procedure, public, NON_OVERRIDABLE :: refCount Functions public function className (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTObject ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH) public function isUnreferenced (self) Arguments Type Intent Optional Attributes Name class( FTObject ) :: self Return Value logical public function refCount (self) Returns the reference count for the object. Normally this is done\n    only for debugging purposes. Arguments Type Intent Optional Attributes Name class( FTObject ) :: self Return Value integer public function FTObjectDescription (self) Returns a character string of length DESCRIPTION_CHARACTER_LENGTH that\n    represents the object. the base class implementation returns an empty\n    string. Note that if the description is too long, the expected string\n    will be trunctated. In general, one wants to use printDescription. Arguments Type Intent Optional Attributes Name class( FTObject ) :: self Return Value character(len=DESCRIPTION_CHARACTER_LENGTH) Subroutines public subroutine initFTObject (self) Generic Name: init() Arguments Type Intent Optional Attributes Name class( FTObject ) :: self public subroutine destructFTObject (self) Generic Name: destruct() Arguments Type Intent Optional Attributes Name class( FTObject ) :: self public subroutine retainFTObject (self) Retain increases the reference count by one and implies ownership\n  to the caller.\n  ### Usage:\n        CALL obj\\ % retain() Arguments Type Intent Optional Attributes Name class( FTObject ) :: self public subroutine releaseFTObject (self) Arguments Type Intent Optional Attributes Name class( FTObject ), POINTER :: self public subroutine printFTObjectDescription (self, iUnit) Generic Name: printDescription() Arguments Type Intent Optional Attributes Name class( FTObject ) :: self integer :: iUnit","tags":"","loc":"module/ftobjectclass.html","title":"FTObjectClass – FTObjectLibrary"},{"text":"Uses: FTObjectClass module~~ftsparsematrixdata~~UsesGraph module~ftsparsematrixdata FTSparseMatrixData module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftsparsematrixdata Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. FTSparseMatrixData is used by the FTSparseMatrix Class. Users will \nusually not interact with or use this class directly. Used By module~~ftsparsematrixdata~~UsedByGraph module~ftsparsematrixdata FTSparseMatrixData module~ftsparsematrixclass FTSparseMatrixClass module~ftsparsematrixdata->module~ftsparsematrixclass proc~sparsematrixtests SparseMatrixTests module~ftsparsematrixclass->proc~sparsematrixtests module~ftobjectlibrary FTObjectLibrary module~ftsparsematrixclass->module~ftobjectlibrary Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Interfaces cast Derived Types MatrixData Functions matrixDataCast Subroutines initWithObjectAndKey destructMatrixData castObjectToMatrixData Interfaces public interface cast public subroutine castObjectToMatrixData (obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( MatrixData ), POINTER :: cast Derived Types type, public, EXTENDS(FTObject) :: MatrixData Components Type Visibility Attributes Name Initial integer, public :: key class(FTObject), public, POINTER :: object Type-Bound Procedures procedure, public :: initWithObjectAndKey procedure, public :: destruct => destructMatrixData Functions public function matrixDataCast (obj) result(cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( MatrixData ),\n  POINTER Subroutines public subroutine initWithObjectAndKey (self, object, key) Arguments Type Intent Optional Attributes Name class( MatrixData ) :: self class(FTObject), POINTER :: object integer :: key public subroutine destructMatrixData (self) Arguments Type Intent Optional Attributes Name class( MatrixData ) :: self public subroutine castObjectToMatrixData (obj, cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( MatrixData ), POINTER :: cast","tags":"","loc":"module/ftsparsematrixdata.html","title":"FTSparseMatrixData – FTObjectLibrary"},{"text":"Uses: FTObjectClass FTLinkedListClass FTLinkedListIteratorClass FTSparseMatrixData module~~ftsparsematrixclass~~UsesGraph module~ftsparsematrixclass FTSparseMatrixClass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftsparsematrixclass module~ftsparsematrixdata FTSparseMatrixData module~ftobjectclass->module~ftsparsematrixdata module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftobjectclass->module~ftlinkedlistrecordclass module~ftsparsematrixdata->module~ftsparsematrixclass module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistclass->module~ftsparsematrixclass module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistclass->module~ftlinkedlistiteratorclass module~ftlinkedlistiteratorclass->module~ftsparsematrixclass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistrecordclass->module~ftlinkedlistclass var panmoduleftsparsematrixclassUsesGraph = svgPanZoom('#moduleftsparsematrixclassUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. The sparse matrix stores an FTObject pointer associated\nwith two keys (i,j) as a hash table. Hash tables are data structures designed to enable storage and fast\nretrieval of key-value pairs. An example of a key-value pair is\na variable name ( gamma'') and its associated value ( 1.4'').\nThe table itself is typically an array.\nThe location of the value in a hash table associated with\na key, $k$, is specified by way of a hash function, $H(k)$.\nIn the case of a variable name and value, the hash function\nwould convert the name into an integer that tells where to\nfind the associated value in the table. A very simple example of a\nhash table is, in fact, a singly dimensioned array. The key is \nthe array index and the value is what is stored at that index.\nMultiple keys can be used to identify data; a two dimensional\narray provides an example of where two keys are used to access memory\nand retrieve the value at that location.\nIf we view a singly dimensioned array as a special case of a hash table,\nits hash function is just the array index, $H(j)=j$. A doubly dimensioned array\ncould be (and often is) stored columnwise as a singly dimensioned array by creating a hash\nfunction that maps the two indices to a single location in the array, e.g.,\n$H(i,j) = i + j*N$, where $N$ is the range of the first index, $i$. Two classes are included in FTObjectLibrary. The first, FTSparseMatrix, works with an ordered pair, (i,j), as the\nkeys. The second, FTMultiIndexTable, uses an array of integers as the keys. Both classes include enquiry functions to see of an object exists for the given keys. Otherwise,\nthe function that returns an object for a given key will return an UNASSOCIATED pointer if there\nis no object for the key. Be sure to retain any object returned by the objectForKeys methods if \nyou want to keep it beyond the lifespan of the matrix or table. For example, TYPE(FTObject) :: obj\n       obj => matrix % objectForKeys(i,j)\n       IF ( ASSOCIATED(OBJ) ) THEN\n           CALL obj % retain()\n             Cast obj to something useful\n       ELSE\n          Perform some kind of error recovery\n       END IF The sparse matrix stores an FTObject pointer associated\nwith two keys (i,j) as a hash table. The size, N = the range of i. Definition (Subclass of FTObject) TYPE(FTSparseMatrix) :: SparseMatrix Usage Initialization CALL SparseMatrix % initWithSize(N) Destruction CALL release(SparseMatrix) Adding an object CLASS(FTObject), POINTER :: obj\n     CALL SparseMatrix % addObjectForKeys(obj,i,j) Retrieving an object CLASS(FTObject), POINTER :: obj\n     obj => SparseMatrix % objectForKeys(i,j) Be sure to retain the object if you want it to live\n      beyond the life of the table. Testing the presence of keys LOGICAL :: exists\n     exists = SparseMatrix % containsKeys(i,j) Used By module~~ftsparsematrixclass~~UsedByGraph module~ftsparsematrixclass FTSparseMatrixClass proc~sparsematrixtests SparseMatrixTests module~ftsparsematrixclass->proc~sparsematrixtests module~ftobjectlibrary FTObjectLibrary module~ftsparsematrixclass->module~ftobjectlibrary Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Interfaces release Derived Types FTSparseMatrix Functions objectInSparseMatrixForKeys SparseMatrixContainsKeys SparseMatrixSize SparseMatrixFromObject Hash1 Hash2 Subroutines initSparseMatrixWithSize addObjectToSparseMatrixForKeys destructSparseMatrix releaseFTSparseMatrix releaseSMMemberList Interfaces public interface release public subroutine releaseFTSparseMatrix (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ), POINTER :: self Derived Types type, public, EXTENDS(FTObject) :: FTSparseMatrix Components Type Visibility Attributes Name Initial type(FTLinkedListPtr), public, DIMENSION(:), ALLOCATABLE :: table Type-Bound Procedures procedure, public :: initWithSize => initSparseMatrixWithSize procedure, public :: destruct => destructSparseMatrix procedure, public :: containsKeys => SparseMatrixContainsKeys procedure, public :: addObjectForKeys => addObjectToSparseMatrixForKeys procedure, public :: objectForKeys => objectInSparseMatrixForKeys procedure, public :: SparseMatrixSize Functions public function objectInSparseMatrixForKeys (self, i, j) result(r) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ) :: self integer :: i integer :: j Return Value class(FTObject),\n  POINTER public function SparseMatrixContainsKeys (self, i, j) result(r) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ) :: self integer :: i integer :: j Return Value logical public function SparseMatrixSize (self) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ) :: self Return Value integer public function SparseMatrixFromObject (obj) result(cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( FTSparseMatrix ),\n  POINTER public function Hash1 (idPair) Arguments Type Intent Optional Attributes Name integer, DIMENSION(2) :: idPair Return Value integer public function Hash2 (idPair) Arguments Type Intent Optional Attributes Name integer, DIMENSION(2) :: idPair Return Value integer Subroutines public subroutine initSparseMatrixWithSize (self, N) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ) :: self integer :: N public subroutine addObjectToSparseMatrixForKeys (self, obj, i, j) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ) :: self class(FTObject), POINTER :: obj integer :: i integer :: j public subroutine destructSparseMatrix (self) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ) :: self public subroutine releaseFTSparseMatrix (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name class( FTSparseMatrix ), POINTER :: self public subroutine releaseSMMemberList (list) Arguments Type Intent Optional Attributes Name class(FTLinkedList), POINTER :: list","tags":"","loc":"module/ftsparsematrixclass.html","title":"FTSparseMatrixClass – FTObjectLibrary"},{"text":"Uses: FTLinkedListClass module~~ftstackclass~~UsesGraph module~ftstackclass FTStackClass module~ftlinkedlistclass FTLinkedListClass module~ftlinkedlistclass->module~ftstackclass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftlinkedlistrecordclass->module~ftlinkedlistclass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftobjectclass->module~ftlinkedlistrecordclass Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Inherits from FTLinkedListClass : FTObjectClass Definition (Subclass of FTLinkedListClass): TYPE(FTStack) :: list Usage: Initialization ALLOCATE(stack)  If stack is a pointer\n  CALL stack  %  init() Destruction CALL release ( stack ) [ Pointers ] CALL stack % destruct () [ Non pointers ] Pushing an object onto the stack TYPE(FTObject) :: objectPtr\n  objectPtr => r1\n  CALL stack % push(objectPtr) Peeking at the top of the stack objectPtr => stack % peek()  No change of ownership\n  SELECT TYPE(objectPtr)\n     TYPE is (*SubclassType*)\n        … Do something with ObjectPtr as subclass\n     CLASS DEFAULT\n        … Problem with casting\n  END SELECT Popping the top of the stack objectPtr => stack % pop()  Ownership transferred to caller\n  SELECT TYPE(objectPtr)\n     TYPE is (*SubclassType*)\n        … Do something with ObjectPtr as subclass\n     CLASS DEFAULT\n        … Problem with casting\n  END SELECT Used By module~~ftstackclass~~UsedByGraph module~ftstackclass FTStackClass module~ftexceptionclass FTExceptionClass module~ftstackclass->module~ftexceptionclass proc~stackclasstests StackClassTests module~ftstackclass->proc~stackclasstests module~calculatorclass CalculatorClass module~ftstackclass->module~calculatorclass proc~teststackpush testStackPush module~ftstackclass->proc~teststackpush module~ftobjectlibrary FTObjectLibrary module~ftstackclass->module~ftobjectlibrary proc~teststackinit testStackInit module~ftstackclass->proc~teststackinit module~ftexceptionclass->module~ftobjectlibrary module~sharedexceptionmanagermodule SharedExceptionManagerModule module~ftexceptionclass->module~sharedexceptionmanagermodule proc~subroutinethatthrowserror subroutineThatThrowsError module~ftexceptionclass->proc~subroutinethatthrowserror proc~testexception testException module~ftexceptionclass->proc~testexception module~sharedexceptionmanagermodule->proc~subroutinethatthrowserror proc~ftexceptionclasstests FTExceptionClassTests module~sharedexceptionmanagermodule->proc~ftexceptionclasstests Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Interfaces release Derived Types FTStack Functions peek stackFromObject stackClassName Subroutines initFTStack releaseFTStack push pop printStackDescription Interfaces public interface release public subroutine releaseFTStack (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name type( FTStack ), POINTER :: self Derived Types type, public, EXTENDS(FTLinkedList) :: FTStack Type-Bound Procedures procedure, public :: init => initFTStack procedure, public :: printDescription => printStackDescription procedure, public :: className => stackClassName procedure, public :: push procedure, public :: pop procedure, public :: peek Functions public function peek (self) Arguments Type Intent Optional Attributes Name class( FTStack ) :: self Return Value class(FTObject),\n  POINTER public function stackFromObject (obj) result(cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( FTStack ),\n  POINTER public function stackClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTStack ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH) Subroutines public subroutine initFTStack (self) Public, generic name: init() Arguments Type Intent Optional Attributes Name class( FTStack ) :: self public subroutine releaseFTStack (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name type( FTStack ), POINTER :: self public subroutine push (self, obj) Arguments Type Intent Optional Attributes Name class( FTStack ) :: self class(FTObject), POINTER :: obj public subroutine pop (self, p) Arguments Type Intent Optional Attributes Name class( FTStack ) :: self class(FTObject), POINTER :: p public subroutine printStackDescription (self, iUnit) Arguments Type Intent Optional Attributes Name class( FTStack ) :: self integer :: iUnit","tags":"","loc":"module/ftstackclass.html","title":"FTStackClass – FTObjectLibrary"},{"text":"Uses: ieee_arithmetic iso_fortran_env FTOLConstants FTObjectClass module~~ftvalueclass~~UsesGraph module~ftvalueclass FTValueClass module~ftolconstants FTOLConstants module~ftolconstants->module~ftvalueclass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftvalueclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass iso_fortran_env iso_fortran_env iso_fortran_env->module~ftvalueclass Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. A not completely F2003/2008 version of an immutable class\n to store primitive values: integer, real, double precision, logical,\n character. (To Add: complex) This version does not use CLASS(*) or deferred length strings\n so that it can be used with gfortran 4.7/4.8 Usage: Initialization TYPE(FTValue) :: r, i, s, l, d\n\n    CALL r % initValue(3.14)\n    CALL i % initValue(6)\n    CALL d % initValue(3.14d0)\n    CALL l % initValue(.true.)\n    CALL s % initValue(\"A string\") Destruction CALL r % destruct () [ non pointers ] call release ( r ) [ Pointers ] Accessors real = r % realValue()\n    int  = i % integerValue()\n    doub = d % doublePrecisionValue()\n    logc = l % logicalValue()\n    str  = s % stringValue(nChars) Description str = v % description()\n    call v % printDescription(unit) Casting CLASS(FTVALUE) , POINTER :: v\n    CLASS(FTObject), POINTER :: obj\n    call cast(obj,v) The class will attempt to convert between the different types: CALL r % initWithReal(3.14)\n        print *, r % stringValue(8)\n\n        Logical variables rules:\n\n        real, doublePrecision, integer values\n           logicalValue = .FALSE. if input = 0\n           logicalValue = .TRUE.  if input /= 0 String values can be converted to numeric types. If the string is\n not a numeric, Huge(1) will be returned, for integers and NaN for reals. @author David Kopriva Used By module~~ftvalueclass~~UsedByGraph module~ftvalueclass FTValueClass proc~ftdictionaryclasstests FTDictionaryClassTests module~ftvalueclass->proc~ftdictionaryclasstests proc~sparsematrixtests SparseMatrixTests module~ftvalueclass->proc~sparsematrixtests proc~mutablearrayclasstests MutableArrayClassTests module~ftvalueclass->proc~mutablearrayclasstests proc~ftvalueclasstests FTValueClassTests module~ftvalueclass->proc~ftvalueclasstests proc~basictests basicTests module~ftvalueclass->proc~basictests proc~stackclasstests StackClassTests module~ftvalueclass->proc~stackclasstests proc~testdeletingobjects TestDeletingObjects module~ftvalueclass->proc~testdeletingobjects module~ftvaluedictionaryclass FTValueDictionaryClass module~ftvalueclass->module~ftvaluedictionaryclass proc~multiindextabletests MultiIndexTableTests module~ftvalueclass->proc~multiindextabletests proc~testappendinglists testAppendingLists module~ftvalueclass->proc~testappendinglists module~ftobjectlibrary FTObjectLibrary module~ftvalueclass->module~ftobjectlibrary proc~hashtabletests HashTableTests module~ftvalueclass->proc~hashtabletests proc~demonstratelinkedlist demonstrateLinkedList module~ftvalueclass->proc~demonstratelinkedlist proc~teststackpush testStackPush module~ftvalueclass->proc~teststackpush module~calculatorclass CalculatorClass module~ftvalueclass->module~calculatorclass module~ftvaluedictionaryclass->module~ftobjectlibrary proc~testexception testException module~ftvaluedictionaryclass->proc~testexception proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests module~ftvaluedictionaryclass->proc~ftvaluedictionaryclasstests module~ftexceptionclass FTExceptionClass module~ftvaluedictionaryclass->module~ftexceptionclass proc~ftexceptionclasstests FTExceptionClassTests module~ftvaluedictionaryclass->proc~ftexceptionclasstests module~ftexceptionclass->module~ftobjectlibrary module~ftexceptionclass->proc~testexception module~sharedexceptionmanagermodule SharedExceptionManagerModule module~ftexceptionclass->module~sharedexceptionmanagermodule proc~subroutinethatthrowserror subroutineThatThrowsError module~ftexceptionclass->proc~subroutinethatthrowserror module~sharedexceptionmanagermodule->proc~ftexceptionclasstests module~sharedexceptionmanagermodule->proc~subroutinethatthrowserror var panmoduleftvalueclassUsedByGraph = svgPanZoom('#moduleftvalueclassUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables FTVALUE_NOT_INTEGER FTVALUE_NOT_REAL FTVALUE_NOT_DOUBLEPRECISION FTVALUE_STRING_LENGTH FT_REAL_KIND FT_DOUBLE_PRECISION_KIND Interfaces cast release Derived Types FTValue Functions realValue doublePrecisionValue quadValue integerValue logicalValue stringValue FTValueDescription valueFromObject valueClassName Subroutines initWithReal initWithDoublePrecision initWithQuad initWithInteger initWithLogical initWithString destructValue releaseFTValue printValueDescription castToValue Variables Type Visibility Attributes Name Initial integer, public, parameter :: FTVALUE_NOT_INTEGER = HUGE(1) real, public, parameter :: FTVALUE_NOT_REAL = HUGE(1.0) double precision, public, parameter :: FTVALUE_NOT_DOUBLEPRECISION = HUGE(1.0D0) integer, public, parameter :: FTVALUE_STRING_LENGTH = 512 integer, public, parameter :: FT_REAL_KIND = SELECTED_REAL_KIND(6) integer, public, parameter :: FT_DOUBLE_PRECISION_KIND = SELECTED_REAL_KIND(15) Interfaces public interface cast public subroutine castToValue (obj, cast) Generic Name: cast Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTValue ), POINTER :: cast public interface release public subroutine releaseFTValue (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name class( FTValue ), POINTER :: self Derived Types type, public, EXTENDS(FTObject) :: FTValue Type-Bound Procedures generic, public :: initWithValue => initWithReal, initWithDoublePrecision, initWithString, initWithLogical, initWithInteger generic, public :: initWithValue => initWithQuad procedure, public :: destruct => destructValue procedure, public :: realValue procedure, public :: doublePrecisionValue procedure, public :: quadValue procedure, public :: stringValue procedure, public :: logicalValue procedure, public :: integerValue procedure, public :: description => FTValueDescription procedure, public :: printDescription => printValueDescription procedure, public :: className => valueClassName Functions public function realValue (self) Get the real value stored in the object, or convert the value\n in the object to a real if it is of a different type. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value real public function doublePrecisionValue (self) Get the double precision value stored in the object, or convert the value\n in the object to a double precision if it is of a different type. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value doubleprecision public function quadValue (self) Get the double precision value stored in the object, or convert the value\n in the object to a double precision if it is of a different type. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value doubleprecision public function integerValue (self) Get the integer value stored in the object, or convert the value\n in the object to an integer if it is of a different type. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value integer public function logicalValue (self) Get the logical value stored in the object, or convert the value\n in the object to a logical if it is of a different type. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value logical public function stringValue (self, requestedLength) result(s) Get the string value of length requestedLength stored in the object, or \n convert the value\n in the object to a string of that length if it is of a different type. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self integer :: requestedLength Return Value character(len=requestedLength) public function FTValueDescription (self) Returns the description of the value. In this case, it returns the \n stringValue() of the object. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value character(len=DESCRIPTION_CHARACTER_LENGTH) public function valueFromObject (obj) result(cast) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( FTValue ),\n  POINTER public function valueClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTValue ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH) Subroutines public subroutine initWithReal (self, v) Public, generic name: initwithValue() Arguments Type Intent Optional Attributes Name class( FTValue ) :: self real :: v public subroutine initWithDoublePrecision (self, v) Public, generic name: initwithValue() Arguments Type Intent Optional Attributes Name class( FTValue ) :: self doubleprecision :: v public subroutine initWithQuad (self, v) Public, generic name: initwithValue() Arguments Type Intent Optional Attributes Name class( FTValue ) :: self real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)) :: v public subroutine initWithInteger (self, v) Public, generic name: initwithValue() Arguments Type Intent Optional Attributes Name class( FTValue ) :: self integer :: v public subroutine initWithLogical (self, v) Public, generic name: initwithValue() Arguments Type Intent Optional Attributes Name class( FTValue ) :: self logical :: v public subroutine initWithString (self, v) Public, generic name: initwithValue() Arguments Type Intent Optional Attributes Name class( FTValue ) :: self character(len=*) :: v public subroutine destructValue (self) Public, generic name: destruct() Arguments Type Intent Optional Attributes Name class( FTValue ) :: self public subroutine releaseFTValue (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name class( FTValue ), POINTER :: self public subroutine printValueDescription (self, iUnit) Prints the description of the value to unit iUnit. In this case, it prints the stringValue() of the object. Arguments Type Intent Optional Attributes Name class( FTValue ) :: self integer :: iUnit public subroutine castToValue (obj, cast) Generic Name: cast Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTValue ), POINTER :: cast","tags":"","loc":"module/ftvalueclass.html","title":"FTValueClass – FTObjectLibrary"},{"text":"Uses: iso_fortran_env FTDictionaryClass FTValueClass module~~ftvaluedictionaryclass~~UsesGraph module~ftvaluedictionaryclass FTValueDictionaryClass module~ftvalueclass FTValueClass module~ftvalueclass->module~ftvaluedictionaryclass iso_fortran_env iso_fortran_env iso_fortran_env->module~ftvaluedictionaryclass iso_fortran_env->module~ftvalueclass module~ftdictionaryclass FTDictionaryClass module~ftdictionaryclass->module~ftvaluedictionaryclass module~ftolconstants FTOLConstants module~ftolconstants->module~ftvalueclass module~ftobjectclass FTObjectClass module~ftobjectclass->module~ftvalueclass module~ftkeyobjectpairclass FTKeyObjectPairClass module~ftobjectclass->module~ftkeyobjectpairclass module~ftmutableobjectarrayclass FTMutableObjectArrayClass module~ftobjectclass->module~ftmutableobjectarrayclass module~ftlinkedlistrecordclass FTLinkedListRecordClass module~ftobjectclass->module~ftlinkedlistrecordclass ieee_arithmetic ieee_arithmetic ieee_arithmetic->module~ftvalueclass module~ftkeyobjectpairclass->module~ftdictionaryclass module~ftmutableobjectarrayclass->module~ftdictionaryclass module~ftlinkedlistclass FTLinkedListClass module~ftmutableobjectarrayclass->module~ftlinkedlistclass module~ftlinkedlistclass->module~ftdictionaryclass module~ftlinkedlistiteratorclass FTLinkedListIteratorClass module~ftlinkedlistclass->module~ftlinkedlistiteratorclass module~ftlinkedlistiteratorclass->module~ftdictionaryclass module~ftlinkedlistrecordclass->module~ftlinkedlistclass var panmoduleftvaluedictionaryclassUsesGraph = svgPanZoom('#moduleftvaluedictionaryclassUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. The FTValueDictionary subclass of FTDictionary adds convenient methods\n to easily add fundamental (Real, integer,…) values to a dictionary. As a subclass, all other methods are still available. Usage: Adding a value CALL dict % addValueForKey(1,\"integer\")\n CALL dict % addValueForKey(3.14,\"real\")\n CALL dict % addValueForKey(98.6d0,\"double\")\n CALL dict % addValueForKey(.true.,\"logical\")\n CALL dict % addValueForKey(\"Hello World\",\"string\") Accessing a value i = dict % integerValueForKey(\"integer\")\n r = dict % realValueForKey(\"real\")\n d = dict % doublePrecisionValueForKey(\"double\")\n l = dict % logicalValueForKey(\"logical\")\n s = dict % stringValueForKey(\"string\",15) Converting an FTDictionary to an FTValueDictionary valueDict => valueDictionaryFromDictionary(dict) Converting an FTObject to an FTValueDictionary valueDict => valueDictionaryFromObject(obj) Used By module~~ftvaluedictionaryclass~~UsedByGraph module~ftvaluedictionaryclass FTValueDictionaryClass proc~testexception testException module~ftvaluedictionaryclass->proc~testexception module~ftobjectlibrary FTObjectLibrary module~ftvaluedictionaryclass->module~ftobjectlibrary proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests module~ftvaluedictionaryclass->proc~ftvaluedictionaryclasstests module~ftexceptionclass FTExceptionClass module~ftvaluedictionaryclass->module~ftexceptionclass proc~ftexceptionclasstests FTExceptionClassTests module~ftvaluedictionaryclass->proc~ftexceptionclasstests module~ftexceptionclass->proc~testexception module~ftexceptionclass->module~ftobjectlibrary module~sharedexceptionmanagermodule SharedExceptionManagerModule module~ftexceptionclass->module~sharedexceptionmanagermodule proc~subroutinethatthrowserror subroutineThatThrowsError module~ftexceptionclass->proc~subroutinethatthrowserror module~sharedexceptionmanagermodule->proc~ftexceptionclasstests module~sharedexceptionmanagermodule->proc~subroutinethatthrowserror var panmoduleftvaluedictionaryclassUsedByGraph = svgPanZoom('#moduleftvaluedictionaryclassUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Interfaces release Derived Types FTValueDictionary Functions realValueForKey integerValueForKey doublePrecisionValueForKey quadValueForKey logicalValueForKey stringValueForKey valueDictionaryFromDictionary valueDictionaryFromObject valueDictionaryClassName Subroutines releaseFTValueDictionary addIntegerValueForKey addRealValueForKey addDoublePrecisionValueForKey addQuadValueForKey addStringValueForKey addLogicalValueForKey castDictionaryToValueDictionary castObjectToValueDictionary Interfaces public interface release public subroutine releaseFTValueDictionary (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name type( FTValueDictionary ), POINTER :: self Derived Types type, public, EXTENDS(FTDictionary) :: FTValueDictionary Type-Bound Procedures generic, public :: addValueForKey => addRealValueForKey, addDoublePrecisionValueForKey, addIntegerValueForKey, addStringValueForKey, addLogicalValueForKey generic, public :: addValueForKey => addQuadValueForKey procedure, public :: realValueForKey procedure, public :: doublePrecisionValueForKey procedure, public :: quadValueForKey procedure, public :: integerValueForKey procedure, public :: stringValueForKey procedure, public :: logicalValueForKey procedure, public :: className => valueDictionaryClassName Functions public function realValueForKey (self, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: key Return Value real public function integerValueForKey (self, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: key Return Value integer public function doublePrecisionValueForKey (self, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: key Return Value doubleprecision public function quadValueForKey (self, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: key Return Value real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)) public function logicalValueForKey (self, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: key Return Value logical public function stringValueForKey (self, key, requestedLength) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: key integer :: requestedLength Return Value character(len=requestedLength) public function valueDictionaryFromDictionary (dict) result(valueDict) Arguments Type Intent Optional Attributes Name class(FTDictionary), POINTER :: dict Return Value class( FTValueDictionary ),\n  POINTER public function valueDictionaryFromObject (obj) result(valueDict) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj Return Value class( FTValueDictionary ),\n  POINTER public function valueDictionaryClassName (self) result(s) Class name returns a string with the name of the type of the object Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self Return Value character(len=CLASS_NAME_CHARACTER_LENGTH) Subroutines public subroutine releaseFTValueDictionary (self) Public, generic name: release(self) Arguments Type Intent Optional Attributes Name type( FTValueDictionary ), POINTER :: self public subroutine addIntegerValueForKey (self, i, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self integer :: i character(len=*) :: key public subroutine addRealValueForKey (self, r, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self real :: r character(len=*) :: key public subroutine addDoublePrecisionValueForKey (self, r, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self double precision :: r character(len=*) :: key public subroutine addQuadValueForKey (self, r, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)) :: r character(len=*) :: key public subroutine addStringValueForKey (self, s, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self character(len=*) :: s character(len=*) :: key public subroutine addLogicalValueForKey (self, l, key) Arguments Type Intent Optional Attributes Name class( FTValueDictionary ) :: self logical :: l character(len=*) :: key public subroutine castDictionaryToValueDictionary (dict, valueDict) Arguments Type Intent Optional Attributes Name class(FTDictionary), POINTER :: dict class( FTValueDictionary ), POINTER :: valueDict public subroutine castObjectToValueDictionary (obj, valueDict) Arguments Type Intent Optional Attributes Name class(FTObject), POINTER :: obj class( FTValueDictionary ), POINTER :: valueDict","tags":"","loc":"module/ftvaluedictionaryclass.html","title":"FTValueDictionaryClass – FTObjectLibrary"},{"text":"Uses: ComparisonsModule FTOLConstants iso_fortran_env module~~ftassertions~~UsesGraph module~ftassertions FTAssertions module~comparisonsmodule ComparisonsModule module~comparisonsmodule->module~ftassertions iso_fortran_env iso_fortran_env iso_fortran_env->module~ftassertions iso_fortran_env->module~comparisonsmodule module~ftolconstants FTOLConstants module~ftolconstants->module~ftassertions module~ftolconstants->module~comparisonsmodule Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Assertions are functions that return true or false\n that can be placed in a program to test whether\n a predicate is true. To use the assertions module, it must be initialized,\n usually in the main program. When it is no longer needed,\n it is finalized. Assertions are posted to the module as they\n are called, and can be summarized later at an appropriate time. Initialization CALL initializeSharedAssertionsManager Finalization CALL finalizeSharedAssertionsManager Asserting CALL FTAssertEqual(expectedValue,resultValue,message) Summarizing Assertions CALL SummarizeFTAssertions(title,unit) Additional enquiry functions INTEGER :: nf, nA\n   nF = numberOfAssertionFailures()\n   nA = numberOfAssertions() Used By module~~ftassertions~~UsedByGraph module~ftassertions FTAssertions proc~ftdictionaryclasstests FTDictionaryClassTests module~ftassertions->proc~ftdictionaryclasstests proc~sparsematrixtests SparseMatrixTests module~ftassertions->proc~sparsematrixtests proc~ftexceptionclasstests FTExceptionClassTests module~ftassertions->proc~ftexceptionclasstests proc~ftvalueclasstests FTValueClassTests module~ftassertions->proc~ftvalueclasstests proc~basictests basicTests module~ftassertions->proc~basictests proc~stackclasstests StackClassTests module~ftassertions->proc~stackclasstests proc~testdeletingobjects TestDeletingObjects module~ftassertions->proc~testdeletingobjects module~testsuitemanagerclass TestSuiteManagerClass module~ftassertions->module~testsuitemanagerclass proc~multiindextabletests MultiIndexTableTests module~ftassertions->proc~multiindextabletests proc~testappendinglists testAppendingLists module~ftassertions->proc~testappendinglists proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests module~ftassertions->proc~ftvaluedictionaryclasstests proc~hashtabletests HashTableTests module~ftassertions->proc~hashtabletests proc~teststackpush testStackPush module~ftassertions->proc~teststackpush proc~teststackinit testStackInit module~ftassertions->proc~teststackinit module~ftobjectlibrary FTObjectLibrary module~ftassertions->module~ftobjectlibrary proc~mutablearrayclasstests MutableArrayClassTests module~ftassertions->proc~mutablearrayclasstests module~testsuitemanagerclass->module~ftobjectlibrary program~testobjectsmain TestObjectsMain module~testsuitemanagerclass->program~testobjectsmain Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables FT_ASSERTION_STRING_LENGTH Interfaces FTAssertEqual Derived Types FTAssertionsManager Functions sharedAssertionsManager numberOfAssertions numberOfAssertionFailures Subroutines detachSharedAssertionsManager initializeSharedAssertionsManager finalizeSharedAssertionsManager FTAssert assertWithinToleranceTwoQuad Variables Type Visibility Attributes Name Initial integer, public, parameter :: FT_ASSERTION_STRING_LENGTH = 128 Interfaces public interface FTAssertEqual private subroutine assertEqualTwoIntegers(expectedValue, actualValue, msg) Arguments Type Intent Optional Attributes Name integer, intent(in) :: expectedValue integer, intent(in) :: actualValue character(len=*), optional :: msg private subroutine assertEqualTwoIntegerArrays1D(expectedValue, actualValue) Arguments Type Intent Optional Attributes Name integer, intent(in), DIMENSION(:) :: expectedValue integer, intent(in), DIMENSION(:) :: actualValue private subroutine assertEqualTwoIntegerArrays2D(expectedValue, actualValue) Arguments Type Intent Optional Attributes Name integer, intent(in), DIMENSION(:,:) :: expectedValue integer, intent(in), DIMENSION(:,:) :: actualValue private subroutine assertWithinToleranceTwoReal(expectedValue, actualValue, tol, msg) Arguments Type Intent Optional Attributes Name real, intent(in) :: expectedValue real, intent(in) :: actualValue real, intent(in) :: tol character(len=*), optional :: msg private subroutine assertWithinToleranceTwoRealArrays1D(expectedValue, actualValue, tol, msg) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: expectedValue real, intent(in), DIMENSION(:) :: actualValue real, intent(in) :: tol character(len=*), optional :: msg private subroutine assertWithinToleranceTwoRealArrays2D(expectedValue, actualValue, tol) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: expectedValue real, intent(in), DIMENSION(:,:) :: actualValue real, intent(in) :: tol private subroutine assertWithinToleranceTwoDouble(expectedValue, actualValue, tol, msg) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: expectedValue double precision, intent(in) :: actualValue double precision, intent(in) :: tol character(len=*), optional :: msg private subroutine assertWithinToleranceTwoDoubleArrays1D(expectedValue, actualValue, tol, msg) Arguments Type Intent Optional Attributes Name double precision, intent(in), DIMENSION(:) :: expectedValue double precision, intent(in), DIMENSION(:) :: actualValue double precision, intent(in) :: tol character(len=*), optional :: msg private subroutine assertWithinToleranceTwoDoubleArrays2D(expectedValue, actualValue, tol) Arguments Type Intent Optional Attributes Name double precision, intent(in), DIMENSION(:,:) :: expectedValue double precision, intent(in), DIMENSION(:,:) :: actualValue double precision, intent(in) :: tol public subroutine assertWithinToleranceTwoQuad (expectedValue, actualValue, tol, msg) Arguments Type Intent Optional Attributes Name real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)), intent(in) :: expectedValue real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)), intent(in) :: actualValue real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)), intent(in) :: tol character(len=*), optional :: msg private subroutine assertEqualTwoLogicals(expectedValue, actualValue, msg) Arguments Type Intent Optional Attributes Name logical, intent(in) :: expectedValue logical, intent(in) :: actualValue character(len=*), optional :: msg private subroutine assertEqualString(expectedValue, actualValue, msg) Arguments Type Intent Optional Attributes Name character(len=*) :: expectedValue character(len=*) :: actualValue character(len=*), optional :: msg Derived Types type, public :: FTAssertionsManager Type-Bound Procedures procedure, public :: init procedure, public :: finalize procedure, public :: numberOfAssertionFailures procedure, public :: numberOfAssertions procedure, public :: summarizeAssertions Functions public function sharedAssertionsManager () Arguments None Return Value type( FTAssertionsManager ),\n  POINTER public function numberOfAssertions (self) Arguments Type Intent Optional Attributes Name class( FTAssertionsManager ) :: self Return Value integer public function numberOfAssertionFailures (self) Arguments Type Intent Optional Attributes Name class( FTAssertionsManager ) :: self Return Value integer Subroutines public subroutine detachSharedAssertionsManager () Arguments None public subroutine initializeSharedAssertionsManager () Arguments None public subroutine finalizeSharedAssertionsManager () Arguments None public subroutine FTAssert (test, msg) Arguments Type Intent Optional Attributes Name logical :: test character(len=*), optional :: msg public subroutine assertWithinToleranceTwoQuad (expectedValue, actualValue, tol, msg) Arguments Type Intent Optional Attributes Name real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)), intent(in) :: expectedValue real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)), intent(in) :: actualValue real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)), intent(in) :: tol character(len=*), optional :: msg","tags":"","loc":"module/ftassertions.html","title":"FTAssertions – FTObjectLibrary"},{"text":"Uses: iso_fortran_env FTOLConstants module~~comparisonsmodule~~UsesGraph module~comparisonsmodule ComparisonsModule module~ftolconstants FTOLConstants module~ftolconstants->module~comparisonsmodule iso_fortran_env iso_fortran_env iso_fortran_env->module~comparisonsmodule Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Defines procedures that test equality of different kinds of arguments.\n Procedures defined here are USEd by the FTAssertions Module. Used By module~~comparisonsmodule~~UsedByGraph module~comparisonsmodule ComparisonsModule module~ftassertions FTAssertions module~comparisonsmodule->module~ftassertions module~ftobjectlibrary FTObjectLibrary module~comparisonsmodule->module~ftobjectlibrary module~ftassertions->module~ftobjectlibrary proc~ftdictionaryclasstests FTDictionaryClassTests module~ftassertions->proc~ftdictionaryclasstests proc~sparsematrixtests SparseMatrixTests module~ftassertions->proc~sparsematrixtests proc~ftexceptionclasstests FTExceptionClassTests module~ftassertions->proc~ftexceptionclasstests proc~ftvalueclasstests FTValueClassTests module~ftassertions->proc~ftvalueclasstests proc~basictests basicTests module~ftassertions->proc~basictests proc~stackclasstests StackClassTests module~ftassertions->proc~stackclasstests proc~testdeletingobjects TestDeletingObjects module~ftassertions->proc~testdeletingobjects module~testsuitemanagerclass TestSuiteManagerClass module~ftassertions->module~testsuitemanagerclass proc~multiindextabletests MultiIndexTableTests module~ftassertions->proc~multiindextabletests proc~testappendinglists testAppendingLists module~ftassertions->proc~testappendinglists proc~ftvaluedictionaryclasstests FTValueDictionaryClassTests module~ftassertions->proc~ftvaluedictionaryclasstests proc~hashtabletests HashTableTests module~ftassertions->proc~hashtabletests proc~teststackpush testStackPush module~ftassertions->proc~teststackpush proc~teststackinit testStackInit module~ftassertions->proc~teststackinit proc~mutablearrayclasstests MutableArrayClassTests module~ftassertions->proc~mutablearrayclasstests module~testsuitemanagerclass->module~ftobjectlibrary program~testobjectsmain TestObjectsMain module~testsuitemanagerclass->program~testobjectsmain Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables ASSERT_SUCCESS ASSERT_SIZE_DIFFERS ASSERT_VALUES_DIFFER compareCodeStrings Interfaces isEqual Derived Types assertInfoArray1D assertInfoArray2D Variables Type Visibility Attributes Name Initial integer, public, parameter :: ASSERT_SUCCESS = 0 integer, public, parameter :: ASSERT_SIZE_DIFFERS = 1 integer, public, parameter :: ASSERT_VALUES_DIFFER = 2 character(len=21), public, parameter :: compareCodeStrings (0:2) = [ASSERT_VALUES_OK_NAME, ASSERT_SIZE_DIFFERS_NAME, ASSERT_VALUES_DIFFERS_NAME] Interfaces public interface isEqual private function isEqualTwoIntegers(i, j) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i integer, intent(in) :: j Return Value logical private function isEqualTwoIntegerArrays1D(a, b, info) Arguments Type Intent Optional Attributes Name integer, intent(in), DIMENSION(:) :: a integer, intent(in), DIMENSION(:) :: b type( assertInfoArray1D ), intent(inout), optional :: info Return Value logical private function isEqualTwoIntegerArrays2D(a, b, info) Arguments Type Intent Optional Attributes Name integer, intent(in), DIMENSION(:,:) :: a integer, intent(in), DIMENSION(:,:) :: b type( assertInfoArray2D ), intent(inout), optional :: info Return Value logical private function isWithinToleranceTwoReal(x, y, tol) Arguments Type Intent Optional Attributes Name real, intent(in) :: x real, intent(in) :: y real, intent(in) :: tol Return Value logical private function isWithinToleranceTwoRealArrays1D(a, b, tol, code) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: a real, intent(in), DIMENSION(:) :: b real, intent(in) :: tol integer, intent(out), optional :: code Return Value logical private function isWithinToleranceTwoRealArrays2D(a, b, tol, code) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: a real, intent(in), DIMENSION(:,:) :: b real, intent(in) :: tol integer, intent(out), optional :: code Return Value logical private function isWithinToleranceTwoDouble(x, y, tol) Arguments Type Intent Optional Attributes Name double precision, intent(in) :: x double precision, intent(in) :: y double precision, intent(in) :: tol Return Value logical private function isWithinToleranceTwoDoubleArrays1D(a, b, tol, code) Arguments Type Intent Optional Attributes Name double precision, intent(in), DIMENSION(:) :: a double precision, intent(in), DIMENSION(:) :: b double precision, intent(in) :: tol integer, intent(out), optional :: code Return Value logical private function isWithinToleranceTwoDoubleArrays2D(a, b, tol, code) Arguments Type Intent Optional Attributes Name double precision, intent(in), DIMENSION(:,:) :: a double precision, intent(in), DIMENSION(:,:) :: b double precision, intent(in) :: tol integer, intent(out), optional :: code Return Value logical private function isEqualString(s1, s2) Arguments Type Intent Optional Attributes Name character(len=*) :: s1 character(len=*) :: s2 Return Value logical private function isWithinToleranceTwoQuad(x, y, tol) Arguments Type Intent Optional Attributes Name real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)), intent(in) :: x real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)), intent(in) :: y real(kind=SELECTED_REAL_KIND(QUAD_DIGITS)), intent(in) :: tol Return Value logical Derived Types type, public :: assertInfoArray1D Components Type Visibility Attributes Name Initial character(len=128), public :: failureName integer, public :: failureType logical, public, DIMENSION(:), ALLOCATABLE :: locations type, public :: assertInfoArray2D Components Type Visibility Attributes Name Initial character(len=128), public :: failureName integer, public :: failureType logical, public, DIMENSION(:,:), ALLOCATABLE :: locations","tags":"","loc":"module/comparisonsmodule.html","title":"ComparisonsModule – FTObjectLibrary"},{"text":"Uses: FTAssertions module~~testsuitemanagerclass~~UsesGraph module~testsuitemanagerclass TestSuiteManagerClass module~ftassertions FTAssertions module~ftassertions->module~testsuitemanagerclass module~comparisonsmodule ComparisonsModule module~comparisonsmodule->module~ftassertions iso_fortran_env iso_fortran_env iso_fortran_env->module~ftassertions iso_fortran_env->module~comparisonsmodule module~ftolconstants FTOLConstants module~ftolconstants->module~ftassertions module~ftolconstants->module~comparisonsmodule Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. The TestSuiteManager class defines methods to easily\n put together and run a suite of unit tests. The tests are managed by an instance of the TestSuiteManager class. It is designed to be used with minimal fuss. You Initialize the test suite Add test subroutines Have the testSuiteManager perform the tests Finalize the test suite manager Usage: Definition TYPE(TestSuiteManager) :: testSuite Initialization call testSuite % init() Creating a test A test is a subroutine with interface ABSTRACT INTERFACE\n        SUBROUTINE testSuiteSubroutine()\n        END SUBROUTINE testSuiteSubroutine\n     END INTERFACE that (typically) includes unit test calls. You add\n   a test suite function by the add subroutine CALL testSuite % addTestSubroutineWithName(SubroutineName, description) where SubroutineName = a subroutine with the interface as above, and description = a CHARACTER(LEN=128) character string that names the test Setting the output location Set the unit to which the output is written by CALL testSuite % setOutputUnit(iUnit) Running tests To run the tests call CALL testSuite % performTests() OR\n     CALL testSuite % performTests(numFailed) Finalizing the test suite When done, call CALL testSuite % finalize() Used By module~~testsuitemanagerclass~~UsedByGraph module~testsuitemanagerclass TestSuiteManagerClass module~ftobjectlibrary FTObjectLibrary module~testsuitemanagerclass->module~ftobjectlibrary program~testobjectsmain TestObjectsMain module~testsuitemanagerclass->program~testobjectsmain Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types TestSuiteManager Derived Types type, public :: TestSuiteManager Components Type Visibility Attributes Name Initial integer, public :: numberOfTests integer, public :: stdOut = 6 type(TestCaseRecord), public, POINTER :: testCasesHead => NULL() type(TestCaseRecord), public, POINTER :: testCasesTail => NULL() Type-Bound Procedures procedure, public :: init => initializeTestSuiteManager procedure, public :: finalize => finalizeTestSuiteManager procedure, public :: addTestSubroutineWithName procedure, public :: performTests procedure, public :: setOutputUnit","tags":"","loc":"module/testsuitemanagerclass.html","title":"TestSuiteManagerClass – FTObjectLibrary"},{"text":"Used By module~~exceptionwrapper~~UsedByGraph module~exceptionwrapper ExceptionWrapper proc~subroutinethatthrowserror subroutineThatThrowsError module~exceptionwrapper->proc~subroutinethatthrowserror Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Functions testException Functions public function testException () Arguments None Return Value class(FTException),\n  POINTER","tags":"","loc":"module/exceptionwrapper.html","title":"ExceptionWrapper – FTObjectLibrary"},{"text":"Used By module~~stackunittestsmodule~~UsedByGraph module~stackunittestsmodule StackUnitTestsModule proc~stackclasstests StackClassTests module~stackunittestsmodule->proc~stackclasstests Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Subroutines testStackInit testStackPush Subroutines public subroutine testStackInit (stack) Arguments Type Intent Optional Attributes Name class(FTStack), POINTER :: stack public subroutine testStackPush (stack) Arguments Type Intent Optional Attributes Name class(FTStack), POINTER :: stack","tags":"","loc":"module/stackunittestsmodule.html","title":"StackUnitTestsModule – FTObjectLibrary"},{"text":"Uses: TestSuiteManagerClass program~~testobjectsmain~~UsesGraph program~testobjectsmain TestObjectsMain module~testsuitemanagerclass TestSuiteManagerClass module~testsuitemanagerclass->program~testobjectsmain module~ftassertions FTAssertions module~ftassertions->module~testsuitemanagerclass module~comparisonsmodule ComparisonsModule module~comparisonsmodule->module~ftassertions iso_fortran_env iso_fortran_env iso_fortran_env->module~ftassertions iso_fortran_env->module~comparisonsmodule module~ftolconstants FTOLConstants module~ftolconstants->module~ftassertions module~ftolconstants->module~comparisonsmodule var panprogramtestobjectsmainUsesGraph = svgPanZoom('#programtestobjectsmainUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~testobjectsmain~~CallsGraph program~testobjectsmain TestObjectsMain init init program~testobjectsmain->init finalize finalize program~testobjectsmain->finalize performtests performtests program~testobjectsmain->performtests addtestsubroutinewithname addtestsubroutinewithname program~testobjectsmain->addtestsubroutinewithname Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables testSuite numberOfFailedTests Variables Type Attributes Name Initial type(TestSuiteManager) :: testSuite integer :: numberOfFailedTests","tags":"","loc":"program/testobjectsmain.html","title":"TestObjectsMain – FTObjectLibrary"}]}